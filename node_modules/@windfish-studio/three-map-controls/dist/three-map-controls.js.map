{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///delegated ./node_modules/three/build/three.module.js from dll-reference vendor","webpack:///./src/three-map-controls.js","webpack:///./test/stub_dom.js","webpack:///external \"vendor\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","three__WEBPACK_IMPORTED_MODULE_0__","window","require","MapControls","EventDispatcher","constructor","camera","domElement","options","super","this","undefined","document","body","enabled","target","minDistance","maxDistance","enableZoom","zoomSpeed","zoomDampingAlpha","initialZoom","enablePan","keyPanSpeed","keyZoomSpeed","panDampingAlpha","enableKeys","keys","PAN_LEFT","PAN_UP","PAN_RIGHT","PAN_BOTTOM","ZOOM_IN","ZOOM_OUT","mouseButtons","ZOOM","MOUSE","MIDDLE","PAN","LEFT","assign","isTargetValid","mode","Error","normal","constant","center","radius","_eventListeners","contextmenu","_onContextMenu","bind","mousedown","_onMouseDown","mousewheel","_onMouseWheel","MozMousePixelScroll","touchstart","_onTouchStart","touchend","_onTouchEnd","touchmove","_onTouchMove","keydown","_onKeyDown","mouseover","_onMouseOver","mouseout","_onMouseOut","mousemove","_onMouseMove","mouseup","_onMouseUp","_init","target0","clone","position0","position","zoom0","zoom","_changeEvent","type","_startEvent","_endEvent","_STATES","NONE","DOLLY","TOUCH_DOLLY","TOUCH_PAN","distanceToPoint","_state","_mouse","Vector2","_finalTargetDistance","_currentTargetDistance","_panTarget","Vector3","_panCurrent","_minZoomPosition","_maxZoomPosition","_panStart","_panEnd","_panDelta","_dollyStart","_dollyEnd","_dollyDelta","_camOrientation","_zoomAlpha","_screenWorldXform","Math","tan","fov","PI","_straightDollyTrack","lerpVectors","abs","res","_intersectCameraTarget","lookAt","intersection","ray","direction","normalize","_updateZoomAlpha","forEach","_e","addEventListener","tagName","getAttribute","setAttribute","update","coplanar","projectPoint","Ray","subVectors","intersectPlane","intersectSphere","_updateDollyTrack","getZoomAlpha","reset","copy","updateProjectionMatrix","dispatchEvent","panDelta","oldPanCurrent","lerp","add","v","quat","Quaternion","setFromAxisAngle","setFromMatrixColumn","matrix","x","applyQuaternion","y","z","dispose","removeEventListener","zoomToFit","mesh","dims","geometry","boundingSphere","localToWorld","diameter","targetCoord","_sphericalCoordinatesFrom","camCoord","delta","vFOV","hFOV","atan","aspect","obj_aspect","targetAreaVisible","bbox","vOffset","hOffset","depth","distanceToPlane","Box2","cam_pos","halfPi","length","min","cos","_mm","cartesian_vec","rel_pos","rel_xzcomponent","sphCoord","angleTo","max","diff","damping_alpha","round","intersect","addVectors","multiplyScalar","_calculateMinZoom","sub","_getZoomScale","speed","pow","_panLeft","distance","cameraMatrix","set","_panUp","_pan","deltaX","deltaY","targetDistance","element","camToTarget","clientHeight","_dollyIn","dollyScale","_cameraOfKnownType","console","warn","_dollyOut","_handleUpdateDollyTrackMouse","event","prevMouse","offsetX","clientWidth","offsetY","equals","rc","Raycaster","setFromCamera","_handleMouseDownDolly","_handleMouseDownPan","_handleMouseMoveDolly","_handleMouseMovePan","_handleMouseUp","map_intersect","_handleMouseWheel","wheelDelta","detail","_handleKeyDown","key","_handleUpdateDollyTrackTouch","centerpoint","dx","touches","pageX","dy","pageY","mouse","_handleTouchStartDolly","sqrt","_handleTouchStartPan","_handleTouchMoveDolly","_handleTouchMovePan","_handleTouchEnd","preventDefault","button","stopPropagation","focus","blur","log","vendor"],"mappings":"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","file":"three-map-controls.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = (__webpack_require__(3))(0);","'use strict';\n\n//Alex Pilafian 2016-2019 - sikanrong@gmail.com\n\nimport {\n    Box2,\n    Quaternion,\n    EventDispatcher,\n    Vector2,\n    Vector3,\n    Raycaster,\n    Ray,\n    MOUSE\n} from 'three'\n\n//test stubs\nif(typeof window == 'undefined'){\n    let window = require('../test/stub_dom');\n}\n\nclass MapControls extends EventDispatcher{\n\n        constructor(camera, domElement, options){\n            super();\n\n            this.camera = camera;\n\n            //Object to use for listening for keyboard/mouse events\n            this.domElement = ( domElement !== undefined ) ? domElement : window.document.body;\n\n            // Set to false to disable this control (Disables all input events)\n            this.enabled = true;\n\n            // Must be set to instance of Plane or Sphere\n            this.target;\n\n            // How far you can dolly in and out\n            this.minDistance = 1; //probably should never be 0\n            this.maxDistance = 100;\n\n            // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n            // Set to false to disable zooming\n            this.enableZoom = true;\n            this.zoomSpeed = 6.0;\n            this.zoomDampingAlpha = 0.1;\n            this.initialZoom = 0; //start zoomed all the way out unless set in options.\n\n            // Set to false to disable panning\n            this.enablePan = true;\n            this.keyPanSpeed = 50.0;\t// pixels moved per arrow key push\n            this.keyZoomSpeed = this.zoomSpeed;\t// keyboard zoom speed, defaults to mouse-wheel zoom speed\n            this.panDampingAlpha = 0.1;\n\n            // Set to false to disable use of the keys\n            this.enableKeys = true;\n\n            // The four arrow keys, and two zoom keys\n            this.keys = {\n                PAN_LEFT: \"ArrowLeft\",\n                PAN_UP: \"ArrowUp\",\n                PAN_RIGHT: \"ArrowRight\",\n                PAN_BOTTOM: \"ArrowDown\",\n                ZOOM_IN: \"]\",\n                ZOOM_OUT: \"[\"\n            };\n\n            // Mouse buttons\n            this.mouseButtons = { ZOOM: MOUSE.MIDDLE, PAN: MOUSE.LEFT };\n            \n            //Copy options from parameters\n            Object.assign(this, options);\n            let isTargetValid = false;\n\n            if(this.mode === undefined){\n                throw new Error('\\'mode\\' option must be set to either \\'plane\\' or \\'sphere\\'');\n            }\n\n            switch(this.mode){\n                case 'plane':\n                    isTargetValid = (this.target.normal !== undefined && this.target.constant !== undefined);\n                    break;\n                case 'sphere':\n                    isTargetValid = (this.target.center !== undefined && this.target.radius !== undefined);\n                    break;\n            }\n\n            if(!isTargetValid){\n                throw new Error('\\'target\\' option must be an instance of type THREE.Plane or THREE.Sphere');\n            }\n\n            this._eventListeners = {\n                'contextmenu': this._onContextMenu.bind(this),\n                'mousedown': this._onMouseDown.bind(this),\n                'mousewheel': this._onMouseWheel.bind(this),\n                'MozMousePixelScroll': this._onMouseWheel.bind(this),\n                'touchstart': this._onTouchStart.bind(this),\n                'touchend': this._onTouchEnd.bind(this),\n                'touchmove': this._onTouchMove.bind(this),\n                'keydown': this._onKeyDown.bind(this),\n                'mouseover': this._onMouseOver.bind(this),\n                'mouseout': this._onMouseOut.bind(this),\n                'mousemove': this._onMouseMove.bind(this),\n                'mouseup': this._onMouseUp.bind(this)\n            };\n\n            this._init();\n        }\n\n        _init (){\n\n            this.target0 = this.target.clone();\n            this.position0 = this.camera.position.clone();\n            this.zoom0 = this.camera.zoom;\n            this._changeEvent = { type: 'change' };\n            this._startEvent = { type: 'start' };\n            this._endEvent = { type: 'end' };\n\n            this._STATES = { NONE : - 1, DOLLY : 1, PAN : 2, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n            if(this.target.distanceToPoint(this.camera.position) == 0){\n                throw new Error(\"ORIENTATION_UNKNOWABLE: initial Camera position cannot intersect target plane.\");\n            }\n\n            this._state = this._STATES.NONE;\n\n            this._mouse = new Vector2();\n\n            this._finalTargetDistance = 0;\n            this._currentTargetDistance = 0;\n\n            this._panTarget = new Vector3(0,0,0);\n            this._panCurrent = new Vector3(0,0,0);\n\n            this._minZoomPosition = new Vector3();\n            this._maxZoomPosition = new Vector3();\n\n            this._panStart = new Vector2();\n            this._panEnd = new Vector2();\n            this._panDelta = new Vector2();\n\n            this._dollyStart = new Vector2();\n            this._dollyEnd = new Vector2();\n            this._dollyDelta = new Vector2();\n\n            this._camOrientation = new Vector2();\n\n            this._zoomAlpha;\n\n            this._screenWorldXform = Math.tan( ( this.camera.fov / 2 ) * Math.PI / 180.0 );\n\n            //establish initial camera orientation based on position w.r.t. _this.target plane\n            this._straightDollyTrack();\n\n            this.camera.position.lerpVectors(this._minZoomPosition, this._maxZoomPosition, this.initialZoom);\n            this._finalTargetDistance = this._currentTargetDistance = Math.abs(this.target.distanceToPoint(this.camera.position));\n\n            const res = this._intersectCameraTarget();\n            this.camera.lookAt(res.intersection); //set the orientation of the camera towards the map.\n            this._camOrientation = res.ray.direction.clone().normalize();\n\n            this._updateZoomAlpha();\n\n            //Assign event listeners\n\n            [\n                'contextmenu',\n                'mousedown',\n                'mousewheel',\n                'MozMousePixelScroll',\n                'touchstart',\n                'touchend',\n                'touchmove',\n                'mouseover',\n                'mouseout',\n                'keydown'\n            ].forEach(_e => {\n                this.domElement.addEventListener(_e, this._eventListeners[_e], false);\n            });\n\n            if(this.domElement.tagName == 'CANVAS' &&\n               !this.domElement.getAttribute('tabindex')){\n                //if we're dealing with a canvas element which has no tabindex,\n                //give it one so that it may recieve keyboard focus\n                this.domElement.setAttribute('tabindex', '1');\n            }\n\n            this.update();\n        }\n\n        _intersectCameraTarget(){\n            let intersection = new Vector3();\n            let ray;\n\n            switch(this.mode){\n                case 'plane':\n                    const coplanar = new Vector3();\n                    this.target.projectPoint(this.camera.position, coplanar);\n                    ray = new Ray(this.camera.position, new Vector3().subVectors(coplanar, this.camera.position).normalize());\n                    ray.intersectPlane(this.target, intersection);\n                    break;\n                case 'sphere':\n                    ray = new Ray(this.camera.position, (new Vector3()).subVectors(this.target.center, this.camera.position).normalize());\n                    ray.intersectSphere(this.target, intersection);\n                    break;\n            }\n\n            return {\n                intersection: intersection,\n                ray: ray\n            }\n        }\n\n        _straightDollyTrack(){\n            this._updateDollyTrack(this._intersectCameraTarget().ray);\n        }\n\n        getZoomAlpha () {\n            return this._zoomAlpha;\n        }\n\n        reset () {\n\n            this.target.copy( this.target0 );\n            this.camera.position.copy( this.position0 );\n            this.camera.zoom = this.zoom0;\n\n            this.camera.updateProjectionMatrix();\n\n            this._init(); //reinit\n\n            this.dispatchEvent( this._changeEvent );\n\n            this.update();\n\n            this._state = this._STATES.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        update () {\n            const panDelta = new Vector3();\n            const oldPanCurrent = new Vector3();\n            const position = this.camera.position;\n\n            // move target to panned location\n            oldPanCurrent.copy(this._panCurrent);\n            this._panCurrent.lerp( this._panTarget, this.panDampingAlpha );\n            panDelta.subVectors(this._panCurrent, oldPanCurrent);\n\n            switch (this.mode) {\n                case 'plane':\n                    this._maxZoomPosition.add(panDelta);\n                    this._minZoomPosition.add(panDelta);\n                    break;\n                case 'sphere':\n                    const v = new Vector3();\n                    const quat = new Quaternion();\n\n                    quat.setFromAxisAngle(v.setFromMatrixColumn( this.camera.matrix, 1 ), panDelta.x);\n\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    quat.setFromAxisAngle(v.setFromMatrixColumn( this.camera.matrix, 0 ), panDelta.y);\n\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    //panDelta.z is only used for zoomToFit\n                    //all pan operations rotate around the camera's MatrixColumn axes, while zoomToFit needs to\n                    //rotate about the world Y-axis\n                    quat.setFromAxisAngle(new Vector3(0,1,0), panDelta.z);\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    break;\n            }\n\n            position.lerpVectors(this._minZoomPosition, this._maxZoomPosition, this._updateZoomAlpha());\n\n            if(this.mode == 'sphere'){\n                this.camera.lookAt(this.target.center);\n            }\n        }\n\n        dispose () {\n            Object.keys(this._eventListeners).forEach(_e =>{\n                this.domElement.removeEventListener(_e, this._eventListeners[_e], false);\n            });\n        };\n\n        zoomToFit (mesh, center, dims){\n\n            if(center === undefined){\n                center = mesh.geometry.boundingSphere.center.clone();\n            }\n\n            center = mesh.localToWorld(center.clone());\n\n            if(dims === undefined){\n                const diameter = (mesh.geometry.boundingSphere.radius * 2);\n                dims = new Vector2(\n                    diameter,\n                    diameter\n                );\n            }\n\n            switch(this.mode){\n                case 'plane':\n                    this._panTarget.copy(center);\n                    this._panCurrent.copy(this._intersectCameraTarget().intersection);\n                    break;\n                case 'sphere':\n                    const targetCoord = this._sphericalCoordinatesFrom(center);\n                    const camCoord = this._sphericalCoordinatesFrom(this.camera.position);\n                    const delta = new Vector2().subVectors(targetCoord, camCoord);\n\n                    //Handle wrapping around the antimeridian; the line of 2π (or 0) radians\n                    if(Math.abs(delta.x) > Math.PI){\n                        delta.x = (-Math.abs(delta.x) / delta.x) * ((Math.PI * 2) - Math.abs(delta.x));\n                    }\n\n                    this._panTarget.add(new Vector3(0, -delta.y, delta.x));\n                    break;\n            }\n\n            this._straightDollyTrack();\n\n            const vFOV = this.camera.fov * (Math.PI / 180);\n            const hFOV = 2 * Math.atan( Math.tan( vFOV / 2 ) * this.camera.aspect );\n            const obj_aspect = dims.x / dims.y;\n\n            this._finalTargetDistance = ((((obj_aspect > this.camera.aspect)? dims.x : dims.y) / 2) / Math.tan(((obj_aspect > this.camera.aspect)? hFOV : vFOV) / 2));\n\n\n        };\n\n        //returns a bounding box denoting the visible target area\n        targetAreaVisible(){\n\n            let bbox, vOffset, hOffset, center;\n\n            switch(this.mode){\n                case 'plane':\n                    var ray = new Ray(this.camera.position, this._camOrientation);\n                    var depth = ray.distanceToPlane(this.target);\n\n                    center = this.camera.position.clone();\n\n                    vOffset = this._screenWorldXform * depth;\n                    hOffset = vOffset * this.camera.aspect;\n\n                    bbox = new Box2(\n                        new Vector2(center.x - hOffset, center.y - vOffset),\n                        new Vector2(center.x + hOffset, center.y + vOffset)\n                    );\n\n                    break;\n                case 'sphere':\n                    const cam_pos = (new Vector3()).subVectors(this.target.center, this.camera.position);\n                    center = this._sphericalCoordinatesFrom(this.camera.position);\n\n                    const halfPi = Math.PI / 2;\n\n                    const d = cam_pos.length();\n\n                    //Derived from solving the Haversine formula for Phi_2 when all other variables\n                    //(d, r, Theta_1, Theta_2, Phi_1) are given\n                    vOffset = this._screenWorldXform * ((d / this.target.radius) - 1);\n                    vOffset = Math.min(vOffset, halfPi);\n\n                    //Account for the aspect ratio of the screen, and the deformation of the sphere\n                    const r = this.target.radius * Math.cos(center.y - halfPi);\n                    hOffset = vOffset * this.camera.aspect * ( this.target.radius / r);\n                    hOffset = Math.min(hOffset, halfPi);\n\n                    bbox = new Box2(\n                        new Vector2(center.x - hOffset - halfPi, center.y - vOffset - halfPi),\n                        new Vector2(center.x + hOffset - halfPi, center.y + vOffset - halfPi)\n                    );\n\n                    ['min', 'max'].forEach(_mm => {\n                        bbox[_mm].x = (bbox[_mm].x > Math.PI)? (-2*Math.PI + bbox[_mm].x): bbox[_mm].x;\n                    });\n\n                    break;\n            };\n\n            return bbox;\n        }\n\n        _sphericalCoordinatesFrom (cartesian_vec) {\n            const rel_pos = ((new Vector3()).subVectors(this.target.center, cartesian_vec));\n            const rel_xzcomponent = new Vector3(rel_pos.x, 0, rel_pos.z);\n\n            const v = new Vector3();\n            const sphCoord = new Vector2(\n                rel_xzcomponent.angleTo(new Vector3(1,0,0)),\n                rel_pos.angleTo(new Vector3(0,1,0))\n            );\n            sphCoord.x = (rel_pos.z > 0)? (2*Math.PI - sphCoord.x) : sphCoord.x;\n            return sphCoord;\n        }\n\n        _updateZoomAlpha(){\n            this._finalTargetDistance = Math.max( this.minDistance, Math.min( this.maxDistance, this._finalTargetDistance ) );\n            var diff = this._currentTargetDistance - this._finalTargetDistance;\n            var damping_alpha = this.zoomDampingAlpha;\n            this._currentTargetDistance -= diff * damping_alpha;\n            var rounding_places = 100000;\n            this._zoomAlpha = Math.abs(Math.round((1 - ((this._currentTargetDistance - this.minDistance) / (this.maxDistance - this.minDistance))) * rounding_places ) / rounding_places);\n\n            return this._zoomAlpha;\n        }\n\n        _updateDollyTrack(ray){\n            let intersect = new Vector3();\n\n            switch(this.mode){\n                case 'plane':\n                    ray.intersectPlane(this.target, intersect);\n                    break;\n                case 'sphere':\n                    ray.intersectSphere(this.target, intersect);\n                    break;\n            }\n\n            if(intersect){\n                this._maxZoomPosition.addVectors(intersect, new Vector3().subVectors(this.camera.position, intersect).normalize().multiplyScalar(this.minDistance));\n                this._minZoomPosition.copy(this._calculateMinZoom(this.camera.position, intersect));\n\n                this._finalTargetDistance = this._currentTargetDistance = intersect.clone().sub(this.camera.position).length();\n            }\n        }\n\n        _getZoomScale(speed) {\n            speed = speed || this.zoomSpeed;\n            return Math.pow( 0.95, speed );\n        }\n\n        _panLeft( distance, cameraMatrix ) {\n            var v = new Vector3();\n\n            switch(this.mode){\n                case 'sphere':\n                    v.set(- distance, 0, 0);\n                    break;\n                case 'plane':\n                    v.setFromMatrixColumn( cameraMatrix, 0 ); // get Y column of cameraMatrix\n                    v.multiplyScalar( - distance );\n                    break;\n            }\n\n            this._panTarget.add( v );\n        }\n\n        _panUp ( distance, cameraMatrix ) {\n            var v = new Vector3();\n\n            switch(this.mode){\n                case 'sphere':\n                    v.set(0, - distance, 0);\n                    break;\n                case 'plane':\n                    v.setFromMatrixColumn( cameraMatrix, 1 ); // get Y column of cameraMatrix\n                    v.multiplyScalar( distance );\n                    break;\n            }\n\n            this._panTarget.add( v );\n        }\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        _pan (deltaX, deltaY) {\n            var element = this.domElement;\n\n            var r = new Ray(this.camera.position, this._camOrientation);\n            var targetDistance;\n\n            switch(this.mode){\n                case 'plane':\n                    targetDistance = this._screenWorldXform * r.distanceToPlane(this.target);\n                    break;\n                case 'sphere':\n                    //in spherical mode the pan coords are saved as radians and used as rotation angles\n                    const camToTarget = (new Vector3()).subVectors(this.camera.position, this.target.center);\n                    targetDistance = this._screenWorldXform * ((camToTarget.length() / this.target.radius) - 1);\n                    break;\n            }\n\n            // we actually don't use screenWidth, since perspective camera is fixed to screen height\n            this._panLeft( 2 * deltaX * targetDistance / element.clientHeight, this.camera.matrix );\n            this._panUp( 2 * deltaY * targetDistance / element.clientHeight, this.camera.matrix );\n\n        }\n\n        _dollyIn( dollyScale ) {\n            if ( this._cameraOfKnownType() ) {\n                this._finalTargetDistance /= dollyScale;\n            } else {\n                console.warn( 'WARNING: MapControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                this.enableZoom = false;\n            }\n        }\n\n        _dollyOut( dollyScale ) {\n            if ( this._cameraOfKnownType() ) {\n                this._finalTargetDistance *= dollyScale;\n            } else {\n                console.warn( 'WARNING: MapControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                this.enableZoom = false;\n            }\n        }\n\n        _cameraOfKnownType() {\n            return this.camera.type === 'PerspectiveCamera'\n        }\n\n        _handleUpdateDollyTrackMouse(event){\n            var prevMouse = this._mouse.clone();\n            this._mouse.set(( event.offsetX / this.domElement.clientWidth ) * 2 - 1, - ( event.offsetY / this.domElement.clientHeight ) * 2 + 1);\n\n            if(!prevMouse.equals(this._mouse)){\n                var rc = new Raycaster();\n                rc.setFromCamera(this._mouse, this.camera);\n                this._updateDollyTrack(rc.ray);\n            }\n        }\n\n        _handleMouseDownDolly( event ) {\n            this._handleUpdateDollyTrackMouse(event);\n            this._dollyStart.set( event.offsetX, event.offsetY );\n        }\n\n        _handleMouseDownPan( event ) {\n\n            this._panStart.set( event.offsetX, event.offsetY );\n\n        }\n\n        _handleMouseMoveDolly( event ) {\n\n            this._handleUpdateDollyTrackMouse(event);\n\n            //console.log( 'handleMouseMoveDolly' );\n\n            this._dollyEnd.set( event.offsetX, event.offsetY );\n\n            this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart );\n\n            if ( this._dollyDelta.y > 0 ) {\n\n                this._dollyIn( this._getZoomScale() );\n\n            } else if ( this._dollyDelta.y < 0 ) {\n\n                this._dollyOut( this._getZoomScale() );\n\n            }\n\n            this._dollyStart.copy( this._dollyEnd );\n\n            this.update();\n\n        }\n\n        _handleMouseMovePan( event ) {\n\n            //console.log( 'handleMouseMovePan' );\n\n            this._panEnd.set( event.offsetX, event.offsetY );\n\n            this._panDelta.subVectors( this._panEnd, this._panStart );\n\n            this._pan( this._panDelta.x, this._panDelta.y );\n\n            this._panStart.copy( this._panEnd );\n\n            this.update();\n\n        }\n\n        _handleMouseUp( event ) {\n\n            //console.log( 'handleMouseUp' );\n\n        }\n\n        _calculateMinZoom(cam_pos, map_intersect){\n            return map_intersect.clone().add(\n                cam_pos.clone()\n                .sub(map_intersect)\n                .normalize()\n                .multiplyScalar(this.maxDistance)\n            );\n        }\n\n\n        _handleMouseWheel( event ) {\n            this._handleUpdateDollyTrackMouse(event);\n\n            var delta = 0;\n\n            if ( event.wheelDelta !== undefined ) {\n\n                // WebKit / Opera / Explorer 9\n\n                delta = event.wheelDelta;\n\n            } else if ( event.detail !== undefined ) {\n\n                // Firefox\n\n                delta = - event.detail;\n\n            }\n\n            if ( delta > 0 ) {\n                this._dollyOut( this._getZoomScale() );\n            } else if ( delta < 0 ) {\n                this._dollyIn( this._getZoomScale() );\n            }\n\n            this.update();\n        }\n\n        _handleKeyDown( event ) {\n\n            //console.log( 'handleKeyDown' );\n\n            switch ( event.key ) {\n\n                case this.keys.PAN_UP:\n                    this._pan( 0, this.keyPanSpeed );\n                    this.update();\n                    break;\n\n                case this.keys.PAN_BOTTOM:\n                    this._pan( 0, - this.keyPanSpeed );\n                    this.update();\n                    break;\n\n                case this.keys.PAN_LEFT:\n                    this._pan( this.keyPanSpeed, 0 );\n                    this.update();\n                    break;\n\n                case this.keys.PAN_RIGHT:\n                    this._pan( - this.keyPanSpeed, 0 );\n                    this.update();\n                    break;\n\n                case this.keys.ZOOM_IN:\n                    this._dollyIn( this._getZoomScale(this.keyZoomSpeed) )\n                    this.update();\n                    break;\n\n                case this.keys.ZOOM_OUT:\n                    this._dollyOut( this._getZoomScale(this.keyZoomSpeed) )\n                    this.update();\n                    break;\n\n            }\n        }\n\n        _handleUpdateDollyTrackTouch( event ){\n            var centerpoint = new Vector2();\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            centerpoint.x = event.touches[ 0 ].pageX + (dx / 2);\n            centerpoint.y = event.touches[ 0 ].pageY + (dy / 2);\n\n            var mouse = new Vector2();\n            mouse.x = ( centerpoint.x / domElement.clientWidth ) * 2 - 1;\n            mouse.y = - ( centerpoint.y / domElement.clientHeight ) * 2 + 1;\n\n            this._updateDollyTrack(mouse);\n        }\n\n        _handleTouchStartDolly( event ) {\n            this._handleUpdateDollyTrackTouch(event);\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            var distance = Math.sqrt( dx * dx + dy * dy );\n\n            this._dollyStart.set( 0, distance );\n\n        }\n\n        _handleTouchStartPan( event ) {\n\n            //console.log( 'handleTouchStartPan' );\n\n            this._panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n        }\n\n\n        _handleTouchMoveDolly( event ) {\n            this._handleUpdateDollyTrackTouch(event);\n\n            //console.log( 'handleTouchMoveDolly' );\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            var distance = Math.sqrt( dx * dx + dy * dy );\n\n            this._dollyEnd.set( 0, distance );\n\n            this._dollyDelta.subVectors( this._dollyEnd, this._dollyStart );\n\n            if ( this._dollyDelta.y > 0 ) {\n\n                this._dollyOut( this._getZoomScale() );\n\n            } else if ( this._dollyDelta.y < 0 ) {\n\n                this._dollyIn( this._getZoomScale() );\n\n            }\n\n            this._dollyStart.copy( this._dollyEnd );\n\n            this.update();\n\n        }\n\n        _handleTouchMovePan( event ) {\n\n            this._panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n            this._panDelta.subVectors( this._panEnd, this._panStart );\n\n            this._pan( this._panDelta.x, this._panDelta.y );\n\n            this._panStart.copy( this._panEnd );\n\n            this.update();\n\n        }\n\n        _handleTouchEnd( event ) {\n            //console.log( 'handleTouchEnd' );\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        _onMouseDown( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n\n            if ( event.button === this.mouseButtons.ZOOM ) {\n\n                if ( this.enableZoom === false ) return;\n\n                this._handleMouseDownDolly( event );\n\n                this._state = this._STATES.DOLLY;\n\n            } else if ( event.button === this.mouseButtons.PAN ) {\n\n                if ( this.enablePan === false ) return;\n\n                this._handleMouseDownPan( event );\n\n                this._state = this._STATES.PAN;\n\n            }\n\n            if ( this._state !== this._STATES.NONE ) {\n\n                this.domElement.addEventListener( 'mousemove', this._eventListeners.mousemove, false );\n                this.domElement.addEventListener( 'mouseup', this._eventListeners.mouseup, false );\n\n                this.dispatchEvent( this._startEvent );\n\n            }\n\n        }\n\n        _onMouseMove( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n\n            if ( this._state === this._STATES.DOLLY ) {\n\n                if ( this.enableZoom === false ) return;\n\n                this._handleMouseMoveDolly( event );\n\n            } else if ( this._state === this._STATES.PAN ) {\n\n                if ( this.enablePan === false ) return;\n\n                this._handleMouseMovePan( event );\n            }\n        }\n\n        _onMouseUp( event ) {\n\n            if ( this.enabled === false ) return;\n\n            this._handleMouseUp( event );\n\n            this.domElement.removeEventListener( 'mousemove', this._eventListeners.mousemove, false );\n            this.domElement.removeEventListener( 'mouseup', this._eventListeners.mouseup, false );\n\n            this.dispatchEvent( this._endEvent );\n\n            this._state = this._STATES.NONE;\n\n        }\n\n        _onMouseWheel( event ) {\n            if ( this.enabled === false || this.enableZoom === false || ( this._state !== this._STATES.NONE ) ) return;\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            this._handleMouseWheel( event );\n\n            this.dispatchEvent( this._startEvent ); // not sure why these are here...\n            this.dispatchEvent( this._endEvent );\n\n        }\n\n        _onKeyDown( event ) {\n            if ( this.enabled === false || this.enableKeys === false || this.enablePan === false ) return;\n\n            this._handleKeyDown( event );\n        }\n\n        _onTouchStart( event ) {\n\n            if ( this.enabled === false ) return;\n\n            switch ( event.touches.length ) {\n                case 1: // three-fingered touch: pan\n\n                    if ( this.enablePan === false ) return;\n\n                    this._handleTouchStartPan( event );\n\n                    this._state = this._STATES.TOUCH_PAN;\n\n                    break;\n\n                case 2:\t// two-fingered touch: dolly\n\n                    if ( this.enableZoom === false ) return;\n\n                    this._handleTouchStartDolly( event );\n\n                    this._state = this._STATES.TOUCH_DOLLY;\n\n                    break;\n\n                default:\n\n                    this._state = this._STATES.NONE;\n\n            }\n\n            if ( this._state !== this._STATES.NONE ) {\n\n                this.dispatchEvent( this._startEvent );\n\n            }\n\n        }\n\n        _onTouchMove( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            switch ( event.touches.length ) {\n\n                case 1: // one-fingered touch: pan\n                    if ( this.enablePan === false ) return;\n                    if ( this._state !== this._STATES.TOUCH_PAN ) return; // is this needed?...\n\n                    this._handleTouchMovePan( event );\n\n                    break;\n\n                case 2: // two-fingered touch: dolly\n\n                    if ( this.enableZoom === false ) return;\n                    if ( this._state !== this._STATES.TOUCH_DOLLY ) return; // is this needed?...\n\n                    this._handleTouchMoveDolly( event );\n\n                    break;\n\n                default:\n\n                    this._state = this._STATES.NONE;\n\n            }\n\n        }\n\n        _onTouchEnd( event ) {\n\n            if ( this.enabled === false ) return;\n\n            this._handleTouchEnd( event );\n\n            this.dispatchEvent( this._endEvent );\n\n            this._state = this._STATES.NONE;\n\n        }\n\n        _onContextMenu( event ) {\n            event.preventDefault();\n        }\n\n        _onMouseOver ( event ) {\n            this.domElement.focus();\n            return false;\n        }\n\n        _onMouseOut ( event ) {\n            this.domElement.blur();\n            return false;\n        }\n\n};\n\nexport default MapControls;\n","module.exports = {\n    console: {\n        log: function () {}\n    },\n    document: {\n        body: {\n            clientWidth: 1920,\n            clientHeight: 1080,\n            addEventListener: function () {},\n            removeEventListener: function () {}\n        }\n    }\n};\n","module.exports = vendor;"],"sourceRoot":""}