{"version":3,"file":"progress-tracker.js","sourceRoot":"","sources":["../../src/utilities/progress-tracker.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {clamp} from '../utilities.js';\n\ninterface OngoingActivity {\n  progress: number;\n}\nconst $ongoingActivities = Symbol('ongoingActivities');\nconst $announceTotalProgress = Symbol('announceTotalProgress');\nconst $eventDelegate = Symbol('eventDelegate');\n\nconst ACTIVITY_PROGRESS_WEIGHT = 0.5;\n\n/**\n * An Activity is represented by a callback that accepts values from 0 to 1,\n * where 1 represents the completion of the activity. The callback returns the\n * actual progress as it is stored by the ProgressTracker (which may be clamped,\n * and can never be lower than its previous value).\n */\nexport type Activity = (progress: number) => number;\n\n/**\n * A progress event contains the total progress of all ongoing activities in the\n * ProgressTracker. The progress is a heuristic, should not be considered an\n * absolute representation of progress across any or all events.\n */\nexport interface ProgressDetails {\n  totalProgress: number;\n}\n\n/**\n * ProgressTracker is an event emitter that helps to track the ongoing progress\n * of many simultaneous actions.\n *\n * ProgressTracker reports progress activity in the form of a progress event.\n * The event.detail.totalProgress value indicates the elapsed progress of all\n * activities being tracked by the ProgressTracker.\n *\n * The value of totalProgress is a number that progresses from 0 to 1. The\n * ProgressTracker allows for the lazy accumulation of tracked actions, so the\n * total progress represents a abstract, non-absolute progress towards the\n * completion of all currently tracked events.\n *\n * When all currently tracked activities are finished, the ProgressTracker\n * emits one final progress event and then resets the list of its currently\n * tracked activities. This means that from an observer's perspective,\n * ongoing activities will accumulate and collectively contribute to the notion\n * of total progress until all currently tracked ongoing activities have\n * completed.\n */\nexport class ProgressTracker implements EventTarget {\n  // NOTE(cdata): This eventDelegate hack is a quick trick to let us get the\n  // EventTarget interface without implementing or requiring a full polyfill. We\n  // should remove this once EventTarget is inheritable everywhere.\n  protected[$eventDelegate]: DocumentFragment =\n      document.createDocumentFragment();\n\n  // NOTE(cdata): We declare each of these methods independently here so that we\n  // can inherit the correct types from EventTarget's interface. Maybe there is\n  // a better way to do this dynamically so that we don't repeat ourselves?\n  public addEventListener: typeof EventTarget.prototype.addEventListener =\n      (...args) => this[$eventDelegate].addEventListener(...args);\n  public removeEventListener: typeof EventTarget.prototype.removeEventListener =\n      (...args) => this[$eventDelegate].removeEventListener(...args);\n  public dispatchEvent: typeof EventTarget.prototype.dispatchEvent =\n      (...args) => this[$eventDelegate].dispatchEvent(...args);\n\n\n  protected[$ongoingActivities]: Set<OngoingActivity> = new Set();\n\n  /**\n   * The total number of activities currently being tracked.\n   */\n  get ongoingActivityCount(): number {\n    return this[$ongoingActivities].size;\n  }\n\n  /**\n   * Registers a new activity to be tracked by the progress tracker. The method\n   * returns a special callback that should be invoked whenever new progress is\n   * ready to be reported. The progress should be reported as a value between 0\n   * and 1, where 0 would represent the beginning of the action and 1 would\n   * represent its completion.\n   *\n   * There is no built-in notion of a time-out for ongoing activities, so once\n   * an ongoing activity is begun, it is up to the consumer of this API to\n   * update the progress until that activity is no longer ongoing.\n   *\n   * Progress is only allowed to move forward for any given activity. If a lower\n   * progress is reported than the previously reported progress, it will be\n   * ignored.\n   */\n  beginActivity(): Activity {\n    const activity: OngoingActivity = {progress: 0};\n\n    this[$ongoingActivities].add(activity);\n\n    if (this.ongoingActivityCount === 1) {\n      // Announce the first progress event (which should always be 0 / 1\n      // total progress):\n      this[$announceTotalProgress]();\n    }\n\n    return (progress: number): number => {\n      let nextProgress: number;\n\n      nextProgress = Math.max(clamp(progress, 0, 1), activity.progress);\n\n      if (nextProgress !== activity.progress) {\n        activity.progress = nextProgress;\n        this[$announceTotalProgress]();\n      }\n\n      return activity.progress;\n    };\n  }\n\n  [$announceTotalProgress]() {\n    let totalProgress = 0;\n    let statusCount = 0;\n    let completedActivities = 0;\n\n    for (const activity of this[$ongoingActivities]) {\n      const {progress} = activity;\n      const compoundWeight =\n          ACTIVITY_PROGRESS_WEIGHT / Math.pow(2, statusCount++);\n\n      totalProgress += progress * compoundWeight;\n\n      if (progress === 1.0) {\n        completedActivities++;\n      }\n    }\n\n    if (completedActivities === this.ongoingActivityCount) {\n      totalProgress = 1.0;\n      this[$ongoingActivities].clear();\n    }\n\n    this.dispatchEvent(new CustomEvent<ProgressDetails>(\n        'progress', {detail: {totalProgress}}));\n  }\n}\n"]}