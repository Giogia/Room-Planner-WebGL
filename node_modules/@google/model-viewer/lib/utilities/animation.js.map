{"version":3,"file":"animation.js","sourceRoot":"","sources":["../../src/utilities/animation.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAEH,mDAAmD;AACnD,MAAM,CAAC,MAAM,aAAa,GAAmB,CAAC,CAAS,EAAE,EAAE,CACvD,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAQ9C;;;GAGG;AACH,MAAM,CAAC,MAAM,WAAW,GACpB,CAAC,KAAa,EAAE,GAAW,EAAE,OAAuB,aAAa,EAC9C,EAAE,CAAC,CAAC,IAAY,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;AAE/E;;;;GAIG;AACH,MAAM,CAAC,MAAM,QAAQ,GACjB,CAAC,MAA6B,EAAE,OAAsB,EAAkB,EAAE;IACxE,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,KAAK,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC;IACzE,MAAM,MAAM,GAAkB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,GAAG,WAAW,CAAC,CAAC;IAE1E,OAAO,CAAC,IAAY,EAAE,EAAE;QACtB,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,IAAI,KAAK,GAAW,QAAQ,CAAC;QAC7B,IAAI,KAAK,GAAmB,GAAG,EAAE,CAAC,CAAC,CAAC;QAEpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACtC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAClB,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAElB,IAAI,IAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,EAAE;gBAC3B,MAAM;aACP;YAED,KAAK,IAAI,KAAK,CAAC;SAChB;QAED,OAAO,KAAM,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,KAAM,CAAC,CAAC;IACzC,CAAC,CAAA;AACH,CAAC,CAAC;AAYN;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,QAAQ,GACjB,CAAC,YAAoB,EAAE,SAA0B,EAAkB,EAAE;IACnE,MAAM,MAAM,GAA0B,EAAE,CAAC;IACzC,MAAM,OAAO,GAAkB,EAAE,CAAC;IAElC,IAAI,SAAS,GAAG,YAAY,CAAC;IAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACzC,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,GAAG,QAAQ,CAAC;QACjC,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,aAAa,CAAC;QAC5C,MAAM,KAAK,GAAG,WAAW,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAElD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrB,SAAS,GAAG,KAAK,CAAC;KACnB;IAED,OAAO,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACnC,CAAC,CAAC","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Adapted from https://gist.github.com/gre/1650294\nexport const easeInOutQuad: TimingFunction = (t: number) =>\n    t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n\n/**\n * A TimingFunction accepts a value from 0-1 and returns a corresponding\n * interpolated value\n */\nexport type TimingFunction = (time: number) => number;\n\n/**\n * Creates a TimingFunction that uses a given ease to interpolate between\n * two configured number values.\n */\nexport const interpolate =\n    (start: number, end: number, ease: TimingFunction = easeInOutQuad):\n        TimingFunction => (time: number) => start + (end - start) * ease(time);\n\n/**\n * Creates a TimingFunction that interpolates through a weighted list\n * of other TimingFunctions (\"tracks\"). Tracks are interpolated in order, and\n * allocated a percentage of the total time based on their relative weight.\n */\nexport const sequence =\n    (tracks: Array<TimingFunction>, weights: Array<number>): TimingFunction => {\n      const totalWeight = weights.reduce((total, weight) => total + weight, 0);\n      const ratios: Array<number> = weights.map(weight => weight / totalWeight);\n\n      return (time: number) => {\n        let start: number = 0;\n        let ratio: number = Infinity;\n        let track: TimingFunction = () => 0;\n\n        for (let i = 0; i < ratios.length; ++i) {\n          ratio = ratios[i];\n          track = tracks[i];\n\n          if (time <= (start + ratio)) {\n            break;\n          }\n\n          start += ratio;\n        }\n\n        return track!((time - start) / ratio!);\n      }\n    };\n\n/**\n * A Keyframe groups a target value, the number of frames to interpolate towards\n * that value and an optional easing funnction to use for interpolation.\n */\nexport interface Keyframe {\n  value: number;\n  frames: number;\n  ease?: TimingFunction;\n}\n\n/**\n * Creates a \"timeline\" TimingFunction out of an initial value and a series of\n * Keyframes. The timeline function accepts value from 0-1 and returns the\n * current value based on keyframe interpolation across the total number of\n * frames. Frames are only used to indicate the relative length of each keyframe\n * transition, so interpolated values will be computed for fractional frames.\n */\nexport const timeline =\n    (initialValue: number, keyframes: Array<Keyframe>): TimingFunction => {\n      const tracks: Array<TimingFunction> = [];\n      const weights: Array<number> = [];\n\n      let lastValue = initialValue;\n\n      for (let i = 0; i < keyframes.length; ++i) {\n        const keyframe = keyframes[i];\n        const {value, frames} = keyframe;\n        const ease = keyframe.ease || easeInOutQuad;\n        const track = interpolate(lastValue, value, ease);\n\n        tracks.push(track);\n        weights.push(frames);\n        lastValue = value;\n      }\n\n      return sequence(tracks, weights);\n    };\n"]}