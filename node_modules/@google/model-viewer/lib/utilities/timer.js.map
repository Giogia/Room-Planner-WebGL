{"version":3,"file":"timer.js","sourceRoot":"","sources":["../../src/utilities/timer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAEH,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AAErC;;GAEG;AACH,MAAM,OAAO,KAAK;IAgChB;;;;OAIG;IACH,YAAY,QAAgB;QAC1B,IAAI,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAClB,CAAC;IAvCD;;OAEG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAeD;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,IAAI;QACF,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACH,IAAI,CAAC,SAAiB;QACpB,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC;QAEzB,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;YAChC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;SAC/B;IACH,CAAC;CACF","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst $time = Symbol('time');\nconst $duration = Symbol('duration');\n\n/**\n * The Timer class can be used power delays and animations\n */\nexport class Timer {\n  /**\n   * total time incremented by the tick method. time is initialized to 0\n   */\n  get time(): number {\n    return this[$time];\n  }\n\n  /**\n   * a calculation of `time / duration` which can be used for animations\n   */\n  get timeScale(): number {\n    return this[$time] / this[$duration];\n  }\n\n  /**\n   * duration of the timer\n   */\n  get duration(): number {\n    return this[$duration];\n  }\n\n  /**\n   * whether the timer has run fully or stop has been called\n   */\n  get hasStopped(): boolean {\n    return this[$time] >= this[$duration];\n  }\n\n  private[$time]: number;\n  private[$duration]: number;\n\n  /**\n   * Creates a new timer\n   *\n   * @param duration the total duration for the timer\n   */\n  constructor(duration: number) {\n    this[$duration] = duration;\n    this[$time] = 0;\n  }\n\n  /**\n   * reset the time back to 0\n   */\n  reset(): void {\n    this[$time] = 0;\n  }\n\n  /**\n   * sets time to duration meaning the timer has completed and hasStopped will\n   * return true\n   */\n  stop(): void {\n    this[$time] = this[$duration];\n  }\n\n  /**\n   * pass deltaTime to the tick method to tick/increment the timer forward\n   *\n   * @param deltaTime delta time since last tick was called\n   */\n  tick(deltaTime: number) {\n    this[$time] += deltaTime;\n\n    if (this.time >= this[$duration]) {\n      this[$time] = this[$duration];\n    }\n  }\n}\n"]}