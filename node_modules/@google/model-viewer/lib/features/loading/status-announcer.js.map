{"version":3,"file":"status-announcer.js","sourceRoot":"","sources":["../../../src/features/loading/status-announcer.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {EventDispatcher} from 'three';\nimport ModelViewerElementBase from '../../model-viewer-base.js';\nimport {debounce, getFirstMapKey} from '../../utilities.js';\n\nexport const INITIAL_STATUS_ANNOUNCEMENT =\n    'This page includes one or more 3D models that are loading';\nexport const FINISHED_LOADING_ANNOUNCEMENT =\n    'All 3D models in the page have loaded';\nconst UPDATE_STATUS_DEBOUNCE_MS = 100;\n\n\nconst $modelViewerStatusInstance = Symbol('modelViewerStatusInstance');\nconst $updateStatus = Symbol('updateStatus');\n\ninterface InstanceLoadingStatus {\n  onUnregistered: () => void;\n}\n\n/**\n * The LoadingStatusAnnouncer manages announcements of loading status across\n * all <model-viewer> elements in the document at any given time. As new\n * <model-viewer> elements are connected to the document, they are registered\n * with a LoadingStatusAnnouncer singleton. As they are disconnected, the are\n * also unregistered. Announcements are made to indicate the following\n * conditions:\n *\n *  1. There are <model-viewer> elements that have yet to finish loading\n *  2. All <model-viewer> elements in the page have finished attempting to load\n */\nexport class LoadingStatusAnnouncer extends EventDispatcher {\n  /**\n   * The \"status\" instance is the <model-viewer> instance currently designated\n   * to announce the loading status of all <model-viewer> elements in the\n   * document at any given time. It might change as <model-viewer> elements are\n   * attached or detached over time.\n   */\n  protected[$modelViewerStatusInstance]: ModelViewerElementBase|null = null;\n\n  protected registeredInstanceStatuses:\n      Map<ModelViewerElementBase, InstanceLoadingStatus> =\n          new Map<ModelViewerElementBase, InstanceLoadingStatus>();\n\n  protected loadingPromises: Array<Promise<any>> = [];\n\n  /**\n   * This element is a node that floats around the document as the status\n   * instance changes (see above). It is a singleton that represents the loading\n   * status for all <model-viewer> elements currently in the page. It has its\n   * role attribute set to \"status\", which causes screen readers to announce\n   * any changes to its text content.\n   *\n   * @see https://www.w3.org/TR/wai-aria-1.1/#status\n   */\n  readonly statusElement: HTMLParagraphElement = document.createElement('p');\n  protected statusUpdateInProgress: boolean = false;\n\n  protected[$updateStatus]: () => void =\n      debounce(() => this.updateStatus(), UPDATE_STATUS_DEBOUNCE_MS);\n\n  constructor() {\n    super();\n    const {statusElement} = this;\n    const {style} = statusElement;\n\n    statusElement.setAttribute('role', 'status');\n    statusElement.classList.add('screen-reader-only');\n\n    style.top = style.left = '0';\n    style.pointerEvents = 'none';\n  }\n\n  /**\n   * Register a <model-viewer> element with the announcer. If it is not yet\n   * loaded, its loading status will be tracked by the announcer.\n   */\n  registerInstance(modelViewer: ModelViewerElementBase) {\n    if (this.registeredInstanceStatuses.has(modelViewer)) {\n      return;\n    }\n\n    let onUnregistered = () => {};\n    const loadShouldBeMeasured =\n        modelViewer.loaded === false && !!(modelViewer as any).src;\n    const loadAttemptCompletes = new Promise((resolve) => {\n      if (!loadShouldBeMeasured) {\n        resolve();\n        return;\n      }\n\n      const resolveHandler = () => {\n        resolve();\n\n        modelViewer.removeEventListener('load', resolveHandler);\n        modelViewer.removeEventListener('error', resolveHandler);\n      };\n\n      modelViewer.addEventListener('load', resolveHandler);\n      modelViewer.addEventListener('error', resolveHandler);\n\n      onUnregistered = resolveHandler;\n    });\n\n    this.registeredInstanceStatuses.set(modelViewer, {onUnregistered});\n    this.loadingPromises.push(loadAttemptCompletes);\n\n    if (this.modelViewerStatusInstance == null) {\n      this.modelViewerStatusInstance = modelViewer;\n    }\n  }\n\n  /**\n   * Unregister a <model-viewer> element with the announcer. Its loading status\n   * will no longer be tracked by the announcer.\n   */\n  unregisterInstance(modelViewer: ModelViewerElementBase) {\n    if (!this.registeredInstanceStatuses.has(modelViewer)) {\n      return;\n    }\n\n    const statuses = this.registeredInstanceStatuses;\n    const instanceStatus = statuses.get(modelViewer)!;\n    statuses.delete(modelViewer);\n    instanceStatus.onUnregistered();\n\n    if (this.modelViewerStatusInstance === modelViewer) {\n      this.modelViewerStatusInstance = statuses.size > 0 ?\n          getFirstMapKey<ModelViewerElementBase, InstanceLoadingStatus>(\n              statuses) :\n          null;\n    }\n  }\n\n  protected get modelViewerStatusInstance(): ModelViewerElementBase|null {\n    return this[$modelViewerStatusInstance];\n  }\n\n  protected set modelViewerStatusInstance(value: ModelViewerElementBase|null) {\n    const currentInstance = this[$modelViewerStatusInstance];\n    if (currentInstance === value) {\n      return;\n    }\n\n    const {statusElement} = this;\n\n    if (value != null && value.shadowRoot != null) {\n      value.shadowRoot.appendChild(statusElement);\n    } else if (statusElement.parentNode != null) {\n      statusElement.parentNode.removeChild(statusElement);\n    }\n\n    this[$modelViewerStatusInstance] = value;\n    this[$updateStatus]();\n  }\n\n  protected async updateStatus() {\n    if (this.statusUpdateInProgress || this.loadingPromises.length === 0) {\n      return;\n    }\n\n    this.statusElement.textContent = INITIAL_STATUS_ANNOUNCEMENT;\n    this.statusUpdateInProgress = true;\n    this.dispatchEvent({type: 'initial-status-announced'});\n\n    while (this.loadingPromises.length) {\n      const {loadingPromises} = this;\n      this.loadingPromises = [];\n      await Promise.all(loadingPromises);\n    }\n\n    this.statusElement.textContent = FINISHED_LOADING_ANNOUNCEMENT;\n    this.statusUpdateInProgress = false;\n    this.dispatchEvent({type: 'finished-loading-announced'});\n  }\n}\n"]}