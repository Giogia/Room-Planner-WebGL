{"version":3,"file":"scene-graph.js","sourceRoot":"","sources":["../../src/features/scene-graph.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ThreeDOMCapability} from '@google/3dom/lib/api.js';\nimport {ThreeDOMExecutionContext} from '@google/3dom/lib/context.js';\nimport {ModelGraft} from '@google/3dom/lib/facade/three-js/model-graft.js';\nimport {property} from 'lit-element';\nimport {Scene} from 'three';\nimport {GLTFParser} from 'three/examples/jsm/loaders/GLTFLoader';\n\nimport ModelViewerElementBase, {$needsRender, $onModelLoad, $scene} from '../model-viewer-base.js';\nimport {Constructor} from '../utilities.js';\n\nconst SCENE_GRAPH_SCRIPT_TYPE = 'experimental-scene-graph-worklet';\nconst VALID_CAPABILITIES: Set<ThreeDOMCapability> =\n    new Set(['messaging', 'fetch', 'material-properties']);\n\nconst $onChildListMutation = Symbol('onChildListMutation');\nconst $childListMutationHandler = Symbol('childListMutationHandler');\nconst $mutationObserver = Symbol('mutationObserver');\nconst $createExecutionContext = Symbol('createExecutionContext');\nconst $onScriptElementAdded = Symbol('onScriptElementAdded');\nconst $executionContext = Symbol('executionContext');\nconst $updateExecutionContextModel = Symbol('updateExecutionContextModel');\nconst $modelGraft = Symbol('modelGraft');\nconst $onModelGraftMutation = Symbol('onModelGraftMutation');\nconst $modelGraftMutationHandler = Symbol('modelGraftMutationHandler');\n\nexport interface SceneGraphInterface {\n  worklet: Worker|null;\n}\n\n/**\n * SceneGraphMixin manages a `<model-viewer>` integration with the 3DOM library\n * in order to support custom scripts that operate on the <model-viewer> scene\n * graph.\n *\n * When applied, users can specify a special `<script>` type that can be added\n * as a child of `<model-viewer>`. The script will be invoked in a special\n * Web Worker, conventionally referred to as a \"scene graph worklet.\"\n *\n * Script on the browser main thread can communicate with the scene graph\n * worklet via `modelViewer.worklet` using `postMessage`, much like they would\n * with any other Web Worker.\n *\n * Scene graph worklet scripts must be bestowed capabilities by the author of\n * the `<model-viewer>` markup. The three capabilities currently available\n * include:\n *\n *  - `messaging`: The ability to communicate with other contexts via\n *    `postMessage` and `MessageChannel`\n *  - `fetch`: Access to the global `fetch` method for network operations\n *  - `material-properties`: The ability to manipulate the basic properties of\n *    a Material and its associated constructs in the scene graph\n *\n * A trivial example of creating a scene graph worklet that can manipulate\n * material properties looks like this:\n *\n * ```html\n * <model-viewer>\n *   <script type=\"experimental-scene-graph-worklet\"\n *       allow=\"material-properties\">\n *\n *     console.log('Hello from the scene graph worklet!');\n *\n *     self.addEventListener('model-change', () => {\n *       model.materials[0].pbrMetallicRoughness\n *         .setBaseColorFactor([1, 0, 0, 1]);\n *     });\n *\n *   </script>\n * </model-viewer>\n * ```\n *\n * Only one worklet is allowed per `<model-viewer>` at a time. If a new worklet\n * script is appended to a `<model-viewer>` with a running worklet, a new\n * worklet will be created and the previous one will be terminated. If there\n * is more than one worklet script at HTML parse time, the last one in tree\n * order will be used.\n *\n * When a worklet is created, `<model-viewer>` will dispatch a 'worklet-created'\n * event. At the time that this event is dispatched, the worklet will be created\n * but the model is not guaranteed to have been made available to the worklet.\n */\nexport const SceneGraphMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<SceneGraphInterface>&T => {\n  class SceneGraphModelViewerElement extends ModelViewerElement {\n    @property({type: Object}) protected[$modelGraft]: ModelGraft|null = null;\n\n    protected[$childListMutationHandler] = (records: Array<MutationRecord>) =>\n        this[$onChildListMutation](records);\n\n    protected[$modelGraftMutationHandler] = (event: Event) =>\n        this[$onModelGraftMutation](event);\n\n    protected[$mutationObserver] =\n        new MutationObserver(this[$childListMutationHandler]);\n\n    protected[$executionContext]: ThreeDOMExecutionContext|null = null;\n\n    /**\n     * A reference to the active worklet if one exists, or else `null`. A\n     * worklet is not created until a scene graph worklet script has been\n     * detected as a child of this `<model-viewer>`.\n     */\n    get worklet() {\n      const executionContext = this[$executionContext];\n      return executionContext != null ? executionContext.worker : null;\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n\n      this[$mutationObserver].observe(this, {childList: true});\n\n      const script = this.querySelector<HTMLScriptElement>(\n          `script[type=\"${SCENE_GRAPH_SCRIPT_TYPE}\"]:last-of-type`);\n\n      if (script != null && script.textContent) {\n        this[$onScriptElementAdded](script);\n      }\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      this[$mutationObserver].disconnect();\n\n      if (this[$executionContext] != null) {\n        this[$executionContext]!.terminate();\n        this[$executionContext] = null;\n      }\n    }\n\n    updated(changedProperties: Map<string|symbol, unknown>): void {\n      super.updated(changedProperties);\n      if (changedProperties.has($modelGraft)) {\n        const oldModelGraft =\n            changedProperties.get($modelGraft) as ModelGraft | null;\n        if (oldModelGraft != null) {\n          oldModelGraft.removeEventListener(\n              'mutation', this[$modelGraftMutationHandler]);\n        }\n\n        const modelGraft = this[$modelGraft];\n\n        if (modelGraft != null) {\n          modelGraft.addEventListener(\n              'mutation', this[$modelGraftMutationHandler]);\n        }\n      }\n    }\n\n    [$onModelLoad](event: any) {\n      super[$onModelLoad](event);\n\n      this[$updateExecutionContextModel]();\n    }\n\n    [$onChildListMutation](records: Array<MutationRecord>) {\n      if (this.parentNode == null) {\n        // Ignore a lazily reported list of mutations if we are detached from\n        // the document...\n        return;\n      }\n\n      let lastScriptElement: HTMLScriptElement|null = null;\n\n      for (const record of records) {\n        for (const node of Array.from(record.addedNodes)) {\n          if (node instanceof HTMLScriptElement && node.textContent &&\n              node.getAttribute('type') === SCENE_GRAPH_SCRIPT_TYPE) {\n            lastScriptElement = node;\n          }\n        }\n      }\n\n      if (lastScriptElement != null) {\n        this[$onScriptElementAdded](lastScriptElement);\n      }\n    }\n\n    [$onScriptElementAdded](script: HTMLScriptElement) {\n      if (!script.textContent ||\n          script.getAttribute('type') !== SCENE_GRAPH_SCRIPT_TYPE) {\n        return;\n      }\n\n      const allowString = script.getAttribute('allow') || '';\n      const allowList =\n          allowString.split(';')\n              .map((fragment) => fragment.trim())\n              .filter<ThreeDOMCapability>(\n                  (capability): capability is ThreeDOMCapability =>\n                      VALID_CAPABILITIES.has(capability as ThreeDOMCapability));\n\n      this[$createExecutionContext](script.textContent, allowList);\n    }\n\n    [$createExecutionContext](\n        scriptSource: string, capabilities: Array<ThreeDOMCapability>) {\n      const executionContext = this[$executionContext];\n\n      if (executionContext != null) {\n        executionContext.terminate();\n      }\n\n      this[$executionContext] = new ThreeDOMExecutionContext(capabilities);\n      this[$executionContext]!.eval(scriptSource);\n\n      this.dispatchEvent(new CustomEvent(\n          'worklet-created', {detail: {worklet: this.worklet}}));\n\n      this[$updateExecutionContextModel]();\n    }\n\n    [$updateExecutionContextModel]() {\n      const executionContext = this[$executionContext];\n\n      if (executionContext == null || this.parentNode == null) {\n        // Ignore if we don't have a 3DOM script to run, or if we are currently\n        // detached from the document\n        return;\n      }\n\n      const scene = this[$scene];\n      const modelGraft: ModelGraft|null = this.loaded ?\n          // TODO: Use a proper GLTF artifact as cached by the loader for this:\n          new ModelGraft(scene.model.url || '', {\n            scene: scene as Scene,\n            scenes: [scene as Scene],\n            animations: [],\n            cameras: [],\n            parser: {} as unknown as GLTFParser,\n            asset: {},\n            userData: {}\n          }) :\n          null;\n\n      executionContext.changeModel(modelGraft);\n\n      this[$modelGraft] = modelGraft;\n    }\n\n    [$onModelGraftMutation](_event: Event) {\n      this[$needsRender]();\n    }\n  }\n\n  return SceneGraphModelViewerElement;\n};"]}