{"version":3,"file":"animation.js","sourceRoot":"","sources":["../../src/features/animation.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit-element';\n\nimport ModelViewerElementBase, {$needsRender, $onModelLoad, $scene, $tick, $updateSource} from '../model-viewer-base.js';\nimport {Constructor} from '../utilities.js';\n\nconst MILLISECONDS_PER_SECOND = 1000.0\n\nconst $changeAnimation = Symbol('changeAnimation');\nconst $paused = Symbol('paused');\n\nexport interface AnimationInterface {\n  autoplay: boolean;\n  animationName: string|void;\n  animationCrossfadeDuration: number;\n  readonly availableAnimations: Array<string>;\n  readonly paused: boolean;\n  currentTime: number;\n  pause(): void;\n  play(): void;\n}\n\nexport const AnimationMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<AnimationInterface>&T => {\n  class AnimationModelViewerElement extends ModelViewerElement {\n    @property({type: Boolean}) autoplay: boolean = false;\n    @property({type: String, attribute: 'animation-name'})\n    animationName: string|void = undefined;\n    @property({type: Number, attribute: 'animation-crossfade-duration'})\n    animationCrossfadeDuration: number = 300;\n\n    protected[$paused]: boolean = true;\n\n    /**\n     * Returns an array\n     */\n    get availableAnimations(): Array<string> {\n      if (this.loaded) {\n        return (this as any)[$scene].model.animationNames;\n      }\n\n      return [];\n    }\n\n    get paused(): boolean {\n      return this[$paused];\n    }\n\n    get currentTime(): number {\n      return (this as any)[$scene].model.animationTime;\n    }\n\n    set currentTime(value: number) {\n      (this as any)[$scene].model.animationTime = value;\n    }\n\n    pause() {\n      if (this[$paused]) {\n        return;\n      }\n\n      this[$paused] = true;\n      this.dispatchEvent(new CustomEvent('pause'));\n    }\n\n    play() {\n      if (this[$paused] && this.availableAnimations.length > 0) {\n        this[$paused] = false;\n\n        if (!(this as any)[$scene].model.hasActiveAnimation) {\n          this[$changeAnimation]();\n        }\n\n        this.dispatchEvent(new CustomEvent('play'));\n      }\n    }\n\n    [$onModelLoad]() {\n      this[$paused] = true;\n\n      if (this.autoplay) {\n        this[$changeAnimation]();\n        this.play();\n      }\n    }\n\n    [$tick](_time: number, delta: number) {\n      super[$tick](_time, delta);\n\n      if (this[$paused]) {\n        return;\n      }\n\n      const {model} = (this as any)[$scene];\n      model.updateAnimation(delta / MILLISECONDS_PER_SECOND);\n\n      this[$needsRender]();\n    }\n\n    updated(changedProperties: Map<string, any>) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('autoplay') && this.autoplay) {\n        this.play();\n      }\n\n      if (changedProperties.has('animationName')) {\n        this[$changeAnimation]();\n      }\n    }\n\n    async[$updateSource]() {\n      // If we are loading a new model, we need to stop the animation of\n      // the current one (if any is playing). Otherwise, we might lose\n      // the reference to the scene root and running actions start to\n      // throw exceptions and/or behave in unexpected ways:\n      (this as any)[$scene].model.stopAnimation();\n\n      return super[$updateSource]();\n    }\n\n    [$changeAnimation]() {\n      const {model} = (this as any)[$scene];\n\n      model.playAnimation(\n          this.animationName,\n          this.animationCrossfadeDuration / MILLISECONDS_PER_SECOND);\n\n      // If we are currently paused, we need to force a render so that\n      // the model updates to the first frame of the new animation\n      if (this[$paused]) {\n        model.updateAnimation(0);\n        this[$needsRender]();\n      }\n    }\n  }\n\n  return AnimationModelViewerElement;\n};\n"]}