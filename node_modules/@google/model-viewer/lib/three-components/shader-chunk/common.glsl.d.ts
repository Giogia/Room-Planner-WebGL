export declare const getDirectionChunk = "\nvec3 getDirection(vec2 uv, float face) {\n    uv = 2.0 * uv - 1.0;\n    vec3 direction = vec3(uv, 1.0);\n    if (face == 0.0) {\n      direction = direction.zyx;\n      direction.z *= -1.0;\n    } else if (face == 1.0) {\n      direction = direction.xzy;\n      direction.z *= -1.0;\n    } else if (face == 3.0) {\n      direction = direction.zyx;\n      direction.x *= -1.0;\n    } else if (face == 4.0) {\n      direction = direction.xzy;\n      direction.y *= -1.0;\n    } else if (face == 5.0) {\n      direction.xz *= -1.0;\n    }\n    return direction;\n}\n";
export declare const getFaceChunk = "\nfloat getFace(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    float face = -1.0;\n    if (absDirection.x > absDirection.z) {\n      if (absDirection.x > absDirection.y)\n        face = direction.x > 0.0 ? 0.0 : 3.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    } else {\n      if (absDirection.z > absDirection.y)\n        face = direction.z > 0.0 ? 2.0 : 5.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    }\n    return face;\n}\n";
export declare const getUVChunk = "\nvec2 getUV(vec3 direction, float face) {\n    vec2 uv;\n    if (face == 0.0) {\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\n    } else if (face == 1.0) {\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\n    } else if (face == 2.0) {\n      uv = direction.xy / abs(direction.z);\n    } else if (face == 3.0) {\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\n    } else if (face == 4.0) {\n      uv = direction.xz / abs(direction.y);\n    } else {\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\n    }\n    return 0.5 * (uv + 1.0);\n}\n";
export declare const encodings: {
    [x: number]: number;
};
export declare const texelIO: string;
