{"version":3,"file":"TextureUtils.js","sourceRoot":"","sources":["../../src/three-components/TextureUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Cache, DataTextureLoader, EventDispatcher, GammaEncoding, NearestFilter, RGBEEncoding, Texture, TextureLoader, WebGLRenderer, WebGLRenderTarget} from 'three';\n\nimport {RGBELoader} from 'three/examples/jsm/loaders/RGBELoader.js';\nimport {ProgressTracker} from '../utilities/progress-tracker.js';\n\nimport {PMREMGenerator} from './PMREMGenerator.js';\n\nexport interface EnvironmentMapAndSkybox {\n  environmentMap: WebGLRenderTarget;\n  skybox: WebGLRenderTarget|null;\n}\n\nexport interface EnvironmentGenerationConfig {\n  progressTracker?: ProgressTracker;\n}\n\n// Enable three's loader cache so we don't create redundant\n// Image objects to decode images fetched over the network.\nCache.enabled = true;\n\nconst HDR_FILE_RE = /\\.hdr$/;\nconst ldrLoader = new TextureLoader();\nconst hdrLoader = new RGBELoader();\n\nconst $environmentMapCache = Symbol('environmentMapCache');\nconst $generatedEnvironmentMap = Symbol('generatedEnvironmentMap');\nconst $PMREMGenerator = Symbol('PMREMGenerator');\n\nconst $addMetadata = Symbol('addMetadata');\nconst $loadEnvironmentMapFromUrl = Symbol('loadEnvironmentMapFromUrl');\nconst $loadGeneratedEnvironmentMap = Symbol('loadGeneratedEnvironmentMap');\n\n// Attach a `userData` object for arbitrary data on textures that\n// originate from TextureUtils, similar to Object3D's userData,\n// for help debugging, providing metadata for tests, and semantically\n// describe the type of texture within the context of this application.\nconst userData = {\n  url: null,\n  // 'Equirectangular', 'CubeUV', 'PMREM'\n  mapping: null,\n};\n\nexport default class TextureUtils extends EventDispatcher {\n  private renderer: WebGLRenderer;\n\n  private[$generatedEnvironmentMap]: WebGLRenderTarget|null = null;\n  private[$PMREMGenerator]: PMREMGenerator;\n\n  private[$environmentMapCache] = new Map<string, Promise<WebGLRenderTarget>>();\n\n  constructor(renderer: WebGLRenderer) {\n    super();\n    this.renderer = renderer;\n    this[$PMREMGenerator] = new PMREMGenerator(this.renderer);\n  }\n\n  async load(\n      url: string, progressCallback: (progress: number) => void = () => {}):\n      Promise<Texture> {\n    try {\n      const isHDR: boolean = HDR_FILE_RE.test(url);\n      const loader: DataTextureLoader = isHDR ? hdrLoader : ldrLoader;\n      const texture: Texture = await new Promise<Texture>(\n          (resolve, reject) => loader.load(\n              url, resolve, (event: {loaded: number, total: number}) => {\n                progressCallback(event.loaded / event.total * 0.9);\n              }, reject));\n\n      progressCallback(1.0);\n\n      this[$addMetadata](texture, url, 'Equirectangular');\n\n      if (isHDR) {\n        texture.encoding = RGBEEncoding;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.flipY = true;\n      } else {\n        texture.encoding = GammaEncoding;\n      }\n\n      return texture;\n\n    } finally {\n      if (progressCallback) {\n        progressCallback(1);\n      }\n    }\n  }\n\n  async loadEquirectAsCubeUV(\n      url: string, progressCallback: (progress: number) => void = () => {}):\n      Promise<WebGLRenderTarget> {\n    let equirect = null;\n\n    try {\n      equirect = await this.load(url, progressCallback);\n      const cubeUV = this[$PMREMGenerator].fromEquirectangular(equirect);\n      this[$addMetadata](cubeUV.texture, url, 'CubeUV');\n      return cubeUV;\n    } finally {\n      if (equirect != null) {\n        (equirect as any).dispose();\n      }\n    }\n  }\n\n  /**\n   * Returns a { skybox, environmentMap } object with the targets/textures\n   * accordingly. `skybox` is a WebGLRenderCubeTarget, and `environmentMap`\n   * is a Texture from a WebGLRenderCubeTarget.\n   */\n  async generateEnvironmentMapAndSkybox(\n      skyboxUrl: string|null = null, environmentMapUrl: string|null = null,\n      options: EnvironmentGenerationConfig = {}):\n      Promise<EnvironmentMapAndSkybox> {\n    const {progressTracker} = options;\n    const updateGenerationProgress =\n        progressTracker != null ? progressTracker.beginActivity() : () => {};\n\n    try {\n      let skyboxLoads: Promise<WebGLRenderTarget|null> = Promise.resolve(null);\n      let environmentMapLoads: Promise<WebGLRenderTarget>;\n\n      // If we have a skybox URL, attempt to load it as a cubemap\n      if (!!skyboxUrl) {\n        skyboxLoads =\n            this[$loadEnvironmentMapFromUrl](skyboxUrl, progressTracker);\n      }\n\n      if (!!environmentMapUrl) {\n        // We have an available environment map URL\n        environmentMapLoads = this[$loadEnvironmentMapFromUrl](\n            environmentMapUrl, progressTracker);\n      } else if (!!skyboxUrl) {\n        // Fallback to deriving the environment map from an available skybox\n        environmentMapLoads = skyboxLoads as Promise<WebGLRenderTarget>;\n      } else {\n        // Fallback to generating the environment map\n        environmentMapLoads = this[$loadGeneratedEnvironmentMap]();\n      }\n\n      let [environmentMap, skybox] =\n          await Promise.all([environmentMapLoads, skyboxLoads]);\n      this[$addMetadata](environmentMap.texture, environmentMapUrl, 'PMREM');\n      if (skybox != null) {\n        this[$addMetadata](skybox.texture, skyboxUrl, 'PMREM');\n      }\n\n      return {environmentMap, skybox};\n    } finally {\n      updateGenerationProgress(1.0);\n    }\n  }\n\n  private[$addMetadata](texture: Texture, url: string|null, mapping: string) {\n    (texture as any).userData = {\n      ...userData,\n      ...({\n        url: url,\n        mapping: mapping,\n      })\n    };\n  }\n\n  /**\n   * Loads a WebGLRenderTarget from a given URL. The render target in this\n   * case will be assumed to be used as an environment map.\n   */\n  private[$loadEnvironmentMapFromUrl](\n      url: string,\n      progressTracker?: ProgressTracker): Promise<WebGLRenderTarget> {\n    if (!this[$environmentMapCache].has(url)) {\n      const progressCallback =\n          progressTracker ? progressTracker.beginActivity() : () => {};\n      const environmentMapLoads =\n          this.loadEquirectAsCubeUV(url, progressCallback);\n\n      this[$environmentMapCache].set(url, environmentMapLoads);\n    }\n\n    return this[$environmentMapCache].get(url)!;\n  }\n\n  /**\n   * Loads a dynamically generated environment map.\n   */\n  private[$loadGeneratedEnvironmentMap](): Promise<WebGLRenderTarget> {\n    if (this[$generatedEnvironmentMap] == null) {\n      this[$generatedEnvironmentMap] = this[$PMREMGenerator].fromDefault();\n    }\n\n    return Promise.resolve(this[$generatedEnvironmentMap]!);\n  }\n\n  async dispose() {\n    const allTargetsLoad: Array<Promise<WebGLRenderTarget>> = [];\n\n    // NOTE(cdata): We would use for-of iteration on the maps here, but\n    // IE11 doesn't have the necessary iterator-returning methods. So,\n    // disposal of these render targets is kind of convoluted as a result.\n\n    this[$environmentMapCache].forEach((targetLoads) => {\n      allTargetsLoad.push(targetLoads);\n    });\n\n    this[$environmentMapCache].clear();\n\n    for (const targetLoads of allTargetsLoad) {\n      try {\n        const target = await targetLoads;\n        target.dispose();\n      } catch (e) {\n        // Suppress errors, so that all render targets will be disposed\n      }\n    }\n\n    if (this[$generatedEnvironmentMap] != null) {\n      this[$generatedEnvironmentMap]!.dispose();\n      this[$generatedEnvironmentMap] = null;\n    }\n  }\n}\n"]}