{"version":3,"file":"Reticle.js","sourceRoot":"","sources":["../../src/three-components/Reticle.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Camera, MathUtils, Matrix4, Mesh, MeshBasicMaterial, Object3D, RingGeometry, Vector3,} from 'three';\n\n/**\n * The Reticle class creates an object that repeatedly calls\n * `xrSession.requestHitTest()` to render a ring along a found\n * horizontal surface.\n */\nexport default class Reticle extends Object3D {\n  private ring: Mesh;\n  private camera: Camera;\n  private hitTestSource: XRHitTestSource|null = null;\n  private hitTestSourceRequest: Promise<void>|null = null;\n  private _hitMatrix: Matrix4|null = null;\n\n  /**\n   * @param {XRSession} xrSession\n   * @param {THREE.Camera} camera\n   */\n  constructor(camera: Camera) {\n    super();\n\n    this.name = 'Reticle';\n\n    let geometry = new RingGeometry(0.1, 0.11, 24, 1);\n    let material = new MeshBasicMaterial({color: 0xffffff});\n    // Orient the geometry so its position is flat on a horizontal surface\n    geometry.applyMatrix4(new Matrix4().makeRotationX(MathUtils.degToRad(-90)));\n\n    this.ring = new Mesh(geometry, material);\n\n    this.add(this.ring);\n\n    this.visible = false;\n    this.camera = camera;\n  }\n\n  get hitMatrix(): Matrix4|null {\n    return this._hitMatrix;\n  }\n\n  /**\n   * Fires a hit test in the middle of the screen and places the reticle\n   * upon the surface if found.\n   *\n   * @param {XRFRame} frame\n   * @param {XRFrameOfReference} frameOfRef\n   */\n  async update(\n      _session: XRSession, _frame: XRFrame,\n      _viewerReferenceSpace: XRReferenceSpace, _frameOfRef: XRReferenceSpace) {\n    if (!this.hitTestSourceRequest) {\n      this.hitTestSourceRequest =\n          _session.requestHitTestSource({space: _viewerReferenceSpace})\n              .then(hitTestSource => {\n                this.hitTestSource = hitTestSource;\n              });\n    } else if (this.hitTestSource) {\n      const hitTestResults = _frame.getHitTestResults(this.hitTestSource);\n      if (hitTestResults.length) {\n        const hit = hitTestResults[0];\n        this._hitMatrix =\n            new Matrix4().fromArray(hit.getPose(_frameOfRef)!.transform.matrix);\n\n        // Now apply the position from the hitMatrix onto our model\n        this.position.setFromMatrixPosition(this._hitMatrix);\n\n        // Rotate the anchor to face the camera\n        const targetPos =\n            new Vector3().setFromMatrixPosition(this.camera.matrixWorld);\n        const angle = Math.atan2(\n            targetPos.x - this.position.x, targetPos.z - this.position.z);\n        this.rotation.set(0, angle, 0);\n\n        this.visible = true;\n      } else {\n        this._hitMatrix = null;\n      }\n    } else {\n      this._hitMatrix = null;\n    }\n  }\n}\n"]}