{"version":3,"file":"ARRenderer.js","sourceRoot":"","sources":["../../src/three-components/ARRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {EventDispatcher, Matrix4, Object3D, PerspectiveCamera, Raycaster, Scene, Vector3, WebGLRenderer} from 'three';\nimport {assertIsArCandidate} from '../utilities.js';\nimport ModelScene from './ModelScene.js';\nimport {Renderer} from './Renderer.js';\nimport Reticle from './Reticle.js';\nimport {assertContext} from './WebGLUtils.js';\n\nconst $presentedScene = Symbol('presentedScene');\n\nconst $rafId = Symbol('rafId');\nconst $currentSession = Symbol('currentSession');\nconst $tick = Symbol('tick');\nconst $refSpace = Symbol('refSpace');\nconst $resolveCleanup = Symbol('resolveCleanup');\n\nconst $outputContext = Symbol('outputContext');\n\nconst $onWebXRFrame = Symbol('onWebXRFrame');\nconst $postSessionCleanup = Symbol('postSessionCleanup');\n\nconst matrix4 = new Matrix4();\nconst vector3 = new Vector3();\n\nexport class ARRenderer extends EventDispatcher {\n  public renderer: WebGLRenderer;\n  public parentRenderer: Renderer;\n  public inputContext: WebGLRenderingContext;\n\n  public camera: PerspectiveCamera = new PerspectiveCamera();\n  public scene: Scene = new Scene();\n  public dolly: Object3D = new Object3D();\n  public reticle: Reticle = new Reticle(this.camera);\n  public raycaster: Raycaster|null = null;\n\n  private[$outputContext]: WebGLRenderingContext|null = null;\n  private[$rafId]: number|null = null;\n  private[$currentSession]: XRSession|null = null;\n  private[$refSpace]: XRCoordinateSystem|null = null;\n  private[$presentedScene]: ModelScene|null = null;\n  private[$resolveCleanup]: ((...args: any[]) => void)|null = null;\n\n  constructor(parentRenderer: Renderer) {\n    super();\n    const inputContext: WebGLRenderingContext = parentRenderer.context!;\n\n    // The parentRenderer is a Renderer object which has-a ARRenderer. We need\n    // to save a reference so we can restore state once the AR session is done.\n    this.parentRenderer = parentRenderer;\n\n    // this.renderer is a three.js WebGLRenderer, it is shared with the parent\n    // Renderer.\n    this.renderer = parentRenderer.renderer;\n\n    this.inputContext = inputContext;\n\n    this.camera.matrixAutoUpdate = false;\n\n    this.scene.add(this.reticle);\n    this.scene.add(this.dolly);\n  }\n\n  initializeRenderer() {\n    this.renderer.setPixelRatio(1);\n  }\n\n  async resolveARSession(): Promise<XRSession> {\n    assertIsArCandidate();\n\n    const session: XRSession =\n        await navigator.xr!.requestSession!('immersive-ar');\n\n    const gl: WebGLRenderingContext = assertContext(this.renderer.getContext());\n\n    // `makeXRCompatible` replaced `setCompatibleXRDevice` in Chrome M73 @TODO\n    // #293, handle WebXR API changes. WARNING: this can cause a GL context\n    // loss according to the spec, though current implementations don't do so.\n    await gl.makeXRCompatible();\n    this[$outputContext] = gl;\n\n    session.updateRenderState(\n        {baseLayer: new XRWebGLLayer(session, gl, {alpha: true})});\n\n    // The render state update takes effect on the next animation frame. Wait\n    // for it so that we get a framebuffer.\n    let waitForAnimationFrame = new Promise((resolve, _reject) => {\n      session.requestAnimationFrame(() => resolve());\n    });\n    await waitForAnimationFrame;\n\n    // Redirect rendering to the WebXR offscreen framebuffer.\n    // TODO: this method should be added to three.js's exported interface.\n    (this.renderer as any)\n        .setFramebuffer(session.renderState.baseLayer!.framebuffer);\n    this.renderer.setSize(\n        session.renderState.baseLayer!.framebufferWidth,\n        session.renderState.baseLayer!.framebufferHeight,\n        false);\n\n    return session;\n  }\n\n  /**\n   * The currently presented scene, if any\n   */\n  get presentedScene() {\n    return this[$presentedScene];\n  }\n\n  /**\n   * Resolves to true if the renderer has detected all the necessary qualities\n   * to support presentation in AR.\n   */\n  async supportsPresentation() {\n    try {\n      assertIsArCandidate();\n      await navigator.xr!.supportsSession!('immersive-ar');\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Present a scene in AR\n   */\n  async present(scene: ModelScene): Promise<void> {\n    if (this.isPresenting) {\n      console.warn('Cannot present while a model is already presenting');\n    }\n\n    scene.model.scale.set(1, 1, 1);\n\n    this[$presentedScene] = scene;\n\n    this.initializeRenderer();\n\n    this[$currentSession] = await this.resolveARSession();\n    this[$currentSession]!.addEventListener('end', () => {\n      this[$postSessionCleanup]();\n    }, {once: true});\n\n    // `requestReferenceSpace` replaced `requestFrameOfReference` in Chrome M73\n    // @TODO #293, handle WebXR API changes\n    this[$refSpace] =\n        await (this[$currentSession]!.requestReferenceSpace('local') as any);\n\n    this[$tick]();\n  }\n\n  /**\n   * If currently presenting a scene in AR, stops presentation and exits AR.\n   */\n  async stopPresenting() {\n    if (!this.isPresenting) {\n      return;\n    }\n\n    const cleanupPromise = new Promise((resolve) => {\n      this[$resolveCleanup] = resolve;\n    });\n\n    try {\n      const session = this[$currentSession]!;\n      this[$currentSession] = null;\n      session.cancelAnimationFrame(this[$rafId]!);\n\n      await session.end();\n      await cleanupPromise;\n    } catch (error) {\n      console.warn('Error while trying to end AR session');\n      console.warn(error);\n\n      this[$postSessionCleanup]();\n    }\n  }\n\n  [$postSessionCleanup]() {\n    // The offscreen WebXR framebuffer is now invalid, switch\n    // back to the default framebuffer for canvas output.\n    // TODO: this method should be added to three.js's exported interface.\n    (this.renderer as any).setFramebuffer(null);\n\n    // Trigger a parent renderer update. TODO(klausw): are these all\n    // necessary and sufficient?\n    if (this[$presentedScene] != null) {\n      this.dolly.remove(this[$presentedScene]!);\n      this[$presentedScene]!.isDirty = true;\n    }\n    // The parentRenderer's render method automatically updates\n    // the device pixel ratio, but only updates the three.js renderer\n    // size if there's a size mismatch. Reset the size to force that\n    // to refresh.\n    this.parentRenderer.setRendererSize(1, 1);\n\n    this[$refSpace] = null;\n    this[$presentedScene] = null;\n\n    if (this[$resolveCleanup] != null) {\n      this[$resolveCleanup]!();\n    }\n  }\n\n  /**\n   * True if a scene is currently in the process of being presented in AR\n   */\n  get isPresenting(): boolean {\n    return this[$presentedScene] != null;\n  }\n\n  get outputContext() {\n    return this[$outputContext];\n  }\n\n  async placeModel() {\n    if (this[$currentSession] == null) {\n      return;\n    }\n\n    if (this.raycaster == null) {\n      this.raycaster = new Raycaster();\n    }\n\n    // NOTE: Currently rays will be cast from the middle of the screen.\n    // Eventually we might use input coordinates for this.\n    this.raycaster.setFromCamera({x: 0, y: 0}, this.camera);\n    const ray = this.raycaster.ray;\n    let xrray: XRRay =\n        new XRRay(ray.origin as DOMPointInit, ray.direction as DOMPointInit);\n\n    let hits;\n    try {\n      hits = await (this[$currentSession] as any)\n                 .requestHitTest(xrray, this[$refSpace]);\n    } catch (e) {\n      // Spec says this should no longer throw on invalid requests:\n      // https://github.com/immersive-web/hit-test/issues/24\n      // But in practice, it will still happen, so just ignore:\n      // https://github.com/immersive-web/hit-test/issues/37\n    }\n\n    if (hits && hits.length) {\n      const presentedScene = this[$presentedScene]!;\n      const hit = hits[0];\n      const hitMatrix = matrix4.fromArray(hit.hitMatrix);\n\n      this.dolly.position.setFromMatrixPosition(hitMatrix);\n\n      // Orient the dolly/model to face the camera\n      const camPosition = vector3.setFromMatrixPosition(this.camera.matrix);\n      this.dolly.lookAt(camPosition.x, this.dolly.position.y, camPosition.z);\n      this.dolly.rotateY(-presentedScene.pivot.rotation.y);\n\n      this.dolly.add(presentedScene);\n\n      this.dispatchEvent({type: 'modelmove'});\n    }\n  }\n\n  /**\n   * It appears that XRSession's `inputsourceschange` event is not implemented\n   * in Chrome Canary as of m72 for 'screen' inputs, which would be preferable\n   * since we only need an \"select\" event, rather than track a pose on every\n   * frame (like a 6DOF controller). Due to this bug, on every frame, check to\n   * see if an input exists.\n   * @see https://bugs.chromium.org/p/chromium/issues/detail?id=913703\n   * @see https://immersive-web.github.io/webxr/#xrinputsource-interface\n   */\n  processXRInput(frame: XRFrame) {\n    const {session} = frame;\n\n    // Get current input sources. For now, only 'screen' input is supported,\n    // which is only added to the session's active input sources immediately\n    // before `selectstart` and removed immediately after `selectend` event.\n    // If we have a 'screen' source here, it means the output canvas was tapped.\n    const sources = Array.from(session.inputSources)\n                        .filter(input => input.targetRayMode === 'screen');\n\n    if (sources.length === 0) {\n      return;\n    }\n\n    const pose =\n        (frame as any).getPose(sources[0].targetRaySpace, this[$refSpace])\n    if (pose) {\n      this.placeModel();\n    }\n  }\n\n  [$tick]() {\n    this[$rafId] = this[$currentSession]!.requestAnimationFrame(\n        (time, frame) => this[$onWebXRFrame](time, frame));\n  }\n\n  [$onWebXRFrame](_time: number, frame: XRFrame) {\n    const {session} = frame;\n\n    // `getViewerPose` replaced `getDevicePose` in Chrome M73\n    // @TODO #293, handle WebXR API changes\n    const pose = 'getDevicePose' in frame ?\n        (frame as any).getDevicePose(this[$refSpace]) :\n        (frame as any).getViewerPose(this[$refSpace]);\n\n    // TODO: Notify external observers of tick\n    // TODO: Note that reticle may be \"stabilized\"\n\n    this[$tick]();\n\n    if (pose == null) {\n      return;\n    }\n\n    for (const view of (frame as any).getViewerPose(this[$refSpace]).views) {\n      const viewport = session.renderState.baseLayer!.getViewport(view);\n      this.renderer.setViewport(\n          viewport.x, viewport.y, viewport.width, viewport.height);\n      this.camera.projectionMatrix.fromArray(view.projectionMatrix);\n      const viewMatrix = matrix4.fromArray(view.transform.inverse.matrix);\n\n      this.camera.matrix.getInverse(viewMatrix);\n      this.camera.updateMatrixWorld(true);\n\n      // NOTE: Updating input or the reticle is dependent on the camera's\n      // pose, hence updating these elements after camera update but\n      // before render.\n      this.reticle.update(this[$currentSession]!, this[$refSpace] as any);\n      this.processXRInput(frame);\n\n      // NOTE: Clearing depth caused issues on Samsung devices\n      // @see https://github.com/googlecodelabs/ar-with-webxr/issues/8\n      // this.renderer.clearDepth();\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n}\n"]}