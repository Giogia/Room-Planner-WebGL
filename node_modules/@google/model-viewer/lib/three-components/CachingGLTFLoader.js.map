{"version":3,"file":"CachingGLTFLoader.js","sourceRoot":"","sources":["../../src/three-components/CachingGLTFLoader.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Mesh, Object3D, Scene} from 'three';\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nimport {CacheEvictionPolicy} from '../utilities/cache-eviction-policy.js';\n\nimport {cloneGltf, Gltf} from './ModelUtils.js';\n\nexport type ProgressCallback = (progress: number) => void;\n\nexport const loadWithLoader =\n    (url: string,\n     loader: any,\n     progressCallback: ProgressCallback = () => {}) => {\n      const onProgress = (event: ProgressEvent) => {\n        progressCallback!(event.loaded / event.total);\n      };\n      return new Promise<Gltf>((resolve, reject) => {\n        loader.load(url, resolve, onProgress, reject);\n      });\n    };\n\nexport const $releaseFromCache = Symbol('releaseFromCache');\nexport interface CacheRetainedScene extends Scene {\n  [$releaseFromCache]: () => void;\n}\n\nconst cache = new Map<string, Promise<Gltf>>();\nconst preloaded = new Map<string, boolean>();\n\nexport const $evictionPolicy = Symbol('evictionPolicy');\n\nexport class CachingGLTFLoader {\n  static[$evictionPolicy]: CacheEvictionPolicy =\n      new CacheEvictionPolicy(CachingGLTFLoader);\n\n  static get cache() {\n    return cache;\n  }\n\n  /** @nocollapse */\n  static clearCache() {\n    cache.forEach((_value, url) => {\n      this.delete(url);\n    });\n    this[$evictionPolicy].reset();\n  }\n\n  static has(url: string) {\n    return cache.has(url);\n  }\n\n  /** @nocollapse */\n  static async delete(url: string) {\n    if (!this.has(url)) {\n      return;\n    }\n\n    const gltfLoads = cache.get(url);\n    preloaded.delete(url);\n    cache.delete(url);\n\n    const gltf = await gltfLoads;\n    // Dispose of the cached glTF's materials and geometries:\n    gltf!.scenes.forEach(scene => {\n      scene.traverse(object3D => {\n        if (!(object3D as Mesh).isMesh) {\n          return;\n        }\n        const mesh = object3D as Mesh;\n        const materials =\n            Array.isArray(mesh.material) ? mesh.material : [mesh.material];\n        materials.forEach(material => {\n          material.dispose();\n        });\n        mesh.geometry.dispose();\n      });\n    });\n  }\n\n  /**\n   * Returns true if the model that corresponds to the specified url is\n   * available in our local cache.\n   */\n  static hasFinishedLoading(url: string) {\n    return !!preloaded.get(url);\n  }\n\n  protected loader: GLTFLoader = new GLTFLoader();\n\n  protected get[$evictionPolicy](): CacheEvictionPolicy {\n    return (this.constructor as typeof CachingGLTFLoader)[$evictionPolicy];\n  }\n\n  /**\n   * Preloads a glTF, populating the cache. Returns a promise that resolves\n   * when the cache is populated.\n   */\n  async preload(url: string, progressCallback: ProgressCallback = () => {}) {\n    if (!cache.has(url)) {\n      cache.set(url, loadWithLoader(url, this.loader, (progress: number) => {\n                  progressCallback(progress * 0.9);\n                }));\n    }\n\n    await cache.get(url);\n\n    if (progressCallback) {\n      progressCallback(1.0);\n    }\n\n    preloaded.set(url, true);\n  }\n\n  /**\n   * Loads a glTF from the specified url and resolves a unique clone of the\n   * glTF. If the glTF has already been loaded, makes a clone of the cached\n   * copy.\n   */\n  async load(url: string, progressCallback: ProgressCallback = () => {}):\n      Promise<CacheRetainedScene|null> {\n    await this.preload(url, progressCallback);\n\n    const gltf = await cache.get(url)!;\n\n    if (gltf.scene != null) {\n      // Animations for objects without names target their UUID instead. When\n      // objects are cloned, they get new UUIDs which the animation can't find.\n      // To fix this, we assign their UUID as their name.\n      gltf.scene.traverse((node: Object3D) => {\n        if (!node.name) {\n          node.name = node.uuid;\n        }\n      });\n    }\n\n    const clone = cloneGltf(gltf);\n    const model = clone.scene ? clone.scene : null;\n\n    if (model != null) {\n      model.userData.animations = clone.animations;  // save animations\n\n      this[$evictionPolicy].retain(url);\n\n      (model as CacheRetainedScene)[$releaseFromCache] = (() => {\n        let released = false;\n        return () => {\n          if (released) {\n            return;\n          }\n\n          // We manually dispose cloned materials because Three.js keeps\n          // an internal count of materials using the same program, so it's\n          // safe to dispose of them incrementally. Geometry clones are not\n          // accounted for, so they cannot be disposed of incrementally.\n          model.traverse((object3D) => {\n            if (!(object3D as Mesh).isMesh) {\n              return;\n            }\n            const mesh = object3D as Mesh;\n            const materials =\n                Array.isArray(mesh.material) ? mesh.material : [mesh.material];\n            materials.forEach(material => {\n              material.dispose();\n            });\n          });\n\n          this[$evictionPolicy].release(url);\n          released = true;\n        };\n      })();\n    }\n\n    return model as CacheRetainedScene | null;\n  }\n}"]}