{"version":3,"file":"ARRenderer-spec.js","sourceRoot":"","sources":["../../../src/test/three-components/ARRenderer-spec.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAEH,OAAO,EAAS,OAAO,EAAE,OAAO,EAAC,MAAM,OAAO,CAAC;AAE/C,OAAO,EAAC,qBAAqB,EAAC,MAAM,oBAAoB,CAAC;AACzD,OAAO,sBAAsB,EAAE,EAAC,SAAS,EAAE,MAAM,EAAC,MAAM,4BAA4B,CAAC;AACrF,OAAO,EAAC,UAAU,EAAC,MAAM,sCAAsC,CAAC;AAEhE,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,YAAY,EAAC,MAAM,eAAe,CAAC;AAGlE,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAE3B,MAAM,kBAAkB,GACpB,CAAC,MAAc,EAAE,EAAE;IACjB,oDAAoD;IACpD,yDAAyD;IACzD,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE;SACnB,gBAAgB,CAAC,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC;SAC/C,QAAQ,CAAC,IAAI,OAAO,EAAE,CAAC,gBAAgB,CACpC,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAA;AAEL,MAAM,WAAW;IACf,YAAmB,OAAkB;QAAlB,YAAO,GAAP,OAAO,CAAW;IACrC,CAAC;IAED,sEAAsE;IACtE,OAAO,CAAC,QAAiB,EAAE,WAA6B;QACtD,OAAO,EAAY,CAAC;IACtB,CAAC;IAED,aAAa,CAAC,eAAkC,IACnC,OAAO,EAAkB,CAAA,CAAA,CAAC;IAEvC,iBAAiB,CAAC,gBAAiC;QACjD,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAED,cAAc,CAAC,MAAM,CAAC,sBAAsB,EAAE,sBAAsB,CAAC,CAAC;AAEtE,KAAK,CAAC,YAAY,EAAE,GAAG,EAAE;IACvB,IAAI,OAA+B,CAAC;IACpC,IAAI,UAAsB,CAAC;IAC3B,IAAI,SAAoB,CAAC;IAEzB,IAAI,YAAY,GAAyB,EAAE,CAAC;IAE5C,MAAM,eAAe,GAAG,CAAC,OAA6B,EAAE,EAAE;QACxD,YAAY,GAAG,OAAO,CAAC;IACzB,CAAC,CAAC;IAEF,MAAM,kBAAkB,GAAG,CAAC,UAAsB,EAAE,EAAE;QACpD,UAAU,CAAC,gBAAgB,GAAG,KAAK,IAAI,EAAE;YACvC,MAAM,WAAY,SAAQ,WAAW;gBAArC;;oBACS,gBAAW,GAAkB,EAAC,SAAS,EAAE,EAAa,EAC5C,CAAC;oBAEX,mBAAc,GACjB,IAAI,GAAG,EAAmB,CAAC;gBAqCjC,CAAC;gBAnCC,iBAAiB,CAAC,OAAY;gBAC9B,CAAC;gBAED,uBAAuB;oBACrB,OAAO,EAAE,CAAC;gBACZ,CAAC;gBAED,KAAK,CAAC,qBAAqB,CAAC,KAA2B;oBAErD,OAAO,EAAsB,CAAC;gBAChC,CAAC;gBAED,IAAI,YAAY;oBACd,OAAO,YAAY,CAAC;gBACtB,CAAC;gBAED,KAAK,CAAC,oBAAoB,CAAC,QAA8B;oBAEvD,MAAM,MAAM,GAAG,EAAC,MAAM,EAAE,GAAG,EAAE,GAAE,CAAC,EAAC,CAAC;oBAElC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;oBAEhC,OAAO,MAAM,CAAC;gBAChB,CAAC;gBAED,qBAAqB;oBACnB,OAAO,CAAC,CAAC;gBACX,CAAC;gBAED,oBAAoB;gBACpB,CAAC;gBAED,KAAK,CAAC,GAAG;oBACP,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7C,CAAC;aACF;YAED,SAAS,GAAG,IAAI,WAAW,EAAE,CAAC;YAC9B,OAAO,SAAS,CAAC;QACnB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,KAAK,CAAC,GAAG,EAAE;QACT,OAAO,GAAG,IAAI,sBAAsB,EAAE,CAAC;QACvC,UAAU,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,MAAM,UAAU,CAAC,cAAc,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,6DAA6D;IAC7D,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,CAAC,MAAM,UAAU,CAAC,oBAAoB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC7D,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACpC,IAAI,UAAsB,CAAC;QAE3B,IAAI,CAAC,qBAAqB,EAAE;YAC1B,OAAO;SACR;QAED,KAAK,CAAC,KAAK,IAAI,EAAE;YACf,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC,sBAAsB,CAAC,CAAC;YAChD,MAAM,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACpC,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;YAC7B,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC/B,eAAe,CAAC,EAAE,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;YAE/B,MAAM,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAErC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC9B,IAAI,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;gBACnD,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;gBAC/B,MAAM,kBAAkB,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBAE/C,MAAM,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBACrC,MAAM,UAAU,CAAC,cAAc,EAAE,CAAC;gBAElC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxD,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxD,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC5B,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;gBACzD,MAAM,OAAO,GAAG,MAAM,CAAC;gBACvB,MAAM,aAAa,GAAG,KAAK,CAAC;gBAC5B,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,aAAa,CAAC;gBAE5C,yDAAyD;gBACzD,8DAA8D;gBAC9D,4DAA4D;gBAC5D,kBAAkB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACtC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC5D,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAE1C,MAAM,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBACrC,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC;gBAE9B,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACpD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnD,iEAAiE;gBACjE,uEAAuE;gBACvE,kEAAkE;gBAClE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC1D,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;qBAC9B,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;gBAC3C,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;gBACzD,MAAM,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAErC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEnD,sDAAsD;gBACtD,0DAA0D;gBAC1D,kBAAkB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACtC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC5D,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAE1C,eAAe,CAAC,CAAC;wBACf,aAAa,EAAE,QAA2B;wBAC1C,UAAU,EAAE,EAAkB;wBAC9B,cAAc,EAAE,EAAa;wBAC7B,QAAQ,EAAE,EAAE;qBACb,CAAC,CAAC,CAAC;gBACJ,UAAU,CAAC,cAAc,CAAC,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gBACtD,MAAM,YAAY,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;gBAE5C,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACpD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAGnD,+CAA+C;gBAC/C,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC3D,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAC1C,eAAe,CAAC,EAAE,CAAC,CAAC;gBACpB,UAAU,CAAC,cAAc,CAAC,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gBACtD,MAAM,UAAU,EAAE,CAAC;gBAEnB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACpD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;gBACxD,kBAAkB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACtC,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAC1C,MAAM,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAErC,eAAe,CAAC,CAAC;wBACf,aAAa,EAAE,MAAyB;wBACxC,UAAU,EAAE,EAAkB;wBAC9B,cAAc,EAAE,EAAa;wBAC7B,QAAQ,EAAE,EAAE;qBACb,CAAC,CAAC,CAAC;gBACJ,UAAU,CAAC,cAAc,CAAC,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gBACtD,MAAM,UAAU,EAAE,CAAC;gBAEnB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;gBACxC,kBAAkB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBACtC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC5D,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAC1C,MAAM,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBACrC,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC;gBAE9B,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACpD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEnD,0BAA0B;gBAC1B,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CAChD,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBACvC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC3D,UAAU,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAC1C,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC;gBAE9B,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACpD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Camera, Matrix4, Vector3} from 'three';\n\nimport {IS_WEBXR_AR_CANDIDATE} from '../../constants.js';\nimport ModelViewerElementBase, {$renderer, $scene} from '../../model-viewer-base.js';\nimport {ARRenderer} from '../../three-components/ARRenderer.js';\nimport {ModelScene} from '../../three-components/ModelScene.js';\nimport {assetPath, timePasses, waitForEvent} from '../helpers.js';\n\n\nconst expect = chai.expect;\n\nconst applyPhoneRotation =\n    (camera: Camera) => {\n      // Rotate 180 degrees on Y (so it's not the default)\n      // and angle 45 degrees towards the ground, like a phone.\n      camera.matrix.identity()\n          .makeRotationAxis(new Vector3(0, 1, 0), Math.PI)\n          .multiply(new Matrix4().makeRotationAxis(\n              new Vector3(1, 0, 0), -Math.PI / 4));\n    }\n\nclass MockXRFrame implements XRFrame {\n  constructor(public session: XRSession) {\n  }\n\n  // We don't use nor test the returned XRPose other than its existence.\n  getPose(_xrSpace: XRSpace, _frameOfRef: XRReferenceSpace) {\n    return {} as XRPose;\n  }\n\n  getViewerPose(_referenceSpace?: XRReferenceSpace):\n  XRViewerPose{return {} as XRViewerPose}\n\n  getHitTestResults(_xrHitTestSource: XRHitTestSource) {\n    return [];\n  }\n}\n\ncustomElements.define('model-viewer-element', ModelViewerElementBase);\n\nsuite('ARRenderer', () => {\n  let element: ModelViewerElementBase;\n  let arRenderer: ARRenderer;\n  let xrSession: XRSession;\n\n  let inputSources: Array<XRInputSource> = [];\n\n  const setInputSources = (sources: Array<XRInputSource>) => {\n    inputSources = sources;\n  };\n\n  const stubWebXrInterface = (arRenderer: ARRenderer) => {\n    arRenderer.resolveARSession = async () => {\n      class FakeSession extends EventTarget implements XRSession {\n        public renderState: XRRenderState = {baseLayer: {} as XRLayer} as\n            XRRenderState;\n\n        public hitTestSources: Set<XRHitTestSource> =\n            new Set<XRHitTestSource>();\n\n        updateRenderState(_object: any) {\n        }\n\n        requestFrameOfReference() {\n          return {};\n        }\n\n        async requestReferenceSpace(_type: XRReferenceSpaceType):\n            Promise<XRReferenceSpace> {\n          return {} as XRReferenceSpace;\n        }\n\n        get inputSources(): Array<XRInputSource> {\n          return inputSources;\n        }\n\n        async requestHitTestSource(_options: XRHitTestOptionsInit):\n            Promise<XRHitTestSource> {\n          const result = {cancel: () => {}};\n\n          this.hitTestSources.add(result);\n\n          return result;\n        }\n\n        requestAnimationFrame() {\n          return 1;\n        }\n\n        cancelAnimationFrame() {\n        }\n\n        async end() {\n          this.dispatchEvent(new CustomEvent('end'));\n        }\n      }\n\n      xrSession = new FakeSession();\n      return xrSession;\n    };\n  };\n\n  setup(() => {\n    element = new ModelViewerElementBase();\n    arRenderer = new ARRenderer(element[$renderer]);\n  });\n\n  teardown(async () => {\n    await arRenderer.stopPresenting().catch(() => {});\n  });\n\n  // NOTE(cdata): It will be a notable day when this test fails\n  test('does not support presenting to AR on any browser', async () => {\n    expect(await arRenderer.supportsPresentation()).to.be.equal(false);\n  });\n\n  test('is not presenting if present has not been invoked', () => {\n    expect(arRenderer.isPresenting).to.be.equal(false);\n  });\n\n  suite('when presenting a scene', () => {\n    let modelScene: ModelScene;\n\n    if (!IS_WEBXR_AR_CANDIDATE) {\n      return;\n    }\n\n    setup(async () => {\n      element.src = assetPath('models/Astronaut.glb');\n      await waitForEvent(element, 'load');\n      modelScene = element[$scene];\n      stubWebXrInterface(arRenderer);\n      setInputSources([]);\n    });\n\n    test('presents the model at its natural scale', async () => {\n      const model = modelScene.model;\n\n      await arRenderer.present(modelScene);\n\n      expect(model.scale.x).to.be.equal(1);\n      expect(model.scale.y).to.be.equal(1);\n      expect(model.scale.z).to.be.equal(1);\n    });\n\n    suite('presentation ends', () => {\n      test('restores the original model scale', async () => {\n        const model = modelScene.model;\n        const originalModelScale = model.scale.clone();\n\n        await arRenderer.present(modelScene);\n        await arRenderer.stopPresenting();\n\n        expect(originalModelScale.x).to.be.equal(model.scale.x);\n        expect(originalModelScale.y).to.be.equal(model.scale.y);\n        expect(originalModelScale.z).to.be.equal(model.scale.z);\n      });\n    });\n\n    suite('placing a model', () => {\n      test('places the model oriented to the camera', async () => {\n        const epsilon = 0.0001;\n        const pivotRotation = 0.123;\n        modelScene.pivot.rotation.y = pivotRotation;\n\n        // Set camera to (10, 2, 0), rotated 180 degrees on Y (so\n        // our dolly will need to rotate to face camera) and angled 45\n        // degrees towards the ground, like someone holding a phone.\n        applyPhoneRotation(arRenderer.camera);\n        arRenderer.camera.matrix.setPosition(new Vector3(10, 2, 0));\n        arRenderer.camera.updateMatrixWorld(true);\n\n        await arRenderer.present(modelScene);\n        await arRenderer.placeModel();\n\n        expect(arRenderer.dolly.position.x).to.be.equal(10);\n        expect(arRenderer.dolly.position.y).to.be.equal(0);\n        expect(arRenderer.dolly.position.z).to.be.equal(2);\n        // Quaternion rotation results in the rotation towards the viewer\n        // with -X and -Z, and the offset applied to Y to invert pivotRotation,\n        // but it's inverted again here due to the -X/-Z rotation encoding\n        expect(arRenderer.dolly.rotation.x).to.be.equal(-Math.PI);\n        expect(arRenderer.dolly.rotation.y)\n            .to.be.closeTo(pivotRotation, epsilon);\n        expect(arRenderer.dolly.rotation.z).to.be.equal(-Math.PI);\n      });\n\n      test('when a screen-type XRInputSource exists', async () => {\n        await arRenderer.present(modelScene);\n\n        expect(arRenderer.dolly.position.x).to.be.equal(0);\n        expect(arRenderer.dolly.position.y).to.be.equal(0);\n        expect(arRenderer.dolly.position.z).to.be.equal(0);\n\n        // Set camera to (10, 2, 0), rotated 180 degrees on Y,\n        // and angled 45 degrees towards the ground, like a phone.\n        applyPhoneRotation(arRenderer.camera);\n        arRenderer.camera.matrix.setPosition(new Vector3(10, 2, 0));\n        arRenderer.camera.updateMatrixWorld(true);\n\n        setInputSources([{\n          targetRayMode: 'screen' as XRTargetRayMode,\n          handedness: '' as XRHandedness,\n          targetRaySpace: {} as XRSpace,\n          profiles: []\n        }]);\n        arRenderer.processXRInput(new MockXRFrame(xrSession));\n        await waitForEvent(arRenderer, 'modelmove');\n\n        expect(arRenderer.dolly.position.x).to.be.equal(10);\n        expect(arRenderer.dolly.position.y).to.be.equal(0);\n        expect(arRenderer.dolly.position.z).to.be.equal(2);\n\n\n        // Move the camera, ensure model hasn't changed\n        arRenderer.camera.matrix.setPosition(new Vector3(0, 1, 0));\n        arRenderer.camera.updateMatrixWorld(true);\n        setInputSources([]);\n        arRenderer.processXRInput(new MockXRFrame(xrSession));\n        await timePasses();\n\n        expect(arRenderer.dolly.position.x).to.be.equal(10);\n        expect(arRenderer.dolly.position.y).to.be.equal(0);\n        expect(arRenderer.dolly.position.z).to.be.equal(2);\n      });\n\n      test('ignores non-screen-type XRInputSources', async () => {\n        applyPhoneRotation(arRenderer.camera);\n        arRenderer.camera.updateMatrixWorld(true);\n        await arRenderer.present(modelScene);\n\n        setInputSources([{\n          targetRayMode: 'gaze' as XRTargetRayMode,\n          handedness: '' as XRHandedness,\n          targetRaySpace: {} as XRSpace,\n          profiles: []\n        }]);\n        arRenderer.processXRInput(new MockXRFrame(xrSession));\n        await timePasses();\n\n        expect(arRenderer.dolly.position.x).to.be.equal(0);\n        expect(arRenderer.dolly.position.y).to.be.equal(0);\n        expect(arRenderer.dolly.position.z).to.be.equal(0);\n      });\n\n      test('ignores when ray fails', async () => {\n        applyPhoneRotation(arRenderer.camera);\n        arRenderer.camera.matrix.setPosition(new Vector3(10, 2, 0));\n        arRenderer.camera.updateMatrixWorld(true);\n        await arRenderer.present(modelScene);\n        await arRenderer.placeModel();\n\n        expect(arRenderer.dolly.position.x).to.be.equal(10);\n        expect(arRenderer.dolly.position.y).to.be.equal(0);\n        expect(arRenderer.dolly.position.z).to.be.equal(2);\n\n        // Now point phone upwards\n        arRenderer.camera.matrix.identity().makeRotationAxis(\n            new Vector3(1, 0, 0), Math.PI / 2);\n        arRenderer.camera.matrix.setPosition(new Vector3(0, 2, 0));\n        arRenderer.camera.updateMatrixWorld(true);\n        await arRenderer.placeModel();\n\n        expect(arRenderer.dolly.position.x).to.be.equal(10);\n        expect(arRenderer.dolly.position.y).to.be.equal(0);\n        expect(arRenderer.dolly.position.z).to.be.equal(2);\n      });\n    });\n  });\n});\n"]}