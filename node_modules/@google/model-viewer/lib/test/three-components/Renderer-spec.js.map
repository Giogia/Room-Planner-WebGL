{"version":3,"file":"Renderer-spec.js","sourceRoot":"","sources":["../../../src/test/three-components/Renderer-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ModelViewerElementBase, {$canvas, $onResize, $renderer} from '../../model-viewer-base.js';\nimport {ModelScene} from '../../three-components/ModelScene.js';\nimport {Renderer} from '../../three-components/Renderer.js';\n\nconst expect = chai.expect;\n\nconst ModelViewerElement = class extends ModelViewerElementBase {\n  static get is() {\n    return 'model-viewer-renderer';\n  }\n};\n\ninterface TestScene {\n  renderCount?: number;\n}\n\ncustomElements.define('model-viewer-renderer', ModelViewerElement);\n\nfunction createScene(): ModelScene&TestScene {\n  const element = new ModelViewerElement();\n  const scene: ModelScene&TestScene = new ModelScene({\n    element: element,\n    canvas: element[$canvas],\n    width: 200,\n    height: 100,\n  });\n  scene.visible = true;\n\n  scene.renderCount = 0;\n  const drawImage = scene.context.drawImage;\n  scene.context.drawImage = (...args: any[]) => {\n    scene.renderCount!++;\n    (drawImage as any).call(scene.context, ...args);\n  };\n\n  element[$renderer].registerScene(scene);\n\n  return scene;\n}\n\nsuite('Renderer', () => {\n  let scene: ModelScene&TestScene;\n  const renderer = Renderer.singleton;\n\n  setup(() => {\n    scene = createScene();\n  });\n\n  teardown(() => {\n    renderer.unregisterScene(scene);\n  });\n\n  suite('render', () => {\n    let otherScene: ModelScene&TestScene;\n\n    setup(() => {\n      otherScene = createScene();\n    });\n\n    teardown(() => {\n      renderer.unregisterScene(otherScene);\n    });\n\n    test('renders only dirty scenes', async function() {\n      renderer.render(performance.now());\n      expect(scene.renderCount).to.be.equal(0);\n      expect(otherScene.renderCount).to.be.equal(0);\n\n      scene.isDirty = true;\n      renderer.render(performance.now());\n      expect(scene.renderCount).to.be.equal(1);\n      expect(otherScene.renderCount).to.be.equal(0);\n    });\n\n    test('marks scenes no longer dirty after rendering', async function() {\n      scene.isDirty = true;\n\n      renderer.render(performance.now());\n\n      expect(scene.renderCount).to.be.equal(1);\n      expect(!scene.isDirty).to.be.ok;\n\n      renderer.render(performance.now());\n      expect(scene.renderCount).to.be.equal(1);\n      expect(!scene.isDirty).to.be.ok;\n    });\n\n    test('does not render scenes marked as not visible', async function() {\n      scene.visible = false;\n      scene.isDirty = true;\n\n      renderer.render(performance.now());\n      expect(scene.renderCount).to.be.equal(0);\n      expect(scene.isDirty).to.be.ok;\n\n      scene.visible = true;\n\n      renderer.render(performance.now());\n      expect(scene.renderCount).to.be.equal(1);\n      expect(!scene.isDirty).to.be.ok;\n    });\n\n    suite('when resizing', () => {\n      let originalDpr: number;\n\n      setup(() => {\n        originalDpr = self.devicePixelRatio;\n      });\n\n      teardown(() => {\n        Object.defineProperty(self, 'devicePixelRatio', {value: originalDpr});\n      });\n\n      test('updates effective DPR', async () => {\n        const {element} = scene;\n        const initialDpr = renderer.threeRenderer.getPixelRatio();\n        const {width, height} = scene.getSize();\n\n        element[$onResize]({width, height});\n\n        Object.defineProperty(\n            self, 'devicePixelRatio', {value: initialDpr + 1});\n\n        await new Promise(resolve => requestAnimationFrame(resolve));\n\n        const newDpr = renderer.threeRenderer.getPixelRatio();\n\n        expect(newDpr).to.be.equal(initialDpr + 1);\n      });\n    });\n  });\n});\n"]}