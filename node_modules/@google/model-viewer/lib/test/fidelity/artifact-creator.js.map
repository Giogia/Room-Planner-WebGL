{"version":3,"file":"artifact-creator.js","sourceRoot":"","sources":["../../../src/test/fidelity/artifact-creator.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {promises: fs} = require('fs');\nconst puppeteer = require('puppeteer');\nconst path = require('path');\nconst {PNG} = require('pngjs');\nconst makeDir = require('make-dir');\n\nimport {ImageComparisonAnalysis, ImageComparator, ImageComparisonConfig, GoldenConfig, ScenarioConfig, Dimensions} from './common.js';\nimport {ConfigReader} from './config-reader.js';\n\nconst $configReader = Symbol('configReader');\n\nexport type AnalysisResults = Array<Array<ImageComparisonAnalysis>>;\n\nexport interface ScenarioRecord extends ScenarioConfig {\n  analysisResults: AnalysisResults;\n}\n\nexport class ArtifactCreator {\n  private[$configReader]: ConfigReader = new ConfigReader(this.config);\n\n  constructor(\n      protected config: ImageComparisonConfig, protected rootDirectory: string,\n      protected baseUrl: string) {\n    console.log('🌈 Preparing to capture screenshots for fidelity comparison');\n  }\n\n  protected get outputDirectory(): string {\n    return path.join(path.resolve(this.rootDirectory), 'results');\n  }\n\n  protected get goldens(): Array<GoldenConfig> {\n    return this.config.renderers.map(\n        renderer => ({...renderer, file: `${renderer.name}-golden.png`}));\n  }\n\n  async captureAndAnalyzeScreenshots(\n      scenarioWhitelist: Set<string>|null = null) {\n    const {scenarios, analysisThresholds} = this.config;\n    const analyzedScenarios: Array<ScenarioConfig> = [];\n    const {goldens, outputDirectory} = this;\n\n    for (const scenarioBase of scenarios) {\n      const scenarioName = scenarioBase.name;\n      const scenario = this[$configReader].scenarioConfig(scenarioName)!;\n      const {dimensions} = scenario;\n\n      if (scenarioWhitelist != null && !scenarioWhitelist.has(scenarioName)) {\n        continue;\n      }\n\n      console.log(`\\n🎨 Scenario: ${scenarioName}`);\n\n      const scenarioOutputDirectory = path.join(outputDirectory, scenarioName);\n\n      await makeDir(scenarioOutputDirectory);\n\n      const screenshot = await this.captureScreenshot(\n          'model-viewer',\n          scenarioName,\n          dimensions,\n          path.join(scenarioOutputDirectory, 'model-viewer.png'));\n      const analysisResults = await this.analyze(\n          screenshot, goldens, scenario, dimensions, analysisThresholds);\n\n      const scenarioRecord = Object.assign({analysisResults}, scenario);\n\n      console.log(`\\n💾 Recording analysis`);\n\n      await fs.writeFile(\n          path.join(outputDirectory, scenarioName, 'analysis.json'),\n          JSON.stringify(scenarioRecord));\n\n      analyzedScenarios.push(scenario);\n    }\n\n    console.log('💾 Recording configuration');\n\n    const finalConfig: ImageComparisonConfig =\n        Object.assign({}, this.config, {scenarios: analyzedScenarios});\n\n    await fs.writeFile(\n        path.join(outputDirectory, 'config.json'), JSON.stringify(finalConfig));\n\n    return scenarios;\n  }\n\n  protected async analyze(\n      screenshot: Buffer, goldens: Array<GoldenConfig>,\n      scenario: ScenarioConfig, dimensions: Dimensions,\n      analysisThresholds: Array<number>): Promise<AnalysisResults> {\n    const analysisResults: AnalysisResults = [];\n    const {rootDirectory, outputDirectory} = this;\n    const {name: scenarioName, exclude} = scenario;\n\n    for (const goldenConfig of goldens) {\n      const {name: rendererName} = goldenConfig;\n\n      if (exclude != null && exclude.includes(rendererName)) {\n        continue;\n      }\n\n      console.log(\n          `\\n🔍 Comparing <model-viewer> to ${goldenConfig.description}`);\n\n      const thresholdResults: Array<ImageComparisonAnalysis> = [];\n      const goldenPath =\n          path.join(rootDirectory, 'goldens', scenarioName, goldenConfig.file)\n      const golden = await fs.readFile(goldenPath);\n\n      const screenshotImage = PNG.sync.read(screenshot).data;\n      const goldenImage = PNG.sync.read(golden).data;\n\n      const comparator =\n          new ImageComparator(screenshotImage, goldenImage, dimensions);\n\n      await fs.writeFile(\n          path.join(outputDirectory, scenarioName, goldenConfig.file), golden);\n\n      for (const threshold of analysisThresholds) {\n        console.log(`\\n  📏 Using threshold ${threshold.toFixed(1)}`);\n        const {analysis} = comparator.analyze(threshold);\n        const {\n          matchingRatio,\n          averageDistanceRatio,\n          mismatchingAverageDistanceRatio\n        } = analysis;\n\n        thresholdResults.push(analysis);\n\n        console.log(\n            `  📊 Matching pixels: ${(matchingRatio * 100).toFixed(2)}%`);\n        console.log(`  📊 Mean color distance: ${\n            (averageDistanceRatio * 100).toFixed(2)}%`);\n        console.log(`  📊 Mean color distance (mismatching pixels only): ${\n            (mismatchingAverageDistanceRatio * 100).toFixed(2)}%`);\n      }\n\n      analysisResults.push(thresholdResults);\n    }\n\n    return analysisResults;\n  }\n\n  async captureScreenshot(\n      renderer: string, scenarioName: string, dimensions: Dimensions,\n      outputPath:\n          string = path.join(this.outputDirectory, 'model-viewer.png')) {\n    const devicePixelRatio = 2;\n    const scaledWidth = dimensions.width;\n    const scaledHeight = dimensions.height;\n    const rendererConfig = this[$configReader].rendererConfig(renderer);\n\n    if (rendererConfig == null) {\n      console.log(`⚠️ Renderer \"${\n          renderer}\" is not configured. Did you add it to the test config?`);\n      return;\n    }\n\n    console.log(`🚀 Launching browser`);\n\n    const browser = await puppeteer.launch({\n      defaultViewport: {\n        width: scaledWidth,\n        height: scaledHeight,\n        deviceScaleFactor: devicePixelRatio\n      },\n      headless: false\n    });\n\n    const page = await browser.newPage();\n    const url = `${this.baseUrl}?hide-ui&config=../../config.json&scenario=${\n        encodeURIComponent(scenarioName)}`;\n\n    page.on('error', (error: any) => {\n      console.log(`🚨 ${error}`);\n    });\n\n    page.on('console', async (message: any) => {\n      const args =\n          await Promise.all(message.args().map((arg: any) => arg.jsonValue()));\n\n      if (args.length) {\n        console.log(`➡️`, ...args);\n      }\n    });\n\n    console.log(`🗺  Navigating to ${url}`);\n\n    await page.goto(url);\n\n    console.log(\n        `🖌  Rendering ${scenarioName} with ${rendererConfig.description}`);\n\n    // NOTE: The function passed to page.evaluate is stringified and eval'd\n    // in a browser context. Importantly, this implies that no external\n    // variables are captured in its closure scope. TypeScript compiler\n    // currently has no mechanism to detect this and will happily tell you\n    // your code is correct when it isn't.\n    await page.evaluate(async () => {\n      const modelBecomesReady = (self as any).modelLoaded ?\n          Promise.resolve() :\n          new Promise((resolve, reject) => {\n            const timeout = setTimeout(reject, 60000);\n\n            self.addEventListener('model-ready', () => {\n              clearTimeout(timeout);\n              resolve();\n            }, {once: true});\n          });\n\n      await modelBecomesReady;\n    });\n\n    console.log(`🖼  Capturing screenshot`);\n\n    try {\n      await fs.mkdir(this.outputDirectory);\n    } catch (e) {\n      // Ignored...\n    }\n\n    const screenshot = await page.screenshot({path: outputPath});\n\n    await browser.close();\n\n    return screenshot;\n  }\n}\n"]}