{"version":3,"file":"image-comparison-worker.js","sourceRoot":"","sources":["../../../src/test/fidelity/image-comparison-worker.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CanvasesReadyMessage, ImageComparator, ImageComparisonMessage, ImagesAssignedMessage, OffscreenCanvas, ThresholdChangedMessage} from './common.js';\n\n\nclass ImageComparisonWorker {\n  protected analyzer: ImageComparator|null = null;\n  protected candidateCanvas: OffscreenCanvas|null = null;\n  protected candidateContext: CanvasRenderingContext2D|null = null;\n  protected goldenCanvas: OffscreenCanvas|null = null;\n  protected goldenContext: CanvasRenderingContext2D|null = null;\n  protected blackWhiteCanvas: OffscreenCanvas|null = null;\n  protected blackWhiteContext: CanvasRenderingContext2D|null = null;\n  protected deltaCanvas: OffscreenCanvas|null = null;\n  protected deltaContext: CanvasRenderingContext2D|null = null;\n\n  constructor() {\n    self.onmessage = (event: MessageEvent) => this.onGlobalMessage(event);\n  }\n\n  onMessage(event: MessageEvent, port: MessagePort): void {\n    const data = event.data as ImageComparisonMessage;\n\n    switch (data.type) {\n      case 'canvases-ready': {\n        const {candidateCanvas, goldenCanvas, blackWhiteCanvas, deltaCanvas} =\n            data as CanvasesReadyMessage;\n\n        this.candidateCanvas = candidateCanvas;\n        this.candidateContext = candidateCanvas.getContext('2d');\n        this.goldenCanvas = goldenCanvas;\n        this.goldenContext = goldenCanvas.getContext('2d');\n        this.blackWhiteCanvas = blackWhiteCanvas;\n        this.blackWhiteContext = blackWhiteCanvas.getContext('2d');\n        this.deltaCanvas = deltaCanvas;\n        this.deltaContext = deltaCanvas.getContext('2d');\n\n        break;\n      }\n\n      case 'images-assigned': {\n        const {candidateImageBuffer, goldenImageBuffer, dimensions} =\n            data as ImagesAssignedMessage;\n\n        if (this.candidateCanvas == null || this.goldenCanvas == null ||\n            this.blackWhiteCanvas == null || this.deltaCanvas == null) {\n          console.warn('Images assigned before canvases are available!');\n        }\n\n        this.candidateCanvas!.width = this.goldenCanvas!.width =\n            this.blackWhiteCanvas!.width = this.deltaCanvas!.width =\n                dimensions.width;\n        this.candidateCanvas!.height = this.goldenCanvas!.height =\n            this.blackWhiteCanvas!.height = this.deltaCanvas!.height =\n                dimensions.height;\n\n\n        const candidateArray = new Uint8ClampedArray(candidateImageBuffer);\n\n        const goldenArray = new Uint8ClampedArray(goldenImageBuffer);\n        const {width, height} = dimensions;\n\n        this.analyzer =\n            new ImageComparator(candidateArray, goldenArray, dimensions);\n\n        this.candidateContext!.putImageData(\n            new ImageData(candidateArray, width, height), 0, 0);\n\n        this.goldenContext!.putImageData(\n            new ImageData(goldenArray, width, height), 0, 0);\n\n        break;\n      }\n\n      case 'threshold-changed': {\n        const {threshold} = data as ThresholdChangedMessage;\n        const {analyzer} = this;\n\n        if (analyzer == null) {\n          console.warn(`Analyzer not created!`);\n          return;\n        }\n\n        const {width, height} = this.analyzer!.dimensions;\n        const result = analyzer.analyze(threshold, {generateVisuals: true});\n\n        this.blackWhiteContext!.putImageData(\n            new ImageData(\n                new Uint8ClampedArray(result.imageBuffers.blackWhite!),\n                width,\n                height),\n            0,\n            0);\n\n        this.deltaContext!.putImageData(\n            new ImageData(\n                new Uint8ClampedArray(result.imageBuffers.delta!),\n                width,\n                height),\n            0,\n            0);\n\n        port.postMessage({type: 'analysis-completed', result});\n        break;\n      }\n\n      default:\n        break;\n    }\n  }\n\n  onGlobalMessage(event: MessageEvent): void {\n    event.ports.forEach(\n        port => port.onmessage = (event) => this.onMessage(event, port));\n  }\n}\n\n(self as any).imageComparisonWorker = new ImageComparisonWorker();\n"]}