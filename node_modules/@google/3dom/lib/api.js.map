{"version":3,"file":"api.js","sourceRoot":"","sources":["../src/api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * IMPORTANT NOTE: 3DOM is an experimental / radioactive API. It is very likely\n * to change rapidly over time while we iterate on the design. Please try it out\n * but also keep in mind that things might break without much notice!\n */\n\n/**\n * The set of strings representing all potential capabilities that a 3DOM script\n * may have access to. Possible capabilities include:\n *\n *  - messaging: The ability to communicate between the 3DOM script and its host\n *    context via the Web Messaging API\n *  - fetch: The ability to perform network requests via the Fetch API\n *  - material-properties: The ability to manipulate the properties of materials\n *    found in a model's scene graph\n */\nexport declare type ThreeDOMCapability =\n    'messaging' | 'material-properties' | 'fetch';\n\n/**\n * All constructs in a 3DOM scene graph have a corresponding string name.\n * This is similar in spirit to the concept of a \"tag name\" in HTML, and exists\n * in support of looking up 3DOM elements by type.\n */\nexport declare interface ThreeDOMElementMap {\n  'model': Model;\n  'material': Material;\n  'pbr-metallic-roughness': PBRMetallicRoughness;\n}\n\n/**\n * The global scope of a 3DOM script is similar to that of a Web Worker.\n * It features a subset of familiar browser-like APIs, as well as references\n * to 3DOM-specific constructs.\n *\n * @see https://html.spec.whatwg.org/multipage/workers.html#the-global-scope\n */\nexport declare interface ThreeDOMGlobalScope extends Worker {\n  /**\n   * A reference to the most recently loaded model, if one is available.\n   */\n  model?: Model;\n\n  /**\n   * A mechanism for performing network operations. Note that this method may\n   * not be functional unless the corresponding capability is enabled.\n   *\n   * @see https://fetch.spec.whatwg.org/#fetch-method\n   */\n  fetch(input: RequestInfo, init: RequestInit): Promise<Response>;\n\n  addEventListener<K extends keyof ThreeDOMEventMap>(\n      type: K,\n      listener:\n          (this: ThreeDOMGlobalScope, event: ThreeDOMEventMap[K]) => unknown,\n      options?: boolean|AddEventListenerOptions): void;\n  addEventListener(\n      type: string, listener: EventListenerOrEventListenerObject,\n      options?: boolean|AddEventListenerOptions): void;\n\n  removeEventListener<K extends keyof ThreeDOMEventMap>(\n      type: K,\n      listener: (this: ThreeDOMGlobalScope, ev: ThreeDOMEventMap[K]) => unknown,\n      options?: boolean|EventListenerOptions): void;\n  removeEventListener(\n      type: string, listener: EventListenerOrEventListenerObject,\n      options?: boolean|EventListenerOptions): void;\n\n  /**\n   * A reference to Model constructor. Supports instanceof checks; this class is\n   * not directly constructable.\n   */\n  Model: Constructor<Model>;\n\n  /**\n   * A reference to Material constructor. Supports instanceof checks; this class\n   * is not directly constructable.\n   */\n  Material: Constructor<Material>;\n\n  /**\n   * A reference to PBRMetallicRoughness constructor. Supports instanceof\n   * checks; this class is not directly constructable.\n   */\n  PBRMetallicRoughness: Constructor<PBRMetallicRoughness>;\n}\n\n/**\n * All events have a corresponding type string that can be used when adding\n * listeners for them.\n */\nexport declare interface ThreeDOMEventMap {\n  'model-change': ModelChangeEvent;\n}\n\n/**\n * A basic element in the 3DOM domain.\n */\nexport declare interface ThreeDOMElement {\n  /**\n   * A 3DOM element always has a reference to its Model of provenance unless it\n   * is the root of the scene graph (implictly the Model).\n   */\n  readonly ownerModel?: Model;\n}\n\n/**\n * The ModelChangeEvent is dispatched globally whenever a model has loaded and\n * been assigned to the global model property.\n */\nexport declare interface ModelChangeEvent extends Event {\n  /**\n   * A reference to the most recently assigned global model\n   */\n  model: Model;\n\n  /**\n   * A reference to the most recently replaced global model. Note that this\n   * model is no longer active and may no longer be mutated.\n   */\n  previousModel?: Model;\n}\n\n/**\n * A Model is the root element of a 3DOM scene graph. It gives scripts access\n * to the sub-elements found without the graph.\n */\nexport declare interface Model extends ThreeDOMElement {\n  /**\n   * An ordered set of unique Materials found in this model. The Materials are\n   * listed in scene graph traversal order.\n   */\n  readonly materials: Readonly<Material[]>;\n}\n\n/**\n * A Material gives the script access to modify a single, unique material found\n * in a model's scene graph.\n *\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-material\n */\nexport declare interface Material extends ThreeDOMElement {\n  /**\n   * The name of the material, if any.\n   */\n  readonly name?: string;\n\n  /**\n   * The PBRMetallicRoughness configuration of the material.\n   */\n  readonly pbrMetallicRoughness: PBRMetallicRoughness;\n}\n\n/**\n * The PBRMetallicRoughness encodes the PBR properties of a material\n *\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-pbrmetallicroughness\n */\nexport declare interface PBRMetallicRoughness extends ThreeDOMElement {\n  /**\n   * The base color factor of the material, represented as RGBA values\n   */\n  readonly baseColorFactor: Readonly<RGBA>;\n\n  /**\n   * Changes the base color factor of the material to the given value.\n   * Requires the 'material-properties' capability to be enabled.\n   */\n  setBaseColorFactor(rgba: RGBA): Promise<void>;\n}\n\n/**\n * A constructor is the class or function that produces an object of a given\n * type when invoked with `new`.\n */\nexport declare type Constructor<T = object> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): T; prototype: T;\n};\n\nexport declare type ConstructedWithArguments<T extends unknown[] = unknown[]> =\n    {\n      new (...args: T): unknown;\n    };\n\n/**\n * An RGBA-encoded color, with channels represented as floating point values\n * from [0,1].\n */\nexport declare type RGBA = [number, number, number, number];\n"]}