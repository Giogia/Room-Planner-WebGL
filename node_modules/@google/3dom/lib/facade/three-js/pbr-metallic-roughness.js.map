{"version":3,"file":"pbr-metallic-roughness.js","sourceRoot":"","sources":["../../../src/facade/three-js/pbr-metallic-roughness.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AASH,OAAO,EAAC,cAAc,EAAE,eAAe,EAAC,MAAM,wBAAwB,CAAC;AAEvE,MAAM,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAE/C;;;GAGG;AACH,MAAM,OAAO,oBAAqB,SAAQ,eAAe;IACvD,IAAa,CAAC,cAAc,CAAC;QAC3B,OAAO,IAAI,CAAC,cAAc,CAAyB,CAAC;IACtD,CAAC;IAED,YAAY,KAAiB,EAAE,QAAkB;QAC/C,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACzB,CAAC;IAED,IAAI,eAAe;QACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;QACtC,IAAI,QAAQ,CAAC,KAAK,EAAE;YAClB,OAAO,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,QAAQ,CAAC,OAAO,CAAS,CAAC;SAChE;aAAM;YACL,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SACrB;IACH,CAAC;IAED,IAAI,eAAe,CAAC,KAAW;QAC7B,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM;QACJ,MAAM,UAAU,GAA4C,KAAK,CAAC,MAAM,EAAE,CAAC;QAC3E,UAAU,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAClD,OAAO,UAA4C,CAAC;IACtD,CAAC;CACF","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Material} from 'three';\nimport {MeshStandardMaterial} from 'three';\n\nimport {RGBA} from '../../api.js';\nimport {SerializedPBRMetallicRoughness} from '../../protocol.js';\nimport {ModelGraft} from './model-graft.js';\n\nimport {$relatedObject, ThreeDOMElement} from './three-dom-element.js';\n\nconst $threeMaterial = Symbol('threeMaterial');\n\n/**\n * GraftPBRMetallicRoughness\n * @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#pbrmetallicroughness\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement {\n  protected get[$threeMaterial](): MeshStandardMaterial {\n    return this[$relatedObject] as MeshStandardMaterial;\n  }\n\n  constructor(graft: ModelGraft, material: Material) {\n    super(graft, material);\n  }\n\n  get baseColorFactor(): RGBA {\n    const material = this[$threeMaterial];\n    if (material.color) {\n      return [...material.color.toArray(), material.opacity] as RGBA;\n    } else {\n      return [1, 1, 1, 1];\n    }\n  }\n\n  set baseColorFactor(value: RGBA) {\n    this[$threeMaterial].color.fromArray(value);\n    this[$threeMaterial].opacity = value[3];\n  }\n\n  toJSON(): SerializedPBRMetallicRoughness {\n    const serialized: Partial<SerializedPBRMetallicRoughness> = super.toJSON();\n    serialized.baseColorFactor = this.baseColorFactor;\n    return serialized as SerializedPBRMetallicRoughness;\n  }\n}\n"]}