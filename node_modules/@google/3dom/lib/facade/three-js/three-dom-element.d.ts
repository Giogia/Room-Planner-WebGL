import { Material, Object3D } from 'three';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { SerializedThreeDOMElement } from '../../protocol.js';
import { ModelGraft } from './model-graft.js';
export declare const $relatedObject: unique symbol;
export declare const $type: unique symbol;
declare const $graft: unique symbol;
declare const $id: unique symbol;
/**
 * A SerializableThreeDOMElement is the common primitive of all scene graph
 * elements that have been facaded in the host execution context. It adds
 * a common interface to these elements in support of convenient
 * serializability.
 */
export declare class ThreeDOMElement {
    protected [$graft]: ModelGraft;
    protected [$relatedObject]: Object3D | Material | GLTF;
    protected [$id]: number;
    constructor(graft: ModelGraft, relatedObject: Object3D | Material | GLTF);
    /**
     * The Model of provenance for this scene graph element.
     */
    get ownerModel(): import("./model.js").Model;
    /**
     * The unique ID that marks this element. In generally, an ID should only be
     * considered unique to the element in the context of its scene graph. These
     * IDs are not guaranteed to be stable across script executions.
     */
    get internalID(): number;
    /**
     * Some (but not all) scene graph elements may have an optional name. The
     * Object3D.prototype.name property is sometimes auto-generated by Three.js.
     * We only want to expose a name that is set in the source glTF, so Three.js
     * generated names are ignored.
     */
    get name(): any;
    /**
     * The backing Three.js scene graph construct for this element.
     */
    get relatedObject(): Object3D | Material | GLTF;
    toJSON(): SerializedThreeDOMElement;
}
export {};
