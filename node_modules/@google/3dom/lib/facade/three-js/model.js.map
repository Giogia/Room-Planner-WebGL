{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../src/facade/three-js/model.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;AAQH,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAC,eAAe,EAAC,MAAM,wBAAwB,CAAC;AAGvD,MAAM,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AACrC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AAEvC;;;;GAIG;AACH,MAAM,OAAO,KAAM,SAAQ,eAAe;IAKxC,YAAY,KAAiB,EAAE,QAAgB,EAAE,IAAU;QACzD,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QALZ,QAAW,GAAG,EAAE,CAAC;QACjB,QAAY,GAAoB,EAAE,CAAC;QAM1C,IAAI,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;QAEnB,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;QAEnC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC/B,MAAM,SAAS,GAAG,QAAqB,CAAC;YACxC,IAAI,aAAa,GAAyB,EAAE,CAAC;YAE7C,IAAI,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,QAAQ,IAAI,IAAI,EAAE;gBAClD,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC/C,SAAS,CAAC,QAAQ,CAAC,CAAC;oBACpB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;aAC1B;YAED,KAAK,MAAM,QAAQ,IAAI,aAAa,EAAE;gBACpC,IAAI,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;oBAClC,SAAS;iBACV;gBAED,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACrD,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;aAChC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1B,CAAC;IAED,MAAM;QACJ,MAAM,UAAU,GAA6B,KAAK,CAAC,MAAM,EAAE,CAAC;QAE5D,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;QACtC,UAAU,CAAC,SAAS;YAChB,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAE1D,OAAO,UAA6B,CAAC;IACvC,CAAC;CACF;KArDW,SAAS,OACT,UAAU","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Material as ThreeMaterial} from 'three';\nimport {Mesh as ThreeMesh} from 'three';\nimport {GLTF} from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nimport {SerializedModel} from '../../protocol.js';\n\nimport {Material} from './material.js';\nimport {ModelGraft} from './model-graft.js';\nimport {ThreeDOMElement} from './three-dom-element.js';\n\n\nconst $modelUri = Symbol('modelUri');\nconst $gltf = Symbol('gltf');\nconst $materials = Symbol('materials');\n\n/**\n * A Model facades the top-level GLTF object returned by Three.js' GLTFLoader.\n * Currently, the model only bothers itself with the materials in the Three.js\n * scene graph.\n */\nexport class Model extends ThreeDOMElement {\n  protected[$modelUri] = '';\n  protected[$materials]: Array<Material> = [];\n  protected[$gltf]: GLTF;\n\n  constructor(graft: ModelGraft, modelUri: string, gltf: GLTF) {\n    super(graft, gltf);\n\n    this[$modelUri] = modelUri;\n    this[$gltf] = gltf;\n\n    const visitedMaterials = new Set();\n\n    gltf.scene.traverse((object3D) => {\n      const maybeMesh = object3D as ThreeMesh;\n      let meshMaterials: Array<ThreeMaterial> = [];\n\n      if (maybeMesh.isMesh && maybeMesh.material != null) {\n        meshMaterials = Array.isArray(maybeMesh.material) ?\n            maybeMesh.material :\n            [maybeMesh.material];\n      }\n\n      for (const material of meshMaterials) {\n        if (visitedMaterials.has(material)) {\n          continue;\n        }\n\n        this[$materials].push(new Material(graft, material));\n        visitedMaterials.add(material);\n      }\n    });\n  }\n\n  /**\n   * A flat list of all unique materials found in this scene graph. Materials\n   * are listed in the order they appear during pre-order, depth-first traveral\n   * of the scene graph.\n   *\n   * TODO(#1003): How do we handle non-active scenes?\n   */\n  get materials() {\n    return this[$materials];\n  }\n\n  toJSON(): SerializedModel {\n    const serialized: Partial<SerializedModel> = super.toJSON();\n\n    serialized.modelUri = this[$modelUri];\n    serialized.materials =\n        this[$materials].map((material) => material.toJSON());\n\n    return serialized as SerializedModel;\n  }\n}\n"]}