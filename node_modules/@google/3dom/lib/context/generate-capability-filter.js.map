{"version":3,"file":"generate-capability-filter.js","sourceRoot":"","sources":["../../src/context/generate-capability-filter.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAIH;;;;GAIG;AACH,SAAS,wBAAwB;IAC/B,MAAM,YAAY,GAAG,8CAA8C,CAAC;IAEpE,MAAM,CAAC,cAAc,CACjB,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,oBAAoB,EAAE;QACzD,KAAK,EAAE,GAAG,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;QAChC,CAAC;QACD,YAAY,EAAE,KAAK;QACnB,QAAQ,EAAE,KAAK;KAChB,CAAC,CAAC;AACT,CAAC;AAED;;;;;;GAMG;AACH,SAAS,eAAe;IACtB,MAAM,YAAY,GAAG,oCAAoC,CAAC;IAC1D,MAAM,gBAAgB,GAAG,GAAG,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;IAChC,CAAC,CAAC;IACF,MAAM,wBAAwB,GAAG,IAAI,CAAC,gBAAgB,CAAC;IAEvD,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE;QAC5B,WAAW,EAAE,EAAC,KAAK,EAAE,gBAAgB,EAAE,YAAY,EAAE,KAAK,EAAC;QAC3D,cAAc,EAAE,EAAC,KAAK,EAAE,gBAAgB,EAAE,YAAY,EAAE,KAAK,EAAC;QAC9D,YAAY,EAAE,EAAC,KAAK,EAAE,gBAAgB,EAAE,YAAY,EAAE,KAAK,EAAC;QAC5D,SAAS,EAAE;YACT,GAAG;gBACD,gBAAgB,EAAE,CAAC;YACrB,CAAC;YACD,YAAY,EAAE,KAAK;SACpB;QACD,gBAAgB,EAAE;YAChB,KAAK,EAAE,UACH,IAAY,EACZ,QAA4C,EAC5C,OAAyC;gBAC3C,IAAI,IAAI,KAAK,SAAS,EAAE;oBACtB,gBAAgB,EAAE,CAAC;iBACpB;gBACD,wBAAwB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC/D,CAAC;YACD,YAAY,EAAE,KAAK;SACpB;KACF,CAAC,CAAC;AACL,CAAC;AAED;;;GAGG;AACH,SAAS,WAAW;IAClB,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE;QAC5B,KAAK,EAAE;YACL,KAAK,EAAE,GAAG,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;YACpD,CAAC;YACD,YAAY,EAAE,KAAK;SACpB;KACF,CAAC,CAAC;AACL,CAAC;AAMD,MAAM,mBAAmB,GAAwB;IAC/C,WAAW,EAAE,eAAe;IAC5B,qBAAqB,EAAE,wBAAwB;IAC/C,OAAO,EAAE,WAAW;CACrB,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,wBAAwB,GACjC,CAAC,YAAiD,EAAU,EAAE;IAC5D,MAAM,cAAc,GAChB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAA8B,CAAC;IAElE,MAAM,iBAAiB,GAAkB,EAAE,CAAC;IAE5C,KAAK,MAAM,UAAU,IAAI,cAAc,EAAE;QACvC,4DAA4D;QAC5D,IAAI,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;YACzC,SAAS;SACV;QAED,MAAM,MAAM,GAAG,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAC/C,iBAAiB,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;KAC9D;IAED,OAAO,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACtC,CAAC,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ThreeDOMCapability, ThreeDOMGlobalScope} from '../api.js';\n\n/**\n * Given a 3DOM execution context, patch any methods that give write access\n * to otherwise configurable material properties so that they are automatically\n * rejected when invoked.\n */\nfunction filterMaterialProperties(this: ThreeDOMGlobalScope) {\n  const errorMessage = 'Capability \"material-properties\" not allowed';\n\n  Object.defineProperty(\n      this.PBRMetallicRoughness.prototype, 'setBaseColorFactor', {\n        value: () => {\n          throw new Error(errorMessage);\n        },\n        configurable: false,\n        writable: false\n      });\n}\n\n/**\n * Given a 3DOM execution context, patch any methods, classes or other APIs\n * related to Web Messaging so that they throw or are otherwise rendered\n * impotent.\n *\n * TODO(#1001): We probably need to crawl up the prototype chain on this one\n */\nfunction filterMessaging(this: ThreeDOMGlobalScope) {\n  const errorMessage = 'Capability \"messaging\" not allowed';\n  const rejectInvocation = () => {\n    throw new Error(errorMessage);\n  };\n  const originalAddEventListener = this.addEventListener;\n\n  Object.defineProperties(this, {\n    postMessage: {value: rejectInvocation, configurable: false},\n    MessageChannel: {value: rejectInvocation, configurable: false},\n    MessageEvent: {value: rejectInvocation, configurable: false},\n    onmessage: {\n      set() {\n        rejectInvocation();\n      },\n      configurable: false,\n    },\n    addEventListener: {\n      value: function(\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean|AddEventListenerOptions) {\n        if (type === 'message') {\n          rejectInvocation();\n        }\n        originalAddEventListener.call(this, type, listener, options);\n      },\n      configurable: false\n    }\n  });\n}\n\n/**\n * Given a 3DOM execution context, patch the global Fetch API so that any\n * attempts to perform network operations are immediately rejected.\n */\nfunction filterFetch(this: ThreeDOMGlobalScope) {\n  Object.defineProperties(this, {\n    fetch: {\n      value: () => {\n        throw new Error('Capability \"fetch\" not allowed');\n      },\n      configurable: false\n    }\n  });\n}\n\ntype CapabilityFilterMap = {\n  [K in ThreeDOMCapability]: Function\n};\n\nconst capabilityFilterMap: CapabilityFilterMap = {\n  'messaging': filterMessaging,\n  'material-properties': filterMaterialProperties,\n  'fetch': filterFetch\n};\n\n/**\n * Given a list of 3DOM capability strings, this factory produces a script\n * fragment that patches the global execution context so that any omitted\n * capabilities are explicitly disallowed.\n */\nexport const generateCapabilityFilter =\n    (capabilities: Readonly<Array<ThreeDOMCapability>>): string => {\n      const filtersToApply =\n          Object.keys(capabilityFilterMap) as Array<ThreeDOMCapability>;\n\n      const capabilityFilters: Array<string> = [];\n\n      for (const capability of filtersToApply) {\n        // Skip filters that are allowed by the list of capabilities\n        if (capabilities.indexOf(capability) > -1) {\n          continue;\n        }\n\n        const filter = capabilityFilterMap[capability];\n        capabilityFilters.push(`(${filter.toString()}).call(self);`);\n      }\n\n      return capabilityFilters.join('\\n');\n    };\n"]}