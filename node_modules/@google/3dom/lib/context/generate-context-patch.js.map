{"version":3,"file":"generate-context-patch.js","sourceRoot":"","sources":["../../src/context/generate-context-patch.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAIH;;;;;;GAMG;AACH,SAAS,YAAY,CAAC,OAAW,EAAE,SAAqC;IACtE,sEAAsE;IACtE,gEAAgE;IAChE,OAAO,OAAO,IAAI,OAAO,CAAC,WAAW,KAAK,WAAW,EAAE;QACrD,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACvD,iDAAiD;YACjD,IAAI,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;gBACtE,wBAAwB;gBACxB,OAAO;aACR;YAED,IAAI;gBACF,OAAQ,OAAsC,CAAC,QAAQ,CAAC,CAAC;aAC1D;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACjB;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;KAC1C;AACH,CAAC;AAED;;;;;;;;;GASG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,SAAqC,EAAE,EAAE,CAC1E,IAAI,YAAY,CAAC,QAAQ,EAAE,WAAW,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ALLOWLISTED_GLOBALS} from './allowlist.js';\n\n/**\n * Adapted from WorkerDOM\n * NOTE: The context could also be DedicatedWorkerGlobalScope, but the\n * TypeScript WebWorker lib seems to conflict with the dom lib\n *\n * @see https://github.com/ampproject/worker-dom/blob/master/src/worker-thread/index.amp.ts\n */\nfunction patchContext(context: {}, allowList: typeof ALLOWLISTED_GLOBALS) {\n  // Crawl up the prototype chain until we get to EventTarget so that we\n  // don't go overboard deleting fundamental properties of things:\n  while (context && context.constructor !== EventTarget) {\n    Object.getOwnPropertyNames(context).forEach((property) => {\n      // eslint-disable-next-line no-prototype-builtins\n      if (allowList.hasOwnProperty(property) && allowList[property] === true) {\n        // Skip allowed property\n        return;\n      }\n\n      try {\n        delete (context as {[index: string]: unknown})[property];\n      } catch (e) {\n        console.warn(e);\n      }\n    });\n\n    context = Object.getPrototypeOf(context);\n  }\n}\n\n/**\n * Given an \"allow\" list that maps context property names to booleans (true for\n * allowed, false for disallowed), this factory produces a script chunk that\n * can patch the global context so that only allowed properties/APIs are\n * available.\n *\n * Disallowed properties are deleted on the global context and its prototype\n * chain. Omiting a property from the allow list is tantamount to disallowing\n * it.\n */\nexport const generateContextPatch = (allowList: {[index: string]: boolean}) =>\n    `(${patchContext.toString()})(self, ${JSON.stringify(allowList)});`;\n"]}