{"version":3,"file":"generate-initializer.js","sourceRoot":"","sources":["../../src/context/generate-initializer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAIH,OAAO,EAAkB,mBAAmB,EAAC,MAAM,gBAAgB,CAAC;AAiBpE;;;;;;;GAOG;AACH,SAAS,UAAU,CAEf,WAAmC,EACnC,gBAAkC;IACpC,IAAI,aAAa,GAAqB,IAAI,CAAC;IAE3C,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,KAAmB,EAAE,EAAE;QACnE,MAAM,EAAC,IAAI,EAAC,GAAG,KAAK,CAAC;QAErB,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,mBAAmB,CAAC,SAAS,EAAE;YACpE,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAElC,UAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,KAAmB,EAAE,EAAE;gBAC7D,MAAM,EAAC,IAAI,EAAC,GAAG,KAAK,CAAC;gBACrB,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;oBACrB,QAAQ,IAAI,CAAC,IAAI,EAAE;wBACjB,kEAAkE;wBAClE,gDAAgD;wBAChD,KAAK,mBAAmB,CAAC,YAAY,CAAC,CAAC;4BACrC,MAAM,aAAa,GACf,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;4BAC5D,MAAM,UAAU,GAAyB,IAAI,CAAC,KAAK,CAAC;4BACpD,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BAE5B,IAAI,aAAa,IAAI,IAAI,EAAE;gCACzB,aAAa,CAAC,UAAU,EAAE,CAAC;6BAC5B;iCAAM,IAAI,UAAU,IAAI,IAAI,EAAE;gCAC7B,oDAAoD;gCACpD,MAAM;6BACP;4BAED,IAAI,UAAU,IAAI,IAAI,EAAE;gCACtB,aAAa,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gCAClD,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;6BAClC;iCAAM;gCACL,aAAa,GAAG,IAAI,CAAC;gCACrB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;6BACxB;4BAED,MAAM,gBAAgB,GAClB,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;4BAE9B,gBAAgB,CAAC,aAAa,GAAG,aAAa,CAAC;4BAC/C,gBAAgB,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;4BAEpC,IAAI,CAAC,aAAa,CAAC,gBAAoC,CAAC,CAAC;4BAEzD,MAAM;yBACP;wBACD,wDAAwD;wBACxD,KAAK,mBAAmB,CAAC,aAAa,CAAC,CAAC;4BACtC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAa,CAAC;4BAE/B,IAAI,GAAG,EAAE;gCACP,gBAAgB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;6BACrC;4BAED,MAAM;yBACP;qBACF;iBACF;YACH,CAAC,CAAC,CAAC;YAEH,UAAU,CAAC,KAAK,EAAE,CAAC;YAEnB,mEAAmE;YACnE,YAAY;YACZ,UAAU,CAAC,WAAW,CAAC,EAAC,IAAI,EAAE,mBAAmB,CAAC,mBAAmB,EAAC,CAAC,CAAC;SACzE;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ModelChangeEvent, ThreeDOMGlobalScope} from '../api.js';\nimport {ModelKernel, ModelKernelConstructor} from '../api/model-kernel.js';\nimport {SerializedModel, ThreeDOMMessageType} from '../protocol.js';\n\n/**\n * The \"preserved\" context includes the original native implementations\n * of key APIs required to support cross-context communication and allowed\n * forms of otherwise unsafe script execution.\n *\n * These APIs are presumed to be patched by the surrounding execution context\n * script, and so unpatched versions are required by the initializer.\n */\nexport interface PreservedContext {\n  postMessage: typeof self.postMessage;\n  addEventListener: typeof self.addEventListener;\n  importScripts: (...scripts: Array<string>) => unknown;\n}\n\n\n/**\n * A function that will be stringified and appended the a runtime-generated\n * execution context script to initialize the scene graph execution context.\n *\n * The sole reason for using this pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n */\nfunction initialize(\n    this: ThreeDOMGlobalScope,\n    ModelKernel: ModelKernelConstructor,\n    preservedContext: PreservedContext) {\n  let currentKernel: ModelKernel|null = null;\n\n  preservedContext.addEventListener('message', (event: MessageEvent) => {\n    const {data} = event;\n\n    if (data && data.type && data.type === ThreeDOMMessageType.HANDSHAKE) {\n      const globalPort = event.ports[0];\n\n      globalPort.addEventListener('message', (event: MessageEvent) => {\n        const {data} = event;\n        if (data && data.type) {\n          switch (data.type) {\n            // Instantiate a new ModelKernel, and notify the execution context\n            // of the new Model with a 'model-change' event:\n            case ThreeDOMMessageType.MODEL_CHANGE: {\n              const previousModel =\n                  currentKernel != null ? currentKernel.model : undefined;\n              const serialized: SerializedModel|null = data.model;\n              const port = event.ports[0];\n\n              if (currentKernel != null) {\n                currentKernel.deactivate();\n              } else if (serialized == null) {\n                // Do not proceed if transitioning from null to null\n                break;\n              }\n\n              if (serialized != null) {\n                currentKernel = new ModelKernel(port, serialized);\n                this.model = currentKernel.model;\n              } else {\n                currentKernel = null;\n                this.model = undefined;\n              }\n\n              const modelChangeEvent: Partial<ModelChangeEvent> =\n                  new Event('model-change');\n\n              modelChangeEvent.previousModel = previousModel;\n              modelChangeEvent.model = this.model;\n\n              this.dispatchEvent(modelChangeEvent as ModelChangeEvent);\n\n              break;\n            }\n            // Import an external script into the execution context:\n            case ThreeDOMMessageType.IMPORT_SCRIPT: {\n              const url = data.url as string;\n\n              if (url) {\n                preservedContext.importScripts(url);\n              }\n\n              break;\n            }\n          }\n        }\n      });\n\n      globalPort.start();\n\n      // Notify the host execution context that the scene graph execution\n      // is ready:\n      globalPort.postMessage({type: ThreeDOMMessageType.CONTEXT_INITIALIZED});\n    }\n  });\n}\n\n/**\n * A factory that produces a stringified initializer function.\n */\nexport const generateInitializer = () => initialize.toString();\n"]}