{"version":3,"file":"model-kernel.js","sourceRoot":"","sources":["../../src/api/model-kernel.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAGH,OAAO,EAAmH,mBAAmB,EAAC,MAAM,gBAAgB,CAAC;AAmCrK;;;;;;;;GAQG;AACH,MAAM,UAAU,iBAAiB,CAC7B,KAAuB,EACvB,QAA6B,EAC7B,oBAAqD;;IAEvD,MAAM,kBAAkB,GAGpB;QACF,OAAO,EAAE,KAAK;QACd,UAAU,EAAE,QAAQ;QACpB,wBAAwB,EAAE,oBAAoB;KAC/C,CAAC;IAEF,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACjD,MAAM,oBAAoB,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;IAC3D,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;IAC7B,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IAE/B,MAAM,kBAAkB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;IACvD,MAAM,kBAAkB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;IACvD,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAEjD,MAAM,iBAAiB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;IACrD,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAEjD;;;;;;;;;;;;OAYG;IACH,MAAM,WAAW;QAgBf,YAAY,IAAiB,EAAE,UAA2B;YAfjD,QAAoB,GAAG,IAAI,GAAG,EAA2B,CAAC;YAC1D,QAAoB,GAAG,IAAI,GAAG,EAA2B,CAAC;YAE1D,QAAiB,GAAmB,IAAI,GAAG,EAAE,CAAC;YAE9C,QAAsB,GAAG,CAAC,KAAmB,EAAE,EAAE,CACtD,IAAI,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC;YAKxB,QAAmB,GAA0B,IAAI,GAAG,EAAE,CAAC;YAEvD,QAAiB,GAAG,CAAC,CAAC;YAG7B,MAAM,KAAK,GACP,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAoC,CAAC;YAEvE,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;aAC5C;YAED,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,KAAK,CAAC,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACpE,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;YAEpB,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QACvD,CAAC;QAED;;;WAGG;QACH,IAAI,KAAK;YACP,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC;QAED;;;;;;;;WAQG;QACH,KAAK,CAAC,MAAM,CAAC,OAAwB,EAAE,QAAgB,EAAE,KAAc;YAErE,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBAC1C,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aAClD;YAED,MAAM,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEjD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,MAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC;gBAC3C,kEAAkE;gBAClE,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC;oBACtB,IAAI,EAAE,mBAAmB,CAAC,MAAM;oBAChC,EAAE;oBACF,QAAQ;oBACR,KAAK;oBACL,UAAU;iBACX,CAAC,CAAC;gBAEH,oDAAoD;gBACpD,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE;oBACtC,OAAO;oBACP,MAAM;iBACP,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;QAED;;;WAGG;QACH,WAAW,CACP,IAAO,EAAE,UAAmC;YAC9C,IAAI,CAAC,CAAC,IAAI,IAAI,kBAAkB,CAAC,EAAE;gBACjC,MAAM,IAAI,KAAK,CAAC,oCAAoC,IAAI,EAAE,CAAC,CAAC;aAC7D;YAED,MAAM,EAAC,EAAE,EAAC,GAAG,UAAU,CAAC;YACxB,MAAM,kBAAkB,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;YAEpD,8DAA8D;YAC9D,MAAM,OAAO,GAAG,IAAI,kBAAkB,CAAC,IAAI,EAAE,UAAiB,CAAC,CAAC;YAEhE,IAAI,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAC1C,IAAI,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAE1C,qEAAqE;YACrE,yBAAyB;YACzB,oEAAoE;YACpE,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAE9C,OAAO,OAAgC,CAAC;QAC1C,CAAC;QAED;;;;;;WAMG;QACH,iBAAiB,CAAqC,IAAO;YAE3D,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACpC,OAAO,EAAE,CAAC;aACX;YAED,oEAAoE;YACpE,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,IAAI,CAAE,CAClB,CAAC;QACnC,CAAC;QAED;;;;;;;WAOG;QACH,UAAU;YACR,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;YACpB,IAAI,CAAC,KAAK,CAAC,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;QACzE,CAAC;QAEQ,OApIC,kBAAkB,OAClB,kBAAkB,OAElB,eAAe,OAEf,oBAAoB,OAMpB,iBAAiB,OAEjB,eAAe,EAuHf,eAAe,EAAC,CAAC,KAAmB;YAC5C,MAAM,EAAC,IAAI,EAAC,GAAG,KAAK,CAAC;YAErB,QAAQ,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;gBACzB,KAAK,mBAAmB,CAAC,eAAe,CAAC,CAAC;oBACxC,MAAM,OAAO,GAA0B,IAAI,CAAC;oBAC5C,MAAM,EAAC,OAAO,EAAE,UAAU,EAAC,GAAG,OAAO,CAAC;oBACtC,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oBAEhE,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBAE3C,IAAI,eAAe,IAAI,IAAI,EAAE;wBAC3B,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;qBAChE;oBACD,MAAM;iBACP;aACF;QACH,CAAC;KACF;IAED,OAAO,WAAW,CAAC;AACrB,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConstructedWithArguments, Constructor, Material, Model, PBRMetallicRoughness, ThreeDOMElement, ThreeDOMElementMap} from '../api.js';\nimport {MutationResultMessage, SerializedElementMap, SerializedMaterial, SerializedModel, SerializedPBRMetallicRoughness, ThreeDOMMessageType} from '../protocol.js';\n\nexport interface ModelKernelInterface {\n  readonly model: Model;\n\n  mutate(element: ThreeDOMElement, property: string, value: unknown):\n      Promise<void>;\n  deserialize<T extends keyof ThreeDOMElementMap>(\n      type: T, serialized: SerializedElementMap[T]): ThreeDOMElementMap[T];\n  getElementsByType<T extends keyof ThreeDOMElementMap>(type: T):\n      Array<ThreeDOMElementMap[T]>;\n  deactivate(): void;\n}\n\nexport type ModelKernelConstructor = Constructor<ModelKernelInterface>&\n    ConstructedWithArguments<[MessagePort, SerializedModel]>;\n\nexport type ModelKernel = InstanceType<ModelKernelConstructor>;\n\ntype ElementsByType<T = ThreeDOMElementMap, U extends keyof T = keyof T> =\n    Map<U, Set<T[U]>>;\n\ntype ModelConstructor = Constructor<Model>&\n    ConstructedWithArguments<[ModelKernelInterface, SerializedModel]>;\ntype MaterialConstructor = Constructor<Material>&\n    ConstructedWithArguments<[ModelKernelInterface, SerializedMaterial]>;\ntype PBRMetallicRoughnessConstructor =\n    Constructor<PBRMetallicRoughness>&ConstructedWithArguments<\n        [ModelKernelInterface, SerializedPBRMetallicRoughness]>;\n\ninterface Deferred {\n  resolve: () => void;\n  reject: () => void;\n}\n\n/**\n * A constructor factory for a ModelKernel class. The ModelKernel is defined\n * based on a provided implementation for all specified 3DOM scene graph\n * element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n */\nexport function defineModelKernel(\n    Model: ModelConstructor,\n    Material: MaterialConstructor,\n    PBRMetallicRoughness: PBRMetallicRoughnessConstructor):\n    ModelKernelConstructor {\n  const constructorsByType: {\n    [K in keyof ThreeDOMElementMap]: Constructor<ThreeDOMElementMap[K]>&\n    ConstructedWithArguments<[ModelKernelInterface, SerializedElementMap[K]]>\n  } = {\n    'model': Model,\n    'material': Material,\n    'pbr-metallic-roughness': PBRMetallicRoughness\n  };\n\n  const $onMessageEvent = Symbol('onMessageEvent');\n  const $messageEventHandler = Symbol('messageEventHandler');\n  const $port = Symbol('port');\n  const $model = Symbol('model');\n\n  const $elementsByLocalId = Symbol('elementsByLocalId');\n  const $localIdsByElement = Symbol('localIdsByElement');\n  const $elementsByType = Symbol('elementsByType');\n\n  const $pendingMutations = Symbol('pendingMutations');\n  const $nextMutationId = Symbol('nextMutationId');\n\n  /**\n   * A ModelKernel is the core business logic implementation for a distinct\n   * Model that has been exposed to a script execution context. The ModelKernel\n   * is an internal detail, and should never be explicitly exposed to users of\n   * a Model.\n   *\n   * The ModelKernel primarily handles deserializing scene graph elements, and\n   * communicating mutations from the 3DOM execution context to the host\n   * execution context where the backing scene graph lives.\n   *\n   * A ModelKernel also maintains a comprehensive map of elements by type to\n   * assist scene graph elements in querying for their contemporaries.\n   */\n  class ModelKernel implements ModelKernelInterface {\n    protected[$elementsByLocalId] = new Map<number, ThreeDOMElement>();\n    protected[$localIdsByElement] = new Map<ThreeDOMElement, number>();\n\n    protected[$elementsByType]: ElementsByType = new Map();\n\n    protected[$messageEventHandler] = (event: MessageEvent) =>\n        this[$onMessageEvent](event);\n    protected[$port]: MessagePort;\n\n    protected[$model]: Model;\n\n    protected[$pendingMutations]: Map<number, Deferred> = new Map();\n\n    protected[$nextMutationId] = 0;\n\n    constructor(port: MessagePort, serialized: SerializedModel) {\n      const types =\n          Object.keys(constructorsByType) as Array<keyof ThreeDOMElementMap>;\n\n      for (const type of types) {\n        this[$elementsByType].set(type, new Set());\n      }\n\n      this[$port] = port;\n      this[$port].addEventListener('message', this[$messageEventHandler]);\n      this[$port].start();\n\n      this[$model] = this.deserialize('model', serialized);\n    }\n\n    /**\n     * The root scene graph element, a Model, that is the entrypoint for the\n     * entire scene graph that is backed by this kernel.\n     */\n    get model() {\n      return this[$model];\n    }\n\n    /**\n     * Mutate a property of a property of a given scene graph element. All\n     * direct mutations of the scene graph are considered asynchronous. This\n     * method returns a Promise that resolves when the mutation has been\n     * successfully applied to the backing scene graph, and rejects if the\n     * mutation failed or is otherwise not allowed.\n     *\n     * TODO(#1006): How to validate values?\n     */\n    async mutate(element: ThreeDOMElement, property: string, value: unknown):\n        Promise<void> {\n      if (!this[$localIdsByElement].has(element)) {\n        throw new Error('Cannot mutate unknown element');\n      }\n\n      const id = this[$localIdsByElement].get(element);\n\n      return new Promise((resolve, reject) => {\n        const mutationId = this[$nextMutationId]++;\n        // TODO(#1006): Validate mutations before sending to host context:\n        this[$port].postMessage({\n          type: ThreeDOMMessageType.MUTATE,\n          id,\n          property,\n          value,\n          mutationId,\n        });\n\n        // TODO(#1011): Add timeout to reject this mutation:\n        this[$pendingMutations].set(mutationId, {\n          resolve,\n          reject,\n        });\n      });\n    }\n\n    /**\n     * Deserializes a JSON representation of a scene graph element into a live\n     * element that is backed by this ModelKernel.\n     */\n    deserialize<T extends keyof ThreeDOMElementMap>(\n        type: T, serialized: SerializedElementMap[T]): ThreeDOMElementMap[T] {\n      if (!(type in constructorsByType)) {\n        throw new Error(`Cannot deserialize unknown type: ${type}`);\n      }\n\n      const {id} = serialized;\n      const ElementConstructor = constructorsByType[type];\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const element = new ElementConstructor(this, serialized as any);\n\n      this[$elementsByLocalId].set(id, element);\n      this[$localIdsByElement].set(element, id);\n\n      // We know that the all accepted types have been pre-populated in the\n      // [$elementsByType] map:\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this[$elementsByType].get(type)!.add(element);\n\n      return element as ThreeDOMElementMap[T];\n    }\n\n    /**\n     * Look up all scene graph elements given a type string. Type strings\n     * are lower-cased, hyphenated versions of the constructor names of their\n     * corresponding classes. For example, a query for 'pbr-metallic-roughness'\n     * element types will yield the list of PBRMetallicRoughness elements in\n     * sparse tree order.\n     */\n    getElementsByType<T extends keyof ThreeDOMElementMap>(type: T):\n        Array<ThreeDOMElementMap[T]> {\n      if (!this[$elementsByType].has(type)) {\n        return [];\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return Array.from(this[$elementsByType].get(type)!) as\n          Array<ThreeDOMElementMap[T]>;\n    }\n\n    /**\n     * Deactivate the ModelKernel. This has the effect of blocking all future\n     * mutations to the scene graph. Once deactivated, a ModelKernel cannot be\n     * reactivated.\n     *\n     * The ModelKernel should be deactivated before it is disposed of, or else\n     * it will leak in memory.\n     */\n    deactivate() {\n      this[$port].close();\n      this[$port].removeEventListener('message', this[$messageEventHandler]);\n    }\n\n    protected[$onMessageEvent](event: MessageEvent) {\n      const {data} = event;\n\n      switch (data && data.type) {\n        case ThreeDOMMessageType.MUTATION_RESULT: {\n          const message: MutationResultMessage = data;\n          const {applied, mutationId} = message;\n          const pendingMutation = this[$pendingMutations].get(mutationId);\n\n          this[$pendingMutations].delete(mutationId);\n\n          if (pendingMutation != null) {\n            applied ? pendingMutation.resolve() : pendingMutation.reject();\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  return ModelKernel;\n}\n"]}