{"version":3,"file":"pbr-metallic-roughness.js","sourceRoot":"","sources":["../../src/api/pbr-metallic-roughness.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAWH;;;;;;;;;;GAUG;AACH,MAAM,UAAU,0BAA0B,CACtC,eAA6C;IAE/C,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IACjC,MAAM,gBAAgB,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAEnD;;OAEG;IACH,MAAM,oBAAqB,SAAQ,eAAe;QAKhD,YACI,MAAmB,EAAE,UAA0C;YACjE,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YAE1B,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;YACvB,IAAI,CAAC,gBAAgB,CAAC;gBAClB,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,eAAe,CAAS,CAAC;QACxD,CAAC;QAED;;WAEG;QACH,IAAI,eAAe;YACjB,OAAO,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAChC,CAAC;QAED;;;;;WAKG;QACH,KAAK,CAAC,kBAAkB,CAAC,KAAW;YAClC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;YAC3D,IAAI,CAAC,gBAAgB,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAS,CAAC;QACxD,CAAC;KACF;IAED,OAAO,oBAAoB,CAAC;AAC9B,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConstructedWithArguments, Constructor, PBRMetallicRoughness as PBRMetallicRoughnessInterface, RGBA, ThreeDOMElement} from '../api.js';\nimport {SerializedPBRMetallicRoughness} from '../protocol.js';\n\nimport {ModelKernel} from './model-kernel.js';\n\nexport type PBRMetallicRoughnessConstructor =\n    Constructor<PBRMetallicRoughnessInterface>&\n    ConstructedWithArguments<[ModelKernel, SerializedPBRMetallicRoughness]>;\n\n/**\n * A constructor factory for a PBRMetallicRoughness class. The\n * PBRMetallicRoughness is defined based on a provided implementation for all\n * specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function definePBRMetallicRoughness(\n    ThreeDOMElement: Constructor<ThreeDOMElement>):\n    PBRMetallicRoughnessConstructor {\n  const $kernel = Symbol('kernel');\n  const $baseColorFactor = Symbol('baseColorFactor');\n\n  /**\n   * PBRMetallicRoughness exposes the PBR properties for a given Material.\n   */\n  class PBRMetallicRoughness extends ThreeDOMElement implements\n      PBRMetallicRoughnessInterface {\n    protected[$kernel]: ModelKernel;\n    protected[$baseColorFactor]: Readonly<RGBA>;\n\n    constructor(\n        kernel: ModelKernel, serialized: SerializedPBRMetallicRoughness) {\n      super(kernel, serialized);\n\n      this[$kernel] = kernel;\n      this[$baseColorFactor] =\n          Object.freeze(serialized.baseColorFactor) as RGBA;\n    }\n\n    /**\n     * The base color factor of the material in RGBA format.\n     */\n    get baseColorFactor() {\n      return this[$baseColorFactor];\n    }\n\n    /**\n     * Set the base color factor of the material.\n     * Requires the material-properties capability.\n     *\n     * @see ../api.ts\n     */\n    async setBaseColorFactor(color: RGBA) {\n      await this[$kernel].mutate(this, 'baseColorFactor', color);\n      this[$baseColorFactor] = Object.freeze(color) as RGBA;\n    }\n  }\n\n  return PBRMetallicRoughness;\n}\n"]}