{"version":3,"file":"context.js","sourceRoot":"","sources":["../src/context.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ThreeDOMCapability} from './api.js';\nimport {ALLOWLISTED_GLOBALS} from './context/allowlist.js';\nimport {generateAPI} from './context/generate-api.js';\nimport {generateCapabilityFilter} from './context/generate-capability-filter.js';\nimport {generateContextPatch} from './context/generate-context-patch.js';\nimport {generateInitializer} from './context/generate-initializer.js';\nimport {ModelGraft as ThreeJSModelGraft} from './facade/three-js/model-graft.js';\nimport {MutateMessage, ThreeDOMMessageType} from './protocol.js';\n\nconst $modelGraft = Symbol('modelGraft');\nconst $port = Symbol('port');\n\nconst $messageEventHandler = Symbol('messageEventHandler');\nconst $onMessageEvent = Symbol('onMessageEvent');\n\n/**\n * A ModelGraftManipulator is an internal construct intended to consolidate\n * any mutations that operate on the backing scene graph. It can be thought\n * of as a host execution context counterpart to the ModelKernel in the scene\n * graph execution context.\n */\nclass ModelGraftManipulator {\n  protected[$port]: MessagePort;\n  protected[$modelGraft]: AnyModelGraft;\n\n  protected[$messageEventHandler] = (event: MessageEvent) =>\n      this[$onMessageEvent](event);\n\n  constructor(modelGraft: AnyModelGraft, port: MessagePort) {\n    this[$modelGraft] = modelGraft;\n    this[$port] = port;\n    this[$port].addEventListener('message', this[$messageEventHandler]);\n    this[$port].start();\n  }\n\n  /**\n   * Clean up internal state so that the ModelGraftManipulator can be properly\n   * garbage collected.\n   */\n  dispose() {\n    this[$port].removeEventListener('message', this[$messageEventHandler]);\n    this[$port].close();\n  }\n\n  [$onMessageEvent](event: MessageEvent) {\n    const {data} = event;\n    if (data && data.type) {\n      if (data.type === ThreeDOMMessageType.MUTATE) {\n        let applied = false;\n        const {mutationId} = data as MutateMessage;\n        try {\n          this[$modelGraft].mutate(data.id, data.property, data.value);\n          applied = true;\n        } finally {\n          this[$port].postMessage(\n              {type: ThreeDOMMessageType.MUTATION_RESULT, applied, mutationId});\n        }\n      }\n    }\n  }\n}\n\n\nconst ALL_CAPABILITIES: Readonly<Array<ThreeDOMCapability>> =\n    Object.freeze(['messaging', 'material-properties', 'fetch']);\n\n// TODO(#1004): Export an abstract interface for ModelGraft someday when we\n// want to support multiple rendering backends\nexport type AnyModelGraft = ThreeJSModelGraft;\n\n/**\n * Constructs and returns a string representing a fully-formed scene graph\n * execution context script, including context patching, capabilities and\n * scene graph API constructs.\n */\nexport const generateContextScriptSource =\n    (capabilities: Readonly<Array<ThreeDOMCapability>> = ALL_CAPABILITIES) => {\n      return `;(function() {\nvar ThreeDOMMessageType = ${JSON.stringify(ThreeDOMMessageType)};\n\nvar preservedContext = {\n  postMessage: self.postMessage.bind(self),\n  addEventListener: self.addEventListener.bind(self),\n  importScripts: self.importScripts.bind(self)\n};\n\n${generateContextPatch(ALLOWLISTED_GLOBALS)}\n${generateAPI()}\n${generateCapabilityFilter(capabilities)}\n${generateInitializer()}\n\ninitialize.call(self, ModelKernel, preservedContext);\n\n})();`;\n    };\n\n\nconst $worker = Symbol('worker');\nconst $workerInitializes = Symbol('workerInitializes');\nconst $modelGraftManipulator = Symbol('modelGraftManipulator');\n\n/**\n * A ThreeDOMExecutionContext is created in the host execution context that\n * wishes to invoke scripts in a specially crafted and carefully isolated\n * script context, referred to as the scene graph execution context. For\n * practical implementation purposes, the scene graph execution context is\n * a Worker whose global scope has been heavily patched before any custom\n * script is subsequently invoked in it.\n *\n * The ThreeDOMExecutionContext must be given a set of allowed capabilities\n * when it is created. The allowed capabilities cannot be changed after the\n * scene graph execution context has been established.\n */\nexport class ThreeDOMExecutionContext extends EventTarget {\n  get worker() {\n    return this[$worker];\n  }\n\n  protected[$worker]: Worker;\n  protected[$workerInitializes]: Promise<MessagePort>;\n  protected[$modelGraftManipulator]: ModelGraftManipulator|null = null;\n\n  constructor(capabilities: Array<ThreeDOMCapability>) {\n    super();\n\n    const contextScriptSource = generateContextScriptSource(capabilities);\n    const url = URL.createObjectURL(\n        new Blob([contextScriptSource], {type: 'text/javascript'}));\n\n    this[$worker] = new Worker(url);\n    this[$workerInitializes] = new Promise<MessagePort>((resolve) => {\n      const {port1, port2} = new MessageChannel();\n      const onMessageEvent = (event: MessageEvent) => {\n        if (event.data &&\n            event.data.type === ThreeDOMMessageType.CONTEXT_INITIALIZED) {\n          port1.removeEventListener('message', onMessageEvent);\n\n          resolve(port1);\n        }\n      };\n\n      this[$worker].postMessage({type: ThreeDOMMessageType.HANDSHAKE}, [port2]);\n\n      port1.addEventListener('message', onMessageEvent);\n      port1.start();\n    });\n  }\n\n  async changeModel(modelGraft: AnyModelGraft|null): Promise<void> {\n    const port = await this[$workerInitializes];\n    const {port1, port2} = new MessageChannel();\n\n    port.postMessage(\n        {\n          type: ThreeDOMMessageType.MODEL_CHANGE,\n          model: modelGraft != null && modelGraft.model != null ?\n              modelGraft.model.toJSON() :\n              null\n        },\n        [port2]);\n\n    const modelGraftManipulator = this[$modelGraftManipulator];\n\n    if (modelGraftManipulator != null) {\n      modelGraftManipulator.dispose();\n      this[$modelGraftManipulator] = null;\n    }\n\n    if (modelGraft != null) {\n      this[$modelGraftManipulator] =\n          new ModelGraftManipulator(modelGraft, port1);\n    }\n  }\n\n  /**\n   * Evaluate an arbitrary chunk of script in the scene graph execution context.\n   * The script is guaranteed to be evaluated after the scene graph execution\n   * context is fully initialized. It is not guaranteed to be evaluated before\n   * or after a Model is made available in the scene graph execution context.\n   *\n   * Note that web browsers do not universally support module scripts (\"ESM\") in\n   * Workers, so for now all scripts must be valid non-module scripts.\n   */\n  async eval(scriptSource: string): Promise<void> {\n    const port = await this[$workerInitializes];\n    const url = URL.createObjectURL(\n        new Blob([scriptSource], {type: 'text/javascript'}));\n    port.postMessage({type: ThreeDOMMessageType.IMPORT_SCRIPT, url});\n  }\n\n  /**\n   * Terminates the scene graph execution context, closes the designated\n   * messaging port and generally cleans up the ThreeDOMExecutionContext\n   * so that it can be properly garbage collected.\n   */\n  async terminate() {\n    this[$worker].terminate();\n\n    const modelGraftManipulator = this[$modelGraftManipulator];\n\n    if (modelGraftManipulator != null) {\n      modelGraftManipulator.dispose();\n      this[$modelGraftManipulator] = null;\n    }\n\n    const port = await this[$workerInitializes];\n    port.close();\n  }\n}\n"]}