{"version":3,"file":"protocol.js","sourceRoot":"","sources":["../src/protocol.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAIH;;;;GAIG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG;IAEjC,8BAA8B;IAE9B,yEAAyE;IACzE,+BAA+B;IAC/B,SAAS,EAAE,CAAC;IAEZ,wEAAwE;IACxE,yCAAyC;IACzC,aAAa,EAAE,CAAC;IAEhB,yEAAyE;IACzE,yEAAyE;IACzE,YAAY,EAAE,CAAC;IAEf,wEAAwE;IACxE,oCAAoC;IACpC,eAAe,EAAE,CAAC;IAElB,8BAA8B;IAE9B,uEAAuE;IACvE,0DAA0D;IAC1D,mBAAmB,EAAE,CAAC;IAEtB,yEAAyE;IACzE,kCAAkC;IAClC,MAAM,EAAE,CAAC;CACV,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RGBA} from './api.js';\n\n/**\n * The protocol between 3DOM execution contexts is strictly defined.\n * Only specific types of messages are allowed, and their types are\n * all included in the ThreeDOMMessageType map.\n */\nexport const ThreeDOMMessageType = {\n\n  // === Host -> Scene Graph ===\n\n  // Used when the host execution context and scene graph execution context\n  // are negotiating a connection\n  HANDSHAKE: 1,\n\n  // A message that indicates that a custom script is meant to be imported\n  // into the scene graph execution context\n  IMPORT_SCRIPT: 2,\n\n  // A notification from the host execution context that the main Model has\n  // changed, including the sparse, serialized scene graph of the new Model\n  MODEL_CHANGE: 3,\n\n  // A notification that confirms or denies a request from the scene graph\n  // context to mutate the scene graph\n  MUTATION_RESULT: 4,\n\n  // === Scene Graph => Host ===\n\n  // Notification sent to the host execution context to indicate that the\n  // scene graph execution context has finished initializing\n  CONTEXT_INITIALIZED: 5,\n\n  // A request from the scene graph execution context to mutate some detail\n  // of the backing host scene graph\n  MUTATE: 6\n};\n\n/**\n * Messages exchanged between a scene graph context and the host context.\n * They are distinguished by their type property.\n */\nexport declare interface ThreeDOMMessage {\n  type: number;\n}\n\n/**\n * A message requesting that the scene graph context import a script by\n * URL.\n */\nexport declare interface ImportScriptMessage extends ThreeDOMMessage {\n  url: string;\n}\n\n/**\n * A message informing the scene graph context that the current global model\n * has changed.\n */\nexport declare interface ModelChangedMessage extends ThreeDOMMessage {\n  model: SerializedModel;\n}\n\n/**\n * A request from the scene graph context to mutate the scene graph. The\n * mutation ID distinguishes this request so that a corresponding response\n * can be handled in the future.\n */\nexport declare interface MutateMessage extends ThreeDOMMessage {\n  id: number;\n  property: string;\n  value: unknown;\n  mutationId: number;\n}\n\nexport declare interface MutationResultMessage extends ThreeDOMMessage {\n  mutationId: number;\n  applied: boolean;\n}\n\n/**\n * A map of scene graph element types to interfaces for the serialized\n * representation of those types.\n */\nexport declare interface SerializedElementMap {\n  'model': SerializedModel;\n  'material': SerializedMaterial;\n  'pbr-metallic-roughness': SerializedPBRMetallicRoughness;\n}\n\n/**\n * The serialized form of a ThreeDOMElement\n * @see api.ts\n */\nexport declare interface SerializedThreeDOMElement {\n  id: number;\n  name?: string;\n}\n\n/**\n * The serialized form of a PBRMetallicRoughness\n * @see api.ts\n */\nexport declare interface SerializedPBRMetallicRoughness extends\n    SerializedThreeDOMElement {\n  baseColorFactor: RGBA;\n}\n\n/**\n * The serialized form of a Material\n * @see api.ts\n */\nexport declare interface SerializedMaterial extends SerializedThreeDOMElement {\n  pbrMetallicRoughness: SerializedPBRMetallicRoughness;\n}\n\n/**\n * The serialized form of a Model\n * @see api.ts\n */\nexport declare interface SerializedModel extends SerializedThreeDOMElement {\n  modelUri: string;\n  materials: Array<SerializedMaterial>;\n}\n"]}