import { isLoaderObject } from './loader-utils/normalize-loader';
import { mergeOptions } from './loader-utils/merge-options';
import { getIteratorFromData } from './loader-utils/get-data';
import { getLoaderContext } from './loader-utils/get-loader-context';
import { selectLoader } from './select-loader';
export async function parseInBatchesSync(data, loaders, options, url) {
  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
    url = options;
    options = loaders;
    loaders = null;
  }

  const loader = selectLoader(loaders, url, null);
  options = mergeOptions(loader, options);
  const context = getLoaderContext({
    url,
    loaders
  }, options);
  return parseWithLoaderInBatchesSync(loader, data, options, context);
}

function parseWithLoaderInBatchesSync(loader, data, options, context) {
  if (loader.parseInBatchesSync) {
    const inputIterator = getIteratorFromData(data);
    const outputIterator = loader.parseInBatchesSync(inputIterator, options, context, loader);
    return outputIterator;
  }

  throw new Error('parseWithLoaderInBatchesSync not available');
}
//# sourceMappingURL=parse-in-batches-sync.js.map