"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseInBatchesSync = parseInBatchesSync;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _normalizeLoader = require("./loader-utils/normalize-loader");

var _mergeOptions = require("./loader-utils/merge-options");

var _getData = require("./loader-utils/get-data");

var _getLoaderContext = require("./loader-utils/get-loader-context");

var _selectLoader = require("./select-loader");

function parseInBatchesSync(_x, _x2, _x3, _x4) {
  return _parseInBatchesSync.apply(this, arguments);
}

function _parseInBatchesSync() {
  _parseInBatchesSync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(data, loaders, options, url) {
    var loader, context;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!Array.isArray(loaders) && !(0, _normalizeLoader.isLoaderObject)(loaders)) {
              url = options;
              options = loaders;
              loaders = null;
            }

            loader = (0, _selectLoader.selectLoader)(loaders, url, null);
            options = (0, _mergeOptions.mergeOptions)(loader, options);
            context = (0, _getLoaderContext.getLoaderContext)({
              url: url,
              loaders: loaders
            }, options);
            return _context.abrupt("return", parseWithLoaderInBatchesSync(loader, data, options, context));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseInBatchesSync.apply(this, arguments);
}

function parseWithLoaderInBatchesSync(loader, data, options, context) {
  if (loader.parseInBatchesSync) {
    var inputIterator = (0, _getData.getIteratorFromData)(data);
    var outputIterator = loader.parseInBatchesSync(inputIterator, options, context, loader);
    return outputIterator;
  }

  throw new Error('parseWithLoaderInBatchesSync not available');
}
//# sourceMappingURL=parse-in-batches-sync.js.map