/* @license three-dragger v1.0.1 | (c) Qingrong Ke <keqingrong1992@gmail.com> (https://keqingrong.github.io/) */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('three')) :
	typeof define === 'function' && define.amd ? define(['three'], factory) :
	(global.ThreeDragger = factory(global.THREE));
}(this, (function (three) { 'use strict';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var eventemitter3 = createCommonjsModule(function (module) {

var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
{
  module.exports = EventEmitter;
}
});

var isFunction = function isFunction(object) {
  return typeof object === 'function';
};

var isEmptyArray = function isEmptyArray(object) {
  return Array.isArray(object) && object.length === 0;
};
/**
 * Normalize a number to [-1,1]
 * @param {Number} number
 * @return {Number}
 */


var normalize = function normalize(number) {
  if (number < -1) {
    return -1;
  } else if (number > 1) {
    return 1;
  } else {
    return number;
  }
};
/**
 * Calculate normalized device coordinates of the mouse
 * @param {MouseEvent} event
 * @param {Element} container
 * @return {Vector2}
 */


var getMouseNDCPosition = function getMouseNDCPosition(event, container) {
  var rect = {
    left: 0,
    top: 0,
    width: window.innerWidth,
    height: window.innerHeight
  }; // the contanier is Element type

  if (container && isFunction(container.getBoundingClientRect)) {
    Object.assign(rect, container.getBoundingClientRect());
  }

  var left = rect.left,
      top = rect.top,
      width = rect.width,
      height = rect.height;

  if (event.clientX === undefined || event.clientY === undefined) {
    console.warn("".concat(event, " is not a standard DOM event, which misses clientX and clientY")); // eslint-disable-line no-console
  } // relative to the viewport -> relative to the container


  var clientX = event.clientX - left;
  var clientY = event.clientY - top; // calculate normalized device coordinates

  var x = clientX / width * 2 - 1;
  var y = -(clientY / height) * 2 + 1;
  return new three.Vector2(normalize(x), normalize(y));
};

var MOUSE = {
  LEFT: 0,
  MIDDLE: 1,
  RIGHT: 2
};

var MouseDragger =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(MouseDragger, _EventEmitter);

  /**
   * Constructor
   * @param {[Object3D]} objects - draggable objects
   * @param {Camera} camera - camera
   * @param {Element} domElement - canvas element
   */
  function MouseDragger(objects, camera, domElement) {
    var _this;

    _classCallCheck(this, MouseDragger);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MouseDragger).call(this));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDocumentMouseDown", function (event) {
      var self = _assertThisInitialized(_assertThisInitialized(_this));

      if (!self.enabled) {
        return;
      }

      if (!self.containsMousePoint(event)) {
        return;
      }

      if (event.button === MOUSE.LEFT) {
        event.preventDefault();
        var mouse = getMouseNDCPosition(event, self.domElement);
        var current = self.rayCast(mouse) || null;
        self.mouse = mouse;
        self.selected = current;
        self.emitEvent('mousedown', current, null, event);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDocumentMouseMove", function (event) {
      var self = _assertThisInitialized(_assertThisInitialized(_this));

      if (!self.enabled) {
        return;
      }

      event.preventDefault();

      if (self.selected) {
        var mouse = getMouseNDCPosition(event, self.domElement); // the NDC is not changed

        if (mouse.equals(self.mouse)) {
          return;
        } // Update mouse's coordinates


        self.mouse = mouse; // Begin to drag the object

        if (self.dragging === false) {
          // Create a plane with the camera's world space direction (as a normal) and a coplanar point
          self.plane.setFromNormalAndCoplanarPoint(self.camera.getWorldDirection(), self.selected.position); // Calculate the offset between the mouse and the center of the selected object

          self.raycaster.setFromCamera(self.mouse, self.camera);
          self.raycaster.ray.intersectPlane(self.plane, self.intersection);
          self.offset.copy(self.intersection).sub(self.selected.position);
          self.domElement.style.cursor = 'move';
          self.emitEvent('dragstart', self.selected, self.selected.position.clone(), event);
          self.dragging = true;
        } // Calculate the intersection of the plane and the ray


        self.raycaster.setFromCamera(self.mouse, self.camera);
        self.raycaster.ray.intersectPlane(self.plane, self.intersection); // Subtract the offset before emit world coordinates

        self.emitEvent('drag', self.selected, self.intersection.sub(self.offset).clone(), event);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDocumentMouseUp", function (event) {
      var self = _assertThisInitialized(_assertThisInitialized(_this));

      if (!self.enabled) {
        return;
      }

      if (event.button === MOUSE.LEFT) {
        event.preventDefault(); // Dargging

        if (self.dragging && self.selected) {
          self.domElement.style.cursor = 'auto';
          self.emitEvent('dragend', self.selected, self.intersection.clone(), event);
          self.selected = null;
          self.dragging = false;
          return;
        }

        self.selected = null;
        self.dragging = false; // No dragging

        if (self.containsMousePoint(event)) {
          self.emitEvent('mouseup', null, null, event);
          self.emitEvent('click', null, null, event);
        }
      }
    });

    _this.objects = objects;
    _this.camera = camera;
    _this.domElement = domElement;
    _this.mouse = new three.Vector2(); // normalized device coordinates of the mouse

    _this.selected = null; // selected object

    _this.offset = new three.Vector3(); // offset between the mouse and the center of selected object

    _this.plane = new three.Plane(); // plane of the selected object, which is perpendicular to the camera's world space direction

    _this.raycaster = new three.Raycaster();
    _this.intersection = new three.Vector3();
    _this.dragging = false;
    _this.enabled = true;

    _this.attachEvents();

    return _this;
  }
  /**
   * Update draggable objects
   * @param {[Object3D]} objects
   */


  _createClass(MouseDragger, [{
    key: "update",
    value: function update(objects) {
      this.objects = objects;
    }
    /**
     * Reset
     */

  }, {
    key: "reset",
    value: function reset() {
      var self = this;
      self.enabled = true;
    }
    /**
     * Dispose
     */

  }, {
    key: "dispose",
    value: function dispose() {
      this.detachEvents();
    }
    /**
     * Attach events
     */

  }, {
    key: "attachEvents",
    value: function attachEvents() {
      var self = this;
      document.addEventListener('mousedown', self.onDocumentMouseDown, false);
      document.addEventListener('mousemove', self.onDocumentMouseMove, false);
      document.addEventListener('mouseup', self.onDocumentMouseUp, false);
    }
    /**
     * Detach events
     */

  }, {
    key: "detachEvents",
    value: function detachEvents() {
      var self = this;
      document.removeEventListener('mousedown', self.onDocumentMouseDown, false);
      document.removeEventListener('mousemove', self.onDocumentMouseMove, false);
      document.removeEventListener('mouseup', self.onDocumentMouseUp, false);
    }
    /**
     * Determine whether the mouse is contained in the canvas element
     * @param {MouseEvent} event
     */

  }, {
    key: "containsMousePoint",
    value: function containsMousePoint(event) {
      var self = this;

      if (!self.domElement.getBoundingClientRect) {
        return true;
      }

      var _self$domElement$getB = self.domElement.getBoundingClientRect(),
          top = _self$domElement$getB.top,
          right = _self$domElement$getB.right,
          bottom = _self$domElement$getB.bottom,
          left = _self$domElement$getB.left;

      var clientX = event.clientX,
          clientY = event.clientY; // outside of the canvas element

      if (clientX < left || clientX > right || clientY < top || clientY > bottom) {
        return false;
      } // inside


      return true;
    }
    /**
     * Ray cast
     * @param {Vector2} - mouse
     * @returns {Object3D|null} - intersected object
     */

  }, {
    key: "rayCast",
    value: function rayCast(mouse) {
      var self = this;

      if (isEmptyArray(self.objects)) {
        return null;
      }

      self.raycaster.setFromCamera(mouse, self.camera);
      var intersects = self.raycaster.intersectObjects(self.objects, true);

      if (intersects.length > 0) {
        return intersects[0].object;
      }

      return null;
    }
    /**
     * Emit event
     * @param {string} eventName - event name
     * @param {Object3D} target - intersected object
     * @param {Vector3} position - position of the intersected object
     * @param {Event} domEvent - DOM event
     */

  }, {
    key: "emitEvent",
    value: function emitEvent(eventName, target, position, domEvent) {
      var self = this;

      _get(_getPrototypeOf(MouseDragger.prototype), "emit", this).call(this, eventName, {
        target: target,
        mouse: self.mouse,
        position: position,
        event: domEvent
      });
    }
    /**
     * Press the left mouse button
     * @param {MouseEvent} event
     */

  }]);

  return MouseDragger;
}(eventemitter3);

return MouseDragger;

})));
//# sourceMappingURL=three-dragger.umd.js.map
