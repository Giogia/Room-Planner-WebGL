{"version":3,"sources":["webpack:///./packages/mdc-image-list/mdc-image-list.scss","webpack:///./packages/material-components-web/node_modules/@material/shape/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/theme/_mixins.scss","webpack:///./packages/mdc-image-list/_variables.scss","webpack:///./packages/material-components-web/node_modules/@material/typography/_mixins.scss"],"names":[],"mappings":";;;;;;;AAiCE;EAEI;EACA;EAEA;EACA;CAlCL;;AAsCC;;EAII;EACA;CArCL;;AAyCC;EAEI;CAvCL;;AA2CC;EAEI;CAzCL;;AA8CC;EAEI;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;CA7CL;;AAmHC;EAEI;CAjHL;;AAuHC;EClHE;CDDH;;AAyHC;ECxHE;CDGH;;AAwCC;EEAE;EACA;EACA;EFIE;EACA;EACA;EACA;EACA;EACA,kBGxEM;CHiCX;;AA2CC;EIPE;EACA;EFpBA;EACA;EACA;EAFA;EACA;EACA;EAFA;EACA;EACA;EAFA;EACA;EACA;EAFA;EACA;EACA;EAFA;EACA;EACA;UAAA;EAFA;EACA;EACA;EE2BA;EACA;EACA;CJnBH;;AAqBC;EAEI;EACA;EACA;EACA,aGtFmB;EHuFnB;EAIA,+BG5F6B;EH6F7B;CAtBL;;AA4BC;EAEI;CA1BL;AA6BG;EAEI;UAAA;CA5BP;AAgCG;EAEI;EACA","file":"mdc.image-list.css","sourcesContent":["// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/shape/mixins\" as shape-mixins;\n@use \"@material/shape/functions\" as shape-functions;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"@material/typography/mixins\" as typography-mixins;\n@use \"./variables\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  // postcss-bem-linter: define image-list\n  .mdc-image-list {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      display: flex;\n      flex-wrap: wrap;\n      // Margin and padding are set to override default user agent styles for lists, and also to center the Image List\n      margin: 0 auto;\n      padding: 0;\n    }\n  }\n\n  .mdc-image-list__item,\n  .mdc-image-list__image-aspect-container {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      // Supports absolute positioning of protected supporting content for item, and image for image-aspect-container\n      position: relative;\n      box-sizing: border-box;\n    }\n  }\n\n  .mdc-image-list__item {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      list-style-type: none;\n    }\n  }\n\n  .mdc-image-list__image {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      width: 100%;\n    }\n  }\n\n  // Descendant selector allows image-aspect-container to be optional in DOM structure\n  .mdc-image-list__image-aspect-container .mdc-image-list__image {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      height: 100%;\n      // Background styles to support div instead of img\n      background-repeat: no-repeat;\n      background-position: center;\n      background-size: cover;\n    }\n  }\n\n  @include aspect(1, $query: $query);\n  @include shape-radius(0, $query: $query);\n\n  .mdc-image-list__supporting {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(color, text-primary-on-background);\n    }\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      box-sizing: border-box;\n      padding: 8px 0;\n      line-height: variables.$icon-size;\n    }\n  }\n\n  .mdc-image-list__label {\n    @include typography-mixins.typography(subtitle1, $query: $query);\n    @include typography-mixins.overflow-ellipsis($query: $query);\n  }\n\n  // Modifier for labels/icons with text protection, overlaying images.\n\n  .mdc-image-list--with-text-protection .mdc-image-list__supporting {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: absolute;\n      bottom: 0;\n      width: 100%;\n      height: variables.$text-protection-height;\n      padding: 0 variables.$text-protection-horizontal-padding;\n    }\n\n    @include feature-targeting-mixins.targets($feat-color) {\n      background: variables.$text-protection-background-color;\n      color: #fff;\n    }\n  }\n\n  // Masonry Image List, using CSS columns (i.e. renders down then across)\n\n  .mdc-image-list--masonry {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      display: block; // Override flex\n    }\n\n    .mdc-image-list__item {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        break-inside: avoid-column;\n      }\n    }\n\n    .mdc-image-list__image {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        display: block;\n        height: auto;\n      }\n    }\n  }\n  // postcss-bem-linter: end\n}\n\n@mixin aspect($width-height-ratio, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  .mdc-image-list__image-aspect-container {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      padding-bottom: calc(100% / #{$width-height-ratio});\n    }\n  }\n}\n\n@mixin shape-radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {\n  .mdc-image-list__image {\n    @include shape-mixins.radius($radius, $rtl-reflexive, $query: $query);\n  }\n\n  $selector: if(&, \"&.mdc-image-list--with-text-protection\", \".mdc-image-list--with-text-protection\");\n\n  #{$selector} .mdc-image-list__supporting {\n    $masked-radius: shape-functions.mask-radius($radius, 0 0 1 1);\n\n    @include shape-mixins.radius($masked-radius, $rtl-reflexive, $query: $query);\n  }\n}\n\n// Standard Image List\n\n@mixin standard-columns(\n  $column-count,\n  $gutter-size: variables.$standard-gutter-size,\n  $query: feature-targeting-functions.all()\n) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  // This uses margin rather than padding to facilitate properly positioning the supporting content element when\n  // --with-text-protection is used.\n  .mdc-image-list__item {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      // Subtract extra fraction from each item's width to ensure correct wrapping in IE/Edge which round differently\n      width: calc(100% / #{$column-count} - #{$gutter-size + 1 / $column-count});\n      margin: $gutter-size / 2;\n    }\n  }\n}\n\n// Masonry Image List\n\n@mixin masonry-columns(\n  $column-count,\n  $gutter-size: variables.$masonry-gutter-size,\n  $query: feature-targeting-functions.all()\n) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    column-count: $column-count;\n    column-gap: $gutter-size;\n  }\n\n  .mdc-image-list__item {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      margin-bottom: $gutter-size;\n    }\n  }\n}\n","//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:list\";\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/rtl/mixins\" as rtl-mixins;\n@use \"./variables\";\n@use \"./functions\";\n\n@mixin radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    // Even if $rtl-reflexive is true, only emit RTL styles if we can't easily tell that the given radius is symmetrical\n    $needs-flip: $rtl-reflexive and list.length($radius) > 1;\n\n    @if ($needs-flip) {\n      /* @noflip */\n    }\n\n    border-radius: functions.prop-value($radius);\n\n    @if ($needs-flip) {\n      @include rtl-mixins.rtl {\n        /* @noflip */\n        border-radius: functions.flip-radius(functions.prop-value($radius));\n      }\n    }\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:map\";\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\";\n@use \"./variables\";\n@use \"./functions\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  :root {\n    @include mixins.targets($feat-color) {\n      @each $style in map.keys(variables.$property-values) {\n        --mdc-theme-#{$style}: #{map.get(variables.$property-values, $style)};\n      }\n    }\n  }\n\n  @each $style in map.keys(variables.$property-values) {\n    @if $style != \"background\" and $style != \"surface\" {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(color, $style, true);\n        }\n      }\n    } @else {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(background-color, $style);\n        }\n      }\n    }\n  }\n\n  // CSS rules for using primary and secondary (plus light/dark variants) as background colors.\n  @each $style in (\"primary\", \"secondary\") {\n    .mdc-theme--#{$style}-bg {\n      @include mixins.targets($feat-color) {\n        @include prop(background-color, $style, true);\n      }\n    }\n  }\n}\n\n// Applies the correct theme color style to the specified property.\n// $property is typically color or background-color, but can be any CSS property that accepts color values.\n// $style should be one of the map keys in $mdc-theme-property-values (_variables.scss), or a color value.\n@mixin prop($property, $style, $important: false) {\n  $important-rule: if($important, \"!important\", \"\");\n\n  @if functions.is-var-with-fallback_($style) {\n    #{$property}: functions.get-var-fallback_($style) #{$important-rule};\n    /* @alternate */\n    #{$property}: functions.var_($style) #{$important-rule};\n  } @else if variables.is-valid-theme-prop-value_($style) {\n    #{$property}: $style #{$important-rule};\n  } @else {\n    @if not map.has-key(variables.$property-values, $style) {\n      @error \"Invalid style: '#{$style}'. Choose one of: #{map.keys(variables.$property-values)}\";\n    }\n    $value: map.get(variables.$property-values, $style);\n\n    #{$property}: $value #{$important-rule};\n    /* @alternate */\n    #{$property}: var(--mdc-theme-#{$style}, $value) #{$important-rule};\n  }\n}\n","// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n$standard-gutter-size: 4px !default;\n$masonry-gutter-size: 16px !default;\n$icon-size: 24px !default;\n$text-protection-background-color: rgba(0, 0, 0, .6) !default;\n$text-protection-height: 48px !default;\n$text-protection-horizontal-padding: 16px !default;\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:list\";\n@use \"sass:map\";\n@use \"sass:string\";\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"./variables\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  .mdc-typography {\n    @include base($query: $query);\n  }\n\n  @each $style in map.keys(variables.$styles) {\n    .mdc-typography--#{$style} {\n      @include typography($style, $query: $query);\n    }\n  }\n}\n\n@mixin base($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target($query, typography);\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @include theme-mixins.prop(font-family, (\n      varname: --mdc-typography-font-family,\n      fallback: map.get(variables.$base, 'font-family')\n    ));\n  }\n}\n\n@mixin typography($style, $query: feature-targeting-functions.all(), $exclude-props: ()) {\n  $feat-typography: feature-targeting-functions.create-target($query, typography);\n  $style-props: map.get(variables.$styles, $style);\n\n  @if not map.has-key(variables.$styles, $style) {\n    @error \"Invalid style specified! #{$style} doesn't exist. Choose one of #{map.keys(variables.$styles)}\";\n  }\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @each $key, $value in $style-props {\n      @if list.index($exclude-props, $key) == null {\n        $fallback: $value;\n        @if $key == \"font-family\" {\n          // Each style has its own font-family custom property, but should\n          // fallback to a generic font-family property. This allows\n          // customizing the font-family for all styles or only specific ones.\n          $fallback: (\n            varname: --mdc-typography-font-family,\n            fallback: $fallback\n          );\n        }\n\n        @include theme-mixins.prop($key, (\n          varname: --mdc-typography-#{$style}-#{$key},\n          fallback: $fallback\n        ));\n      }\n    }\n  }\n}\n\n/// Applies antialiasing via font-smoothing to text.\n@mixin smooth-font($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target($query, typography);\n\n  @include feature-targeting-mixins.targets($feat-typography) {\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n  }\n}\n\n// Element must be `display: block` or `display: inline-block` for this to work.\n@mixin overflow-ellipsis($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n}\n\n@mixin baseline-top($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: block;\n    margin-top: 0;\n    /* @alternate */\n    line-height: normal;\n  }\n\n  &::before {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: 0;\n    }\n  }\n}\n\n@mixin baseline-bottom($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    margin-bottom: -1 * $distance;\n  }\n\n  &::after {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: -1 * $distance;\n    }\n  }\n}\n\n@mixin baseline-strut_($distance) {\n  display: inline-block;\n  width: 0;\n  height: $distance;\n  content: \"\";\n}\n"],"sourceRoot":""}