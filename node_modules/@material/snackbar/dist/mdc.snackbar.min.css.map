{"version":3,"sources":["webpack:///./packages/mdc-snackbar/mdc-snackbar.scss","webpack:///./packages/material-components-web/node_modules/@material/theme/_mixins.scss","webpack:///./packages/mdc-snackbar/_variables.scss","webpack:///./packages/material-components-web/node_modules/@material/elevation/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/shape/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/rtl/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/typography/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/button/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/ripple/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/icon-button/_mixins.scss"],"names":[],"mappings":";;;;;;;AAwCE,cAgOE,UARA,WAnNE,aACA,eACA,QACA,SACA,OACA,mBACA,uBACA,sBAGA,oBAUA,0CAgIJ,uBCrHE,sBD+HF,qBC/HE,4BDmJF,uBAEI,eEhMM,CFoMN,4CANJ,uBAOM,gBASN,uBAEI,eE/MM,CFqNV,uBG1JE,oHAoGW,CHkBb,uBI3KE,kBJsCF,kEAII,aAIJ,uBA0LE,2BAOF,4CKKA,kCLFI,oBKzMA,2GA2MJ,kCLEA,8CAEI,sBACA,uBAIJ,8CAEI,oBACA,iBElQI,CFwDR,uBK8LA,iCL1LI,aACA,mBACA,2BACA,sBACA,kDACA,UKtBA,iEA2MJ,iCLlLE,2CAEI,8CACA,UACA,oBAIA,mXACE,CAKN,8CAEI,8CAIA,uDAKN,qBMxCE,kCACA,mCLpBA,+BAEA,2GAFA,kBAEA,0DAFA,oBAEA,6DAFA,gBAEA,yDAFA,6BAEA,0EAFA,wBAEA,6EAFA,4FAEA,mEIkNF,oCLnJI,WACA,YACA,sBACA,SAGA,iBACA,oBK/DA,6DA2MJ,oCLtIA,6BAEI,eACA,2CAIJ,uBAGI,aACA,cACA,mBACA,sBOmGJ,qCN1LE,cO0GF,2DP1GE,yBOkJA,oCAGI,WA0OM,CAxMR,oIAeF,yBAIA,WAyLU,CA7KV,uDAEI,gCAKF,8DAEI,yBAKA,WAqKI,CA/JZ,0CAEI,8BR5IJ,uBChGE,4BO0GF,6DP1GE,uCOkJA,qCAGI,WA0OM,CAxMR,sIAeF,yBAIA,WAyLU,CA7KV,wDAEI,gCAKF,+DAEI,yBAKA,WAqKI,CA/JZ,2CAEI,8BRtIJ,6CS/CE,WACA,YACA,YACA,eAIF,kGAGI,WACA,WP9Gc,CFsJlB,6CKsGA,+BA3MI,6GA2MJ,+B","file":"mdc.snackbar.min.css","sourcesContent":["//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/animation/functions\" as animation-functions;\n@use \"@material/button/mixins\" as button-mixins;\n@use \"@material/icon-button/mixins\" as icon-button-mixins;\n@use \"@material/ripple/mixins\" as ripple-mixins;\n@use \"@material/rtl/mixins\" as rtl-mixins;\n@use \"@material/typography/mixins\" as typography-mixins;\n@use \"@material/elevation/mixins\" as elevation-mixins;\n@use \"@material/shape/mixins\" as shape-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"./variables\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n\n  // postcss-bem-linter: define snackbar\n  .mdc-snackbar {\n    @include z-index(variables.$z-index, $query: $query);\n    @include viewport-margin(variables.$viewport-margin-narrow, $query: $query);\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      display: none;\n      position: fixed;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      align-items: center;\n      justify-content: center;\n      box-sizing: border-box;\n\n      // Ignore mouse events on the root layout element.\n      pointer-events: none;\n\n      // For some reason, iOS Safari displays a tap highlight on the entire snackbar element.\n      // Mobile Safari only supports `rgba` values for this property; named values like\n      // `transparent` are ignored. From Apple's docs:\n      // > This property obeys the alpha value, if specified.\n      // > If you donâ€™t specify an alpha value, Safari on iOS applies a default alpha value to the color.\n      // > To disable tap highlighting, set the alpha value to 0 (invisible).\n      // > If you set the alpha value to 1.0 (opaque), the element is not visible when tapped.\n      // See https://github.com/ben-eb/postcss-colormin/issues/1\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n    }\n  }\n\n  @at-root {\n    @include fill-color(variables.$fill-color, $query: $query);\n    @include label-ink-color(variables.$label-ink-color, $query: $query);\n    @include min-width(variables.$min-width, $query: $query);\n    @include max-width(variables.$max-width, $query: $query);\n    @include elevation(variables.$elevation, $query: $query);\n    @include shape-radius(variables.$shape-radius, $query: $query);\n  }\n\n  .mdc-snackbar--opening,\n  .mdc-snackbar--open,\n  .mdc-snackbar--closing {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      display: flex;\n    }\n  }\n\n  .mdc-snackbar--leading {\n    @include position-leading($query: $query);\n  }\n\n  .mdc-snackbar--stacked {\n    @include layout-stacked($query: $query);\n  }\n\n  .mdc-snackbar__surface {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include rtl-mixins.reflexive-property(padding, 0, variables.$padding);\n\n      display: flex;\n      align-items: center;\n      justify-content: flex-start;\n      box-sizing: border-box;\n      transform: scale(.8);\n      opacity: 0;\n    }\n\n    .mdc-snackbar--open & {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        transform: scale(1);\n        opacity: 1;\n        pointer-events: auto; // Allow mouse events on surface element while snackbar is open\n      }\n\n      @include feature-targeting-mixins.targets($feat-animation) {\n        transition:\n          animation-functions.enter(opacity, variables.$enter-duration),\n          animation-functions.enter(transform, variables.$enter-duration);\n      }\n    }\n\n    .mdc-snackbar--closing & {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        transform: scale(1);\n      }\n\n      @include feature-targeting-mixins.targets($feat-animation) {\n        transition: animation-functions.exit-permanent(opacity, variables.$exit-duration);\n      }\n    }\n  }\n\n  .mdc-snackbar__label {\n    @include typography-mixins.typography(variables.$label-type-scale, $query: $query);\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include rtl-mixins.reflexive-property(padding, 16px, variables.$padding);\n\n      width: 100%;\n      flex-grow: 1;\n      box-sizing: border-box;\n      margin: 0;\n\n      // 14px top/bottom padding needed to make the height 48px.\n      padding-top: 14px;\n      padding-bottom: 14px;\n    }\n  }\n\n  // Used to prevent visual jank when announcing label text to screen readers.\n  // See the `announce()` function in util.js for details.\n  .mdc-snackbar__label::before {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      display: inline;\n      content: attr(data-mdc-snackbar-label-text);\n    }\n  }\n\n  .mdc-snackbar__actions {\n    @include feature-targeting-mixins.targets($feat-structure) {\n\n      display: flex;\n      flex-shrink: 0;\n      align-items: center;\n      box-sizing: border-box;\n    }\n  }\n\n  .mdc-snackbar__action {\n    @include button-mixins.ink-color(variables.$action-ink-color, $query: $query);\n    @include ripple-mixins.states(variables.$action-ink-color, $query: $query);\n  }\n\n  .mdc-snackbar__dismiss {\n    @include icon-button-mixins.ink-color(variables.$dismiss-ink-color, $query: $query);\n  }\n\n  // Two selectors are needed to increase specificity above `.material-icons`.\n  // stylelint-disable-next-line selector-class-pattern\n  .mdc-snackbar__dismiss.mdc-snackbar__dismiss {\n    @include icon-button-mixins.icon-size(variables.$dismiss-icon-size, $query: $query);\n  }\n\n  .mdc-snackbar__action + .mdc-snackbar__dismiss {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include rtl-mixins.reflexive-property(margin, variables.$padding, 0);\n    }\n  }\n  // postcss-bem-linter: end\n}\n\n@mixin fill-color($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  .mdc-snackbar__surface {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(background-color, $color);\n    }\n  }\n}\n\n@mixin label-ink-color($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  .mdc-snackbar__label {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(color, $color);\n    }\n  }\n}\n\n@mixin shape-radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {\n  .mdc-snackbar__surface {\n    @include shape-mixins.radius($radius, $rtl-reflexive, $query: $query);\n  }\n}\n\n@mixin min-width(\n  $min-width,\n  $mobile-breakpoint: variables.$mobile-breakpoint,\n  $query: feature-targeting-functions.all()\n) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  .mdc-snackbar__surface {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      min-width: $min-width;\n\n      // The first media query ensures that snackbars are always 100% width on mobile devices, as required by the spec.\n      // The second media query prevents snackbars from being wider than the viewport for large min-width values.\n      @media (max-width: $mobile-breakpoint), (max-width: $min-width) {\n        min-width: 100%;\n      }\n    }\n  }\n}\n\n@mixin max-width($max-width, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  .mdc-snackbar__surface {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      max-width: $max-width;\n    }\n  }\n}\n\n@mixin elevation($z-index, $query: feature-targeting-functions.all()) {\n  .mdc-snackbar__surface {\n    @include elevation-mixins.elevation($z-index, $query: $query);\n  }\n}\n\n@mixin viewport-margin($margin, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    margin: $margin;\n  }\n}\n\n@mixin z-index($z-index, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    z-index: $z-index;\n  }\n}\n\n@mixin position-leading($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    justify-content: flex-start;\n  }\n}\n\n@mixin layout-stacked($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  .mdc-snackbar__label {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include rtl-mixins.reflexive-property(padding, 16px, 0);\n      padding-bottom: 12px;\n    }\n  }\n\n  .mdc-snackbar__surface {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      flex-direction: column;\n      align-items: flex-start;\n    }\n  }\n\n  .mdc-snackbar__actions {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      align-self: flex-end;\n      margin-bottom: variables.$padding;\n    }\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:map\";\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\";\n@use \"./variables\";\n@use \"./functions\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  :root {\n    @include mixins.targets($feat-color) {\n      @each $style in map.keys(variables.$property-values) {\n        --mdc-theme-#{$style}: #{map.get(variables.$property-values, $style)};\n      }\n    }\n  }\n\n  @each $style in map.keys(variables.$property-values) {\n    @if $style != \"background\" and $style != \"surface\" {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(color, $style, true);\n        }\n      }\n    } @else {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(background-color, $style);\n        }\n      }\n    }\n  }\n\n  // CSS rules for using primary and secondary (plus light/dark variants) as background colors.\n  @each $style in (\"primary\", \"secondary\") {\n    .mdc-theme--#{$style}-bg {\n      @include mixins.targets($feat-color) {\n        @include prop(background-color, $style, true);\n      }\n    }\n  }\n}\n\n// Applies the correct theme color style to the specified property.\n// $property is typically color or background-color, but can be any CSS property that accepts color values.\n// $style should be one of the map keys in $mdc-theme-property-values (_variables.scss), or a color value.\n@mixin prop($property, $style, $important: false) {\n  $important-rule: if($important, \"!important\", \"\");\n\n  @if functions.is-var-with-fallback_($style) {\n    #{$property}: functions.get-var-fallback_($style) #{$important-rule};\n    /* @alternate */\n    #{$property}: functions.var_($style) #{$important-rule};\n  } @else if variables.is-valid-theme-prop-value_($style) {\n    #{$property}: $style #{$important-rule};\n  } @else {\n    @if not map.has-key(variables.$property-values, $style) {\n      @error \"Invalid style: '#{$style}'. Choose one of: #{map.keys(variables.$property-values)}\";\n    }\n    $value: map.get(variables.$property-values, $style);\n\n    #{$property}: $value #{$important-rule};\n    /* @alternate */\n    #{$property}: var(--mdc-theme-#{$style}, $value) #{$important-rule};\n  }\n}\n","//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:color\";\n@use \"@material/theme/functions\";\n@use \"@material/theme/variables\"; // for mdc-theme-prop-value() function\n\n$fill-color: color.mix(variables.prop-value(on-surface), variables.prop-value(surface), 80%) !default;\n$label-ink-color: rgba(variables.prop-value(surface), variables.text-emphasis(high)) !default;\n$action-ink-color: #bb86fc !default;\n$dismiss-ink-color: rgba(variables.prop-value(surface), variables.text-emphasis(high)) !default;\n\n$label-type-scale: body2 !default;\n$dismiss-icon-size: 18px !default;\n$min-width: 344px !default;\n$max-width: 672px !default;\n$mobile-breakpoint: 480px !default;\n$viewport-margin-narrow: 8px !default;\n$viewport-margin-wide: 24px !default;\n$padding: 8px !default;\n\n$elevation: 6 !default;\n$shape-radius: small !default; // Key from $mdc-shape-category-values or CSS length value (e.g., 4px)\n$z-index: 8 !default; // One above mdc-dialog\n\n// These variables need to be kept in sync with the values in constants.js.\n$enter-duration: 150ms !default;\n$exit-duration: 75ms !default;\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:map\";\n@use \"sass:math\";\n@use \"sass:meta\";\n@use \"@material/base/mixins\" as base-mixins;\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"@material/theme/variables\" as theme-variables;\n@use \"./functions\";\n@use \"./variables\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @for $z-value from 0 through 24 {\n    .mdc-elevation--z#{$z-value} {\n      @include elevation($z-value, $query: $query);\n    }\n  }\n\n  .mdc-elevation-transition {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: functions.transition-value();\n    }\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      will-change: variables.$property;\n    }\n  }\n}\n\n///\n/// Called once per application to set up the global default elevation styles.\n///\n@mixin overlay-common($query: feature-targeting-functions.all()) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include overlay-selector_ {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include base-mixins.emit-once(\"mdc-elevation/common/structure\") {\n        position: absolute;\n        border-radius: inherit;\n        opacity: 0;\n        pointer-events: none;\n      }\n    }\n\n    @include feature-targeting-mixins.targets($feat-animation) {\n      @include base-mixins.emit-once(\"mdc-elevation/common/animation\") {\n        transition: functions.overlay-transition-value();\n      }\n    }\n\n    @include base-mixins.emit-once(\"mdc-elevation/common/color\") {\n      @include overlay-fill-color(variables.$overlay-color, $query: $query);\n    }\n  }\n}\n\n///\n/// Sets the shadow of the element.\n///\n/// @param {String} $box-shadow - The shadow to apply to the element.\n///\n@mixin shadow($box-shadow, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    /* @alternate */\n    box-shadow: $box-shadow;\n  }\n}\n\n///\n/// Sets the elevation overlay surface required positioning.\n///\n@mixin overlay-surface-position($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    /* @alternate */\n    position: relative;\n  }\n}\n\n///\n/// Sets the dimensions of the elevation overlay, including positioning and sizing.\n///\n/// @param {Number} $width - The width of the elevation overlay\n/// @param {Number} [$height] - The height of the elevation overlay\n/// @param {Boolean} [$has-content-sizing] - Set to false if the container has no content sizing\n///\n@mixin overlay-dimensions($width, $height: $width, $has-content-sizing: true, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include overlay-selector_ {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      width: $width;\n      height: $height;\n\n      @if $has-content-sizing {\n        top: 0;\n        /* @noflip */\n        left: 0;\n      } @else {\n        top: 50%;\n        /* @noflip */\n        left: 50%;\n        transform: translate(-50%, -50%);\n      }\n    }\n  }\n}\n\n///\n/// Sets the elevation overlay fill color.\n/// Expected to be called directly on the elevation overlay element.\n///\n/// @param {Color} $color - The color of the elevation overlay.\n///\n@mixin overlay-fill-color($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    @include theme-mixins.prop(background-color, $color);\n  }\n}\n\n///\n/// Sets the elevation overlay opacity.\n/// Expected to be called from a parent element.\n///\n/// @param {Number} $opacity - The opacity of the elevation overlay.\n///\n@mixin overlay-opacity($opacity, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include overlay-selector_ {\n    @include feature-targeting-mixins.targets($feat-color) {\n      opacity: $opacity;\n    }\n  }\n}\n\n// Applies the correct CSS rules to an element to give it the elevation specified by $z-value.\n// The $z-value must be between 0 and 24.\n// If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use\n// $opacity-boost.\n@mixin elevation($z-value, $color: variables.$baseline-color, $opacity-boost: 0, $query: feature-targeting-functions.all()) {\n  @if meta.type-of($z-value) != number or not math.is-unitless($z-value) {\n    @error \"$z-value must be a unitless number, but received '#{$z-value}'\";\n  }\n\n  @if $z-value < 0 or $z-value > 24 {\n    @error \"$z-value must be between 0 and 24, but received '#{$z-value}'\";\n  }\n\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  $color: theme-variables.prop-value($color);\n\n  $umbra-z-value: map.get(variables.$umbra-map, $z-value);\n  $penumbra-z-value: map.get(variables.$penumbra-map, $z-value);\n  $ambient-z-value: map.get(variables.$ambient-map, $z-value);\n\n  $umbra-color: rgba($color, variables.$umbra-opacity + $opacity-boost);\n  $penumbra-color: rgba($color, variables.$penumbra-opacity + $opacity-boost);\n  $ambient-color: rgba($color, variables.$ambient-opacity + $opacity-boost);\n\n  $box-shadow: (\n    #{\"#{$umbra-z-value} #{$umbra-color}\"},\n    #{\"#{$penumbra-z-value} #{$penumbra-color}\"},\n    #{$ambient-z-value} $ambient-color,\n  );\n\n  @include shadow($box-shadow, $query: $query);\n}\n\n// Private\n\n///\n/// Sets the elevation overlay transition value.\n///\n/// @param {String} $duration - The duration of the transition.\n/// @param {String} $easing - The easing function for the transition.\n/// @return {String}\n/// @access private\n///\n@mixin overlay-selector_ {\n  .mdc-elevation-overlay {\n    @content;\n  }\n}\n","//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:list\";\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/rtl/mixins\" as rtl-mixins;\n@use \"./variables\";\n@use \"./functions\";\n\n@mixin radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    // Even if $rtl-reflexive is true, only emit RTL styles if we can't easily tell that the given radius is symmetrical\n    $needs-flip: $rtl-reflexive and list.length($radius) > 1;\n\n    @if ($needs-flip) {\n      /* @noflip */\n    }\n\n    border-radius: functions.prop-value($radius);\n\n    @if ($needs-flip) {\n      @include rtl-mixins.rtl {\n        /* @noflip */\n        border-radius: functions.flip-radius(functions.prop-value($radius));\n      }\n    }\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:list\";\n@use \"./variables\";\n\n// Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.\n//\n// Usage Example:\n//\n// ```scss\n// .mdc-foo {\n//   position: absolute;\n//   left: 0;\n//\n//   @include rtl {\n//     left: auto;\n//     right: 0;\n//   }\n//\n//   &__bar {\n//     margin-left: 4px;\n//     @include rtl(\".mdc-foo\") {\n//       margin-left: auto;\n//       margin-right: 4px;\n//     }\n//   }\n// }\n//\n// .mdc-foo--mod {\n//   padding-left: 4px;\n//\n//   @include rtl {\n//     padding-left: auto;\n//     padding-right: 4px;\n//   }\n// }\n// ```\n//\n// Note that this mixin works by checking for an ancestor element with `[dir=\"rtl\"]`.\n// As a result, nested `dir` values are not supported:\n//\n// ```html\n// <html dir=\"rtl\">\n//   <!-- ... -->\n//   <div dir=\"ltr\">\n//     <div class=\"mdc-foo\">Styled incorrectly as RTL!</div>\n//   </div>\n// </html>\n// ```\n//\n// In the future, selectors such as the `:dir` pseudo-class (http://mdn.io/css/:dir) will help us mitigate this.\n@mixin rtl($root-selector: null) {\n  @if (variables.$include) {\n    @if ($root-selector) {\n      @at-root {\n        #{$root-selector}[dir=\"rtl\"] &,\n        [dir=\"rtl\"] #{$root-selector} & {\n          @content;\n        }\n      }\n    } @else {\n      [dir=\"rtl\"] &,\n      &[dir=\"rtl\"] {\n        @content;\n      }\n    }\n  }\n}\n\n// Takes a base box-model property name (`margin`, `border`, `padding`, etc.) along with a\n// default direction (`left` or `right`) and value, and emits rules which apply the given value to the\n// specified direction by default and the opposite direction in RTL.\n//\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-box(margin, left, 8px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: 8px;\n//   margin-right: 0;\n//\n//   @include rtl {\n//     margin-left: 0;\n//     margin-right: 8px;\n//   }\n// }\n// ```\n//\n// whereas:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-box(margin, right, 8px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: 0;\n//   margin-right: 8px;\n//\n//   @include rtl {\n//     margin-left: 8px;\n//     margin-right: 0;\n//   }\n// }\n// ```\n//\n// You can also pass an optional 4th `$root-selector` argument which will be forwarded to `mdc-rtl`,\n// e.g. `@include rtl-reflexive-box(margin, left, 8px, \".mdc-component\")`.\n//\n// Note that this function will always zero out the original value in an RTL context.\n// If you're trying to flip the values, use `mdc-rtl-reflexive-property()` instead.\n@mixin reflexive-box($base-property, $default-direction, $value, $root-selector: null) {\n  @if (list.index((right, left), $default-direction) == null) {\n    @error \"Invalid default direction: '#{$default-direction}'. Please specifiy either 'right' or 'left'.\";\n  }\n\n  $left-value: $value;\n  $right-value: 0;\n\n  @if ($default-direction == right) {\n    $left-value: 0;\n    $right-value: $value;\n  }\n\n  @include reflexive-property($base-property, $left-value, $right-value, $root-selector);\n}\n\n// Takes a base property and emits rules that assign <base-property>-left to <left-value> and\n// <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-property(margin, auto, 12px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: auto;\n//   margin-right: 12px;\n//\n//   @include rtl {\n//     margin-left: 12px;\n//     margin-right: auto;\n//   }\n// }\n// ```\n//\n// An optional 4th `$root-selector` argument can be given, which will be passed to `mdc-rtl`.\n@mixin reflexive-property($base-property, $left-value, $right-value, $root-selector: null) {\n  $prop-left: #{$base-property}-left;\n  $prop-right: #{$base-property}-right;\n\n  @include reflexive($prop-left, $left-value, $prop-right, $right-value, $root-selector);\n}\n\n// Takes an argument specifying a horizontal position property (either \"left\" or \"right\") as well\n// as a value, and applies that value to the specified position in a LTR context, and flips it in a\n// RTL context. For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-position(left, 0);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   left: 0;\n//   right: initial;\n//\n//   @include rtl {\n//     left: initial;\n//     right: 0;\n//   }\n// }\n// ```\n//\n// An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.\n@mixin reflexive-position($position-property, $value, $root-selector: null) {\n  @if (list.index((right, left), $position-property) == null) {\n    @error \"Invalid position #{position-property}. Please specifiy either right or left\";\n  }\n\n  // TODO: \"initial\" is not supported in IE 11. https://caniuse.com/#feat=css-initial-value\n  $left-value: $value;\n  $right-value: initial;\n\n  @if ($position-property == right) {\n    $right-value: $value;\n    $left-value: initial;\n  }\n\n  @include reflexive(left, $left-value, right, $right-value, $root-selector);\n}\n\n// Takes pair of properties with values as arguments and flips it in RTL context.\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive(left, 2px, right, 5px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   left: 2px;\n//   right: 5px;\n//\n//   @include rtl {\n//     right: 2px;\n//     left: 5px;\n//   }\n// }\n// ```\n//\n// An optional fifth `$root-selector` argument may also be given, which is passed to `mdc-rtl`.\n@mixin reflexive(\n  $left-property,\n  $left-value,\n  $right-property,\n  $right-value,\n  $root-selector: null\n) {\n  @include property_($left-property, $left-value);\n  @include property_($right-property, $right-value);\n\n  @include rtl($root-selector) {\n    @include property_($left-property, $right-value);\n    @include property_($right-property, $left-value);\n  }\n}\n\n///\n/// Adds `@noflip` annotation when `$mdc-rtl-include` is true.\n///\n/// @param {String} $property\n/// @param {String} $value\n/// @access private\n///\n@mixin property_($property, $value) {\n  @if variables.$include {\n    /* @noflip */\n  }\n\n  #{$property}: #{$value};\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:list\";\n@use \"sass:map\";\n@use \"sass:string\";\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"./variables\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  .mdc-typography {\n    @include base($query: $query);\n  }\n\n  @each $style in map.keys(variables.$styles) {\n    .mdc-typography--#{$style} {\n      @include typography($style, $query: $query);\n    }\n  }\n}\n\n@mixin base($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target($query, typography);\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @include theme-mixins.prop(font-family, (\n      varname: --mdc-typography-font-family,\n      fallback: map.get(variables.$base, 'font-family')\n    ));\n  }\n}\n\n@mixin typography($style, $query: feature-targeting-functions.all(), $exclude-props: ()) {\n  $feat-typography: feature-targeting-functions.create-target($query, typography);\n  $style-props: map.get(variables.$styles, $style);\n\n  @if not map.has-key(variables.$styles, $style) {\n    @error \"Invalid style specified! #{$style} doesn't exist. Choose one of #{map.keys(variables.$styles)}\";\n  }\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @each $key, $value in $style-props {\n      @if list.index($exclude-props, $key) == null {\n        $fallback: $value;\n        @if $key == \"font-family\" {\n          // Each style has its own font-family custom property, but should\n          // fallback to a generic font-family property. This allows\n          // customizing the font-family for all styles or only specific ones.\n          $fallback: (\n            varname: --mdc-typography-font-family,\n            fallback: $fallback\n          );\n        }\n\n        @include theme-mixins.prop($key, (\n          varname: --mdc-typography-#{$style}-#{$key},\n          fallback: $fallback\n        ));\n      }\n    }\n  }\n}\n\n/// Applies antialiasing via font-smoothing to text.\n@mixin smooth-font($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target($query, typography);\n\n  @include feature-targeting-mixins.targets($feat-typography) {\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n  }\n}\n\n// Element must be `display: block` or `display: inline-block` for this to work.\n@mixin overflow-ellipsis($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n}\n\n@mixin baseline-top($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: block;\n    margin-top: 0;\n    /* @alternate */\n    line-height: normal;\n  }\n\n  &::before {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: 0;\n    }\n  }\n}\n\n@mixin baseline-bottom($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    margin-bottom: -1 * $distance;\n  }\n\n  &::after {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: -1 * $distance;\n    }\n  }\n}\n\n@mixin baseline-strut_($distance) {\n  display: inline-block;\n  width: 0;\n  height: $distance;\n  content: \"\";\n}\n","//\n// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:math\";\n@use \"@material/elevation/mixins\" as elevation-mixins;\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/ripple/mixins\" as ripple-mixins;\n@use \"@material/rtl/mixins\" as rtl-mixins;\n@use \"@material/theme/functions\" as theme-functions;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"@material/touch-target/mixins\" as touch-target-mixins;\n@use \"@material/typography/mixins\" as typography-mixins;\n@use \"@material/shape/mixins\" as shape-mixins;\n@use \"@material/shape/functions\" as shape-functions;\n@use \"@material/density/functions\" as density-functions;\n@use \"./variables\";\n@use \"@material/elevation/functions\" as elevation-functions;\n\n$ripple-target: \".mdc-button__ripple\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  @include without-ripple($query);\n  @include ripple($query);\n}\n\n@mixin theme-baseline($query: feature-targeting-functions.all()) {\n  .mdc-button {\n    @include density(variables.$density-scale, $query: $query);\n  }\n}\n\n// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other\n// button styles. It is recommended that most users use `mdc-button-core-styles` instead.\n@mixin without-ripple($query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include touch-target-mixins.wrapper($query); // COPYBARA_COMMENT_THIS_LINE\n  @include elevation-mixins.overlay-common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  // postcss-bem-linter: define button\n  .mdc-button {\n    @include base_($query);\n    @include shape-radius(small, $query: $query);\n    @include container-fill-color(transparent, $query);\n    @include disabled-container-fill-color(transparent, $query);\n    // The icon CSS class overrides styles defined in the .material-icons CSS\n    // class, which is loaded separately so the order of CSS definitions is not\n    // guaranteed. Therefore, increase specifity by nesting this class to ensure\n    // overrides apply.\n    .mdc-button__icon {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        @include icon_;\n      }\n    }\n\n    .mdc-button__touch {\n      @include touch-target-mixins.touch-target($query: $query);\n    }\n\n    @include ink-color(primary, $query);\n    @include disabled-ink-color(variables.$disabled-ink-color, $query);\n  }\n\n  .mdc-button__label + .mdc-button__icon {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include icon-trailing_;\n    }\n  }\n\n  // stylelint-disable-next-line selector-no-qualifying-type\n  svg.mdc-button__icon {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include icon-svg_;\n    }\n  }\n\n  .mdc-button--raised,\n  .mdc-button--unelevated,\n  .mdc-button--outlined {\n    .mdc-button__icon {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        // Icons inside contained buttons have different styles due to increased button padding\n        @include icon-contained_;\n      }\n    }\n\n    .mdc-button__label + .mdc-button__icon {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        @include icon-contained-trailing_;\n      }\n    }\n  }\n\n  .mdc-button--raised,\n  .mdc-button--unelevated {\n    @include filled_($query);\n  }\n\n  .mdc-button--raised {\n    @include raised_($query);\n  }\n\n  .mdc-button--outlined {\n    @include outlined_($query);\n  }\n\n  .mdc-button--touch {\n    @include touch-target-mixins.margin(\n      $component-height: variables.$height, $query: $query);\n  }\n  // postcss-bem-linter: end\n}\n\n// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other\n// button styles. It is recommended that most users use `mdc-button-core-styles` instead.\n@mixin ripple($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  .mdc-button {\n    @include ripple-mixins.surface($query: $query, $ripple-target: $ripple-target);\n    @include ripple-mixins.radius-bounded(\n      $query: $query, $ripple-target: $ripple-target);\n    @include ripple-mixins.states(\n      $color: primary, $query: $query, $ripple-target: $ripple-target);\n\n    #{$ripple-target} {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        position: absolute;\n        // Ripple needs content-box as the box sizing and box-sizing: border-box\n        // is often set as a default, so we override that here.\n        box-sizing: content-box;\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n      }\n    }\n\n    // Ripple targets inside outlined buttons set their own `top`/`left`,\n    // depending on the border width.\n    &:not(.mdc-button--outlined) #{$ripple-target} {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        top: 0;\n        left: 0;\n      }\n    }\n  }\n\n  .mdc-button--raised,\n  .mdc-button--unelevated {\n    @include ripple-mixins.states(\n      $color: on-primary, $query: $query, $ripple-target: $ripple-target);\n  }\n}\n\n@mixin filled-accessible($container-fill-color, $query: feature-targeting-functions.all()) {\n  $fill-tone: theme-functions.tone($container-fill-color);\n\n  @include container-fill-color($container-fill-color, $query);\n\n  @if ($fill-tone == \"dark\") {\n    @include ink-color(text-primary-on-dark, $query);\n    @include ripple-mixins.states(\n      $color: text-primary-on-dark, $query: $query, $ripple-target: $ripple-target);\n  } @else {\n    @include ink-color(text-primary-on-light, $query);\n    @include ripple-mixins.states(\n      $color: text-primary-on-light, $query: $query, $ripple-target: $ripple-target);\n  }\n}\n\n///\n/// Sets the container fill color to the given color for an enabled button.\n/// @param {Color} $color - The desired container fill color.\n///\n@mixin container-fill-color($color, $query: feature-targeting-functions.all()) {\n  // :not(:disabled) is used to support link styled as button\n  // as link does not support :enabled style\n  &:not(:disabled) {\n    @include container-fill-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the container fill color to the given color for a disabled button.\n/// @param {Color} $color - The desired container fill color.\n///\n@mixin disabled-container-fill-color($color, $query: feature-targeting-functions.all()) {\n  &:disabled {\n    @include container-fill-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the outline color to the given color for an enabled button.\n/// @param {Color} $color - The desired outline color.\n///\n@mixin outline-color($color, $query: feature-targeting-functions.all()) {\n  &:not(:disabled) {\n    @include outline-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the outline color to the given color for a disabled button.\n/// @param {Color} $color - The desired outline color.\n///\n@mixin disabled-outline-color($color, $query: feature-targeting-functions.all()) {\n  &:disabled {\n    @include outline-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the icon color to the given color for an enabled button.\n/// @param {Color} $color - The desired icon color.\n///\n@mixin icon-color($color, $query: feature-targeting-functions.all()) {\n  &:not(:disabled) {\n    @include icon-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the icon color to the given color for a disabled button.\n/// @param {Color} $color - The desired icon color.\n///\n@mixin disabled-icon-color($color, $query: feature-targeting-functions.all()) {\n  &:disabled {\n    @include icon-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the ink color to the given color for an enabled button,\n/// and sets the icon color to the given color unless `mdc-button-icon-color`\n/// is also used.\n/// @param {Color} $color - The desired ink color.\n///\n@mixin ink-color($color, $query: feature-targeting-functions.all()) {\n  &:not(:disabled) {\n    @include ink-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the ink color to the given color for a disabled button,\n/// and sets the icon color to the given color unless `mdc-button-icon-color`\n/// is also used.\n/// @param {Color} $color - The desired ink color.\n///\n@mixin disabled-ink-color($color, $query: feature-targeting-functions.all()) {\n  &:disabled {\n    @include ink-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets density scale for button.\n///\n/// @param {Number | String} $density-scale - Density scale value for component. Supported density scale values `-3`,\n///     `-2`, `-1`, `0`.\n///\n@mixin density($density-scale, $query: feature-targeting-functions.all()) {\n\n  $height: density-functions.prop-value(\n    $density-config: variables.$density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include height($height, $query: $query);\n\n  @if $density-scale != 0 {\n    @include touch-target-reset_($query: $query);\n  }\n}\n\n///\n/// Resets touch target-related styles. This is called from the density mixin to\n/// automatically remove the increased touch target, since dense components\n/// don't have the same default a11y requirements.\n/// @access private\n///\n@mixin touch-target-reset_($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  .mdc-button__touch {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      display: none;\n    }\n  }\n}\n\n///\n/// Sets custom height for button.\n/// @param {Number} $height - Height of button in `px`.\n///\n@mixin height($height, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    height: $height;\n  }\n}\n\n@mixin shape-radius($radius,\n$rtl-reflexive: false,\n$density-scale: variables.$density-scale,\n$query: feature-targeting-functions.all()) {\n\n  $height: density-functions.prop-value(\n    $density-config: variables.$density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n  $resolved-radius: shape-functions.resolve-percentage-radius($height, $radius);\n\n  @include shape-mixins.radius($resolved-radius, $rtl-reflexive, $query: $query);\n\n  #{$ripple-target} {\n    @include shape-mixins.radius($resolved-radius, $rtl-reflexive, $query: $query);\n  }\n}\n\n///\n/// Sets horizontal padding to the given number.\n/// @param {Number} $padding\n///\n@mixin horizontal-padding($padding, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    // $padding should be a single value; enforce it by specifying all 4 sides in the output\n    padding: 0 $padding 0 $padding;\n  }\n}\n\n@mixin outline-width(\n  $outline-width,\n  $padding: variables.$contained-horizontal-padding,\n  $query: feature-targeting-functions.all()\n) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n  // Note: Adjust padding to maintain consistent width with non-outlined buttons\n  $padding-value: math.max($padding - $outline-width, 0);\n\n  @include horizontal-padding($padding-value, $query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    border-width: $outline-width;\n  }\n\n  #{$ripple-target} {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      top: -$outline-width;\n      left: -$outline-width;\n      border: $outline-width solid transparent;\n    }\n  }\n}\n\n///\n/// Sets the button label to overflow as ellipsis\n///\n@mixin label-overlow-ellipsis($query: feature-targeting-functions.all()) {\n  .mdc-button__label {\n    @include typography-mixins.overflow-ellipsis($query: $query);\n  }\n}\n\n@mixin base_($query) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include typography-mixins.typography(button, $query);\n  @include horizontal-padding(variables.$horizontal-padding, $query);\n  @include elevation-mixins.overlay-surface-position($query: $query);\n  @include elevation-mixins.overlay-dimensions(100%, $query: $query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: inline-flex;\n    // position: relative; already set in mdc-elevation-overlay-surface-position\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    min-width: 64px;\n    border: none;\n    outline: none;\n    /* @alternate */\n    line-height: inherit;\n    user-select: none;\n    -webkit-appearance: none;\n    // Even though `visible` is the default, IE 11 computes the property as\n    // `hidden` in some cases, unless it's explicitly defined here.\n    overflow: visible;\n    vertical-align: middle;\n  }\n\n  &::-moz-focus-inner {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      padding: 0;\n      border: 0;\n    }\n  }\n\n  // postcss-bem-linter: ignore\n  &:active {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      outline: none;\n    }\n  }\n\n  &:hover {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      cursor: pointer;\n    }\n  }\n\n  &:disabled {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      cursor: default;\n      pointer-events: none;\n    }\n  }\n}\n\n@mixin icon_ {\n  @include rtl-mixins.reflexive-box(margin, right, 8px);\n\n  display: inline-block;\n  width: 18px;\n  height: 18px;\n  font-size: 18px;\n  vertical-align: top;\n}\n\n@mixin icon-trailing_ {\n  @include rtl-mixins.reflexive-box(margin, left, 8px);\n}\n\n@mixin icon-svg_ {\n  fill: currentColor;\n}\n\n@mixin icon-contained_ {\n  @include rtl-mixins.reflexive-property(margin, -4px, 8px);\n}\n\n@mixin icon-contained-trailing_ {\n  @include rtl-mixins.reflexive-property(margin, 8px, -4px);\n}\n\n@mixin outlined_($query) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include outline-width(variables.$outlined-border-width, $query: $query);\n  @include outline-color(variables.$outline-color, $query);\n  @include disabled-outline-color(variables.$disabled-container-color, $query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    border-style: solid;\n  }\n}\n\n@mixin filled_($query) {\n  @include horizontal-padding(variables.$contained-horizontal-padding, $query);\n  @include container-fill-color(primary, $query);\n  @include ink-color(on-primary, $query);\n  @include disabled-container-fill-color(variables.$disabled-container-color, $query);\n  @include disabled-ink-color(variables.$disabled-ink-color, $query);\n}\n\n@mixin raised_($query) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include elevation-mixins.elevation(2, $query: $query);\n\n  &:hover,\n  &:focus {\n    @include elevation-mixins.elevation(4, $query: $query);\n  }\n\n  &:active {\n    @include elevation-mixins.elevation(8, $query: $query);\n  }\n\n  &:disabled {\n    @include elevation-mixins.elevation(0, $query: $query);\n  }\n\n  @include feature-targeting-mixins.targets($feat-animation) {\n    transition: elevation-functions.transition-value();\n  }\n}\n\n///\n/// Sets the container fill color to the given color. This mixin should be\n/// wrapped in a selector that qualifies button state.\n/// @access private\n///\n@mixin container-fill-color_($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    @include theme-mixins.prop(background-color, $color);\n  }\n}\n\n///\n/// Sets the outline color to the given color. This mixin should be\n/// wrapped in a selector that qualifies button state.\n/// @access private\n///\n@mixin outline-color_($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    @include theme-mixins.prop(border-color, $color);\n  }\n}\n\n///\n/// Sets the icon color to the given color. This mixin should be\n/// wrapped in a selector that qualifies button state.\n/// @access private\n///\n@mixin icon-color_($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  .mdc-button__icon {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(color, $color);\n    }\n  }\n}\n\n///\n/// Sets the ink color to the given color. This mixin should be\n/// wrapped in a selector that qualifies button state.\n/// @access private\n///\n@mixin ink-color_($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    @include theme-mixins.prop(color, $color);\n  }\n}\n","//\n// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:color\";\n@use \"sass:map\";\n@use \"@material/animation/functions\" as functions2;\n@use \"@material/animation/variables\" as variables2;\n@use \"@material/base/mixins\" as base-mixins;\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"./functions\";\n@use \"./keyframes\";\n@use \"./variables\";\n@use \"@material/theme/variables\" as theme-variables;\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  // postcss-bem-linter: define ripple-surface\n\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  .mdc-ripple-surface {\n    @include surface($query: $query);\n    @include states($query: $query);\n    @include radius-bounded($query: $query);\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: relative;\n      outline: none;\n      overflow: hidden;\n    }\n\n    &[data-mdc-ripple-is-unbounded] {\n      @include radius-unbounded($query: $query);\n\n      @include feature-targeting-mixins.targets($feat-structure) {\n        overflow: visible;\n      }\n    }\n\n    &--primary {\n      @include states(primary, $query: $query);\n    }\n\n    &--accent {\n      @include states(secondary, $query: $query);\n    }\n  }\n\n  // postcss-bem-linter: end\n}\n\n@mixin common($query: feature-targeting-functions.all()) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n\n  // Ensure that styles needed by any component using MDC Ripple are emitted, but only once.\n  // (Every component using MDC Ripple imports these mixins, but doesn't necessarily import\n  // mdc-ripple.scss.)\n  @include feature-targeting-mixins.targets($feat-animation) {\n    @include base-mixins.emit-once(\"mdc-ripple/common/animation\") {\n      @include keyframes.keyframes_;\n    }\n  }\n}\n\n@mixin surface($query: feature-targeting-functions.all(), $ripple-target: \"&\") {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    --mdc-ripple-fg-size: 0;\n    --mdc-ripple-left: 0;\n    --mdc-ripple-top: 0;\n    --mdc-ripple-fg-scale: 1;\n    --mdc-ripple-fg-translate-end: 0;\n    --mdc-ripple-fg-translate-start: 0;\n\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n    // !!DO NOT REMOVE!! mdc-ripple-will-change-replacer\n  }\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: absolute;\n      border-radius: 50%;\n      opacity: 0;\n      pointer-events: none;\n      content: \"\";\n    }\n  }\n\n  #{$ripple-target}::before {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      // Also transition background-color to avoid unnatural color flashes when toggling activated/selected state\n      transition:\n        opacity variables.$states-wash-duration linear,\n        background-color variables.$states-wash-duration linear;\n    }\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      z-index: 1; // Ensure that the ripple wash for hover/focus states is displayed on top of positioned child elements\n    }\n  }\n\n  // Common styles for upgraded surfaces (some of these depend on custom properties set via JS or other mixins)\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::before {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        transform: scale(var(--mdc-ripple-fg-scale, 1));\n      }\n    }\n\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        top: 0;\n        /* @noflip */\n        left: 0;\n        transform: scale(0);\n        transform-origin: center center;\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--unbounded {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        top: var(--mdc-ripple-top, 0);\n        /* @noflip */\n        left: var(--mdc-ripple-left, 0);\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--foreground-activation {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        animation:\n          mdc-ripple-fg-radius-in variables.$translate-duration forwards,\n          mdc-ripple-fg-opacity-in variables.$fade-in-duration forwards;\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--foreground-deactivation {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        animation: mdc-ripple-fg-opacity-out variables.$fade-out-duration;\n      }\n\n      @include feature-targeting-mixins.targets($feat-structure) {\n        // Retain transform from mdc-ripple-fg-radius-in activation\n        transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n      }\n    }\n  }\n}\n\n@mixin states-base-color(\n  $color, $query: feature-targeting-functions.all(), $ripple-target: \"&\") {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @if color.alpha(theme-variables.prop-value($color)) > 0 {\n        @include theme-mixins.prop(background-color, $color);\n      } @else {\n        // If a color with 0 alpha is specified, don't render the ripple pseudo-elements at all.\n        // This avoids unnecessary transitions and overflow.\n        content: none;\n      }\n    }\n  }\n}\n\n///\n/// Customizes ripple opacities in `hover`, `focus`, or `press` states\n/// @param {map} $opacity-map - map specifying custom opacity of zero or more states\n/// @param {bool} $has-nested-focusable-element - whether the component contains a focusable element in the root\n///\n@mixin states-opacities($opacity-map: (), $has-nested-focusable-element: false, $query: feature-targeting-functions.all()) {\n  // Ensure sufficient specificity to override base state opacities\n  @if map.has-key($opacity-map, hover) {\n    @include states-hover-opacity(map.get($opacity-map, hover), $query: $query);\n  }\n\n  @if map.has-key($opacity-map, focus) {\n    @include states-focus-opacity(map.get($opacity-map, focus), $has-nested-focusable-element, $query: $query);\n  }\n\n  @if map.has-key($opacity-map, press) {\n    @include states-press-opacity(map.get($opacity-map, press), $query: $query);\n  }\n}\n\n@mixin states-hover-opacity(\n  $opacity, $query: feature-targeting-functions.all(), $ripple-target: \"&\") {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Background wash styles, for both CSS-only and upgraded stateful surfaces\n  &:hover {\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $opacity;\n      }\n    }\n  }\n}\n\n@mixin states-focus-opacity(\n  $opacity,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: \"&\") {\n\n  // Focus overrides hover by reusing the ::before pseudo-element.\n  // :focus-within generally works on non-MS browsers and matches when a *child* of the element has focus.\n  // It is useful for cases where a component has a focusable element within the root node, e.g. text field,\n  // but undesirable in general in case of nested stateful components.\n  // We use a modifier class for JS-enabled surfaces to support all use cases in all browsers.\n  @if $has-nested-focusable-element {\n    // JS-enabled selectors.\n    &.mdc-ripple-upgraded--background-focused,\n    &.mdc-ripple-upgraded:focus-within,\n    // CSS-only selectors.\n    &:not(.mdc-ripple-upgraded):focus,\n    &:not(.mdc-ripple-upgraded):focus-within {\n      #{$ripple-target}::before {\n        @include states-focus-opacity-properties_(\n          $opacity: $opacity, $query: $query);\n      }\n    }\n  } @else {\n    // JS-enabled selectors.\n    &.mdc-ripple-upgraded--background-focused,\n    // CSS-only selectors.\n    &:not(.mdc-ripple-upgraded):focus {\n      #{$ripple-target}::before {\n        @include states-focus-opacity-properties_(\n          $opacity: $opacity, $query: $query);\n      }\n    }\n  }\n}\n\n@mixin states-focus-opacity-properties_($opacity, $query) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Note that this duration is only effective on focus, not blur\n  @include feature-targeting-mixins.targets($feat-animation) {\n    transition-duration: 75ms;\n  }\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin states-press-opacity($opacity, $query: feature-targeting-functions.all(), $ripple-target: \"&\") {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Styles for non-upgraded (CSS-only) stateful surfaces\n\n  &:not(.mdc-ripple-upgraded) {\n    // Apply press additively by using the ::after pseudo-element\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        transition: opacity variables.$fade-out-duration linear;\n      }\n    }\n\n    &:active {\n      #{$ripple-target}::after {\n        @include feature-targeting-mixins.targets($feat-animation) {\n          transition-duration: variables.$fade-in-duration;\n        }\n\n        // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n        @include feature-targeting-mixins.targets($feat-color) {\n          opacity: $opacity;\n        }\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    @include feature-targeting-mixins.targets($feat-color) {\n      --mdc-ripple-fg-opacity: #{$opacity};\n    }\n  }\n}\n\n// Simple mixin for base states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states(\n  $color: theme-variables.prop-value(on-surface),\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: \"&\",\n) {\n  @include states-interactions_(\n    $color: $color,\n    $has-nested-focusable-element: $has-nested-focusable-element,\n    $query: $query,\n    $ripple-target: $ripple-target);\n}\n\n// Simple mixin for activated states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states-activated(\n  $color, $has-nested-focusable-element: false, $query: feature-targeting-functions.all(), $ripple-target: \"&\") {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $activated-opacity: functions.states-opacity($color, activated);\n\n  &--activated {\n    // Stylelint seems to think that '&' qualifies as a type selector here?\n    // stylelint-disable-next-line selector-max-type\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent.\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $activated-opacity;\n      }\n    }\n\n    @include states-interactions_(\n      $color: $color,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $opacity-modifier: $activated-opacity,\n      $query: $query,\n      $ripple-target: $ripple-target);\n  }\n}\n\n// Simple mixin for selected states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states-selected(\n  $color,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: \"&\") {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $selected-opacity: functions.states-opacity($color, selected);\n\n  &--selected {\n    // stylelint-disable-next-line selector-max-type\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent.\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $selected-opacity;\n      }\n    }\n\n    @include states-interactions_(\n      $color: $color,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $opacity-modifier: $selected-opacity,\n      $query: $query,\n      $ripple-target: $ripple-target);\n  }\n}\n\n@mixin radius-bounded(\n  $radius: 100%, $query: feature-targeting-functions.all(), $ripple-target: \"&\") {\n  $feat-struture: feature-targeting-functions.create-target($query, structure);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-struture) {\n      top: calc(50% - #{$radius});\n      /* @noflip */\n      left: calc(50% - #{$radius});\n      width: $radius * 2;\n      height: $radius * 2;\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n  }\n}\n\n@mixin radius-unbounded(\n  $radius: 100%, $query: feature-targeting-functions.all(), $ripple-target: \"&\") {\n  $feat-struture: feature-targeting-functions.create-target($query, structure);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-struture) {\n      top: calc(50% - #{$radius / 2});\n      /* @noflip */\n      left: calc(50% - #{$radius / 2});\n      width: $radius;\n      height: $radius;\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::before,\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        top: var(--mdc-ripple-top, calc(50% - #{$radius / 2}));\n        /* @noflip */\n        left: var(--mdc-ripple-left, calc(50% - #{$radius / 2}));\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n  }\n}\n\n@mixin states-interactions_(\n  $color,\n  $has-nested-focusable-element,\n  $opacity-modifier: 0,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: \"&\",\n) {\n  @include target-selector($ripple-target) {\n    @include states-base-color($color, $query);\n  }\n\n  @include states-hover-opacity(\n    $opacity: functions.states-opacity($color, hover) + $opacity-modifier,\n    $query: $query,\n    $ripple-target: $ripple-target);\n  @include states-focus-opacity(\n    $opacity: functions.states-opacity($color, focus) + $opacity-modifier,\n    $has-nested-focusable-element: $has-nested-focusable-element,\n    $query: $query,\n    $ripple-target: $ripple-target,\n  );\n  @include states-press-opacity(\n    $opacity: functions.states-opacity($color, press) + $opacity-modifier,\n    $query: $query,\n    $ripple-target: $ripple-target);\n}\n\n// Wraps content in the `ripple-target` selector if it exists.\n@mixin target-selector($ripple-target: \"&\") {\n  @if $ripple-target == \"&\" {\n    @content;\n  } @else {\n    #{$ripple-target} {\n      @content;\n    }\n  }\n}\n\n// Common styles for a ripple target element.\n// Used for components which have an inner ripple target element.\n@mixin target-common($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    // Necessary for clicks on other inner elements (e.g. close icon in chip)\n    // to go through.\n    pointer-events: none;\n  }\n}\n","//\n// Copyright 2018 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:math\";\n@use \"@material/density/functions\" as density-functions;\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/ripple/mixins\" as ripple-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"./variables\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  @include without-ripple($query);\n  @include ripple($query);\n}\n\n@mixin without-ripple($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  // postcss-bem-linter: define icon-button\n  .mdc-icon-button {\n    @include base_($query: $query);\n    @include density(0, $query: $query);\n  }\n\n  .mdc-icon-button__icon {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      display: inline-block;\n    }\n\n    // stylelint-disable-next-line plugin/selector-bem-pattern\n    &.mdc-icon-button__icon--on {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        display: none;\n      }\n    }\n  }\n\n  .mdc-icon-button--on {\n    .mdc-icon-button__icon {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        display: none;\n      }\n\n      // stylelint-disable-next-line plugin/selector-bem-pattern\n      &.mdc-icon-button__icon--on {\n        @include feature-targeting-mixins.targets($feat-structure) {\n          display: inline-block;\n        }\n      }\n    }\n  }\n  // postcss-bem-linter: end\n}\n\n@mixin ripple($query: feature-targeting-functions.all()) {\n  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  .mdc-icon-button {\n    @include ripple-mixins.surface($query: $query);\n    @include ripple-mixins.radius-unbounded($query: $query);\n    @include ripple-mixins.states($query: $query);\n  }\n}\n\n///\n/// Sets the density scale for icon button.\n///\n/// @param {Number | String} $density-scale - Density scale value for component.\n///     Supported density scale values range from `-5` to `0`, with `0` being the default.\n///\n@mixin density($density-scale, $query: feature-targeting-functions.all()) {\n  $size: density-functions.prop-value(\n    $density-config: variables.$density-config,\n    $density-scale: $density-scale,\n    $property-name: size,\n  );\n\n  @include size($size, $query: $query);\n}\n\n///\n/// Sets the size of the icon-button.\n///\n/// @param {Number} $size - Size value for icon-button.\n///     Size will set the width, height, and padding for the overall component.\n///\n@mixin size($size, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    width: $size;\n    height: $size;\n    padding: ($size - variables.$icon-size) / 2;\n  }\n}\n\n///\n/// Sets the width, height and padding of icon button. Also changes the size of\n/// the icon itself based on button size.\n///\n/// @param {Number} $width - Width value for icon-button.\n/// @param {Number} $height - Height value for icon-button. (default: $width)\n/// @param {Number} $padding - Padding value for icon-button. (default: max($width, $height) / 2)\n/// @deprecated\n///     This mixin provides too much of low level customization.\n///     Please use mdc-icon-button-size instead.\n///\n@mixin icon-size($width, $height: $width, $padding: math.max($width,$height) / 2, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    width: $width + $padding * 2;\n    height: $height + $padding * 2;\n    padding: $padding;\n    font-size: math.max($width, $height);\n  }\n\n  // stylelint-disable-next-line selector-max-type\n  svg,\n  img {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      width: $width;\n      height: $height;\n    }\n  }\n}\n\n///\n/// Sets the font color and the ripple color to the provided color value.\n/// @param {Color} $color - The desired font and ripple color.\n///\n@mixin ink-color($color, $query: feature-targeting-functions.all()) {\n  @include ink-color_($color, $query: $query);\n  @include ripple-mixins.states($color, $query: $query);\n}\n\n///\n/// Sets the font color to the provided color value for a disabled icon button.\n/// @param {Color} $color - The desired font color.\n///\n@mixin disabled-ink-color($color, $query: feature-targeting-functions.all()) {\n  @include if-disabled_ {\n    @include ink-color_($color, $query: $query);\n  }\n}\n\n@mixin base_($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: inline-block;\n    position: relative;\n    box-sizing: border-box;\n    border: none;\n    outline: none;\n    background-color: transparent;\n    fill: currentColor;\n    color: inherit;\n    font-size: variables.$icon-size;\n    text-decoration: none;\n    cursor: pointer;\n    user-select: none;\n  }\n\n  // stylelint-disable-next-line selector-max-type\n  svg,\n  img {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      width: variables.$icon-size;\n      height: variables.$icon-size;\n    }\n  }\n\n  @include disabled-ink-color(text-disabled-on-light, $query: $query);\n\n  @include if-disabled_ {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      cursor: default;\n      pointer-events: none;\n    }\n  }\n}\n\n///\n/// Sets the font color to the provided color value. This can be wrapped in\n/// a state qualifier such as `mdc-icon-button-if-disabled_`.\n/// @access private\n///\n@mixin ink-color_($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    @include theme-mixins.prop(color, $color);\n  }\n}\n\n///\n/// Helps style the icon button in its disabled state.\n/// @access private\n///\n@mixin if-disabled_ {\n  &:disabled {\n    @content;\n  }\n}\n"],"sourceRoot":""}