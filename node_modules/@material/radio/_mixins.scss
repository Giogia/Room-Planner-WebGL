//
// Copyright 2016 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@use "sass:map";
@use "@material/animation/functions" as functions2;
@use "@material/density/functions" as density-functions;
@use "@material/feature-targeting/functions" as feature-targeting-functions;
@use "@material/feature-targeting/mixins" as feature-targeting-mixins;
@use "@material/ripple/mixins" as ripple-mixins;
@use "@material/ripple/variables" as ripple-variables;
@use "@material/theme/mixins" as theme-mixins;
@use "@material/theme/variables" as variables2;
@use "@material/touch-target/mixins" as touch-target-mixins;
@use "@material/touch-target/variables" as touch-target-variables;
@use "./functions";
@use "./variables";

$ripple-target: ".mdc-radio__ripple";

///
/// Radio core styles.
///
@mixin core-styles($query: feature-targeting-functions.all()) {
  @include without-ripple($query);
  @include ripple($query);
}

// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other
// radio styles. It is recommended that most users use `mdc-radio-core-styles` instead.
@mixin without-ripple($query: feature-targeting-functions.all()) {
  // postcss-bem-linter: define radio

  $feat-animation: feature-targeting-functions.create-target($query, animation);
  $feat-color: feature-targeting-functions.create-target($query, color);
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include touch-target-mixins.wrapper($query); // COPYBARA_COMMENT_THIS_LINE

  .mdc-radio {
    @include unchecked-stroke-color(variables.$unchecked-color, $query: $query);
    @include checked-stroke-color(variables.$baseline-theme-color, $query: $query);
    @include ink-color(variables.$baseline-theme-color, $query: $query);
    @include disabled-unchecked-stroke-color(variables.$disabled-circle-color, $query: $query);
    @include disabled-checked-stroke-color(variables.$disabled-circle-color, $query: $query);
    @include disabled-ink-color(variables.$disabled-circle-color, $query: $query);
    @include focus-indicator-color(variables.$baseline-theme-color, $query: $query);
    @include density(variables.$density-scale, $query: $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline-block;
      position: relative;
      flex: 0 0 auto;
      box-sizing: content-box;
      width: variables.$icon-size;
      height: variables.$icon-size;
      cursor: pointer;
      /* @alternate */
      will-change: opacity, transform, border-color, color;
    }

    // Container for radio circles and ripple.
    &__background {
      @include feature-targeting-mixins.targets($feat-structure) {
        display: inline-block;
        position: relative;
        box-sizing: border-box;
        width: variables.$icon-size;
        height: variables.$icon-size;
      }

      &::before {
        @include feature-targeting-mixins.targets($feat-structure) {
          position: absolute;
          transform: scale(0, 0);
          border-radius: 50%;
          opacity: 0;
          pointer-events: none;
          content: "";
        }

        @include feature-targeting-mixins.targets($feat-animation) {
          transition: functions.exit(opacity), functions.exit(transform);
        }
      }
    }

    &__outer-circle {
      @include feature-targeting-mixins.targets($feat-structure) {
        position: absolute;
        top: 0;
        left: 0;
        box-sizing: border-box;
        width: 100%;
        height: 100%;
        border-width: 2px;
        border-style: solid;
        border-radius: 50%;
      }

      @include feature-targeting-mixins.targets($feat-animation) {
        transition: functions.exit(border-color);
      }
    }

    &__inner-circle {
      @include feature-targeting-mixins.targets($feat-structure) {
        position: absolute;
        top: 0;
        left: 0;
        box-sizing: border-box;
        width: 100%;
        height: 100%;
        transform: scale(0, 0);
        border-width: 10px;
        border-style: solid;
        border-radius: 50%;
      }

      @include feature-targeting-mixins.targets($feat-animation) {
        transition:
          functions.exit(transform),
          functions.exit(border-color);
      }
    }

    &__native-control {
      @include feature-targeting-mixins.targets($feat-structure) {
        position: absolute;
        margin: 0;
        padding: 0;
        opacity: 0;
        cursor: inherit;
        z-index: 1;
      }
    }

    &--touch {
      @include touch-target-mixins.margin(
        $component-height: variables.$ripple-size,
        $component-width: variables.$ripple-size,
        $query: $query);
      @include touch-target($size: touch-target-variables.$height, $query: $query);
    }
  }

  .mdc-radio__native-control:checked,
  .mdc-radio__native-control:disabled {
    + .mdc-radio__background {
      @include feature-targeting-mixins.targets($feat-animation) {
        transition:
          functions.enter(opacity),
          functions.enter(transform);
      }

      .mdc-radio__outer-circle {
        @include feature-targeting-mixins.targets($feat-animation) {
          transition: functions.enter(border-color);
        }
      }

      .mdc-radio__inner-circle {
        @include feature-targeting-mixins.targets($feat-animation) {
          transition:
            functions.enter(transform),
            functions.enter(border-color);
        }
      }
    }
  }

  .mdc-radio--disabled {
    @include feature-targeting-mixins.targets($feat-structure) {
      cursor: default;
      pointer-events: none;
    }
  }

  .mdc-radio__native-control:checked {
    + .mdc-radio__background {
      .mdc-radio__inner-circle {
        @include feature-targeting-mixins.targets($feat-structure) {
          transform: scale(.5);
        }

        @include feature-targeting-mixins.targets($feat-animation) {
          transition:
            functions.enter(transform),
            functions.enter(border-color);
        }
      }
    }
  }

  .mdc-radio__native-control:disabled,
  [aria-disabled="true"] .mdc-radio__native-control {
    + .mdc-radio__background {
      @include feature-targeting-mixins.targets($feat-structure) {
        cursor: default;
      }
    }
  }

  .mdc-radio__native-control:focus {
    + .mdc-radio__background::before {
      @include feature-targeting-mixins.targets($feat-structure) {
        transform: scale(1);
        opacity: map.get(ripple-variables.$dark-ink-opacities, focus);
      }

      @include feature-targeting-mixins.targets($feat-animation) {
        transition:
          functions.enter(opacity),
          functions.enter(transform);
      }
    }
  }

  // postcss-bem-linter: end
}

// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other
// radio styles. It is recommended that most users use `mdc-radio-core-styles` instead.
@mixin ripple($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE

  .mdc-radio {
    @include ripple-mixins.surface($query: $query, $ripple-target: $ripple-target);
    @include ripple-mixins.radius-unbounded($query: $query, $ripple-target: $ripple-target);
    @include ripple-mixins.states(
      $color: variables.$baseline-theme-color, $query: $query, $ripple-target: $ripple-target);

    &.mdc-ripple-upgraded--background-focused {
      .mdc-radio__background::before {
        @include feature-targeting-mixins.targets($feat-structure) {
          content: none;
        }
      }
    }
  }

  #{$ripple-target} {
    @include ripple-mixins.target-common($query: $query);
  }
}

///
/// Sets the stroke color of an unchecked, enabled radio button.
/// @param {Color} $color - The desired stroke color.
///
@mixin unchecked-stroke-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled-unchecked_ {
    @include stroke-color_($color, $query: $query);
  }
}

///
/// Sets the stroke color of a checked, enabled radio button.
/// @param {Color} $color - The desired stroke color.
///
@mixin checked-stroke-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled-checked_ {
    @include stroke-color_($color, $query:$query);
  }
}

///
/// Sets the ink color of an enabled radio button.
/// @param {Color} $color - The desired ink color.
///
@mixin ink-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include ink-color_($color, $query: $query);
  }
}

///
/// Sets the stroke color of an unchecked, disabled radio button.
/// @param {Color} $color - The desired stroke color.
///
@mixin disabled-unchecked-stroke-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled-unchecked_ {
    @include stroke-color_($color, $query: $query);
  }
}

///
/// Sets the stroke color of a checked, disabled radio button.
/// @param {Color} $color - The desired stroke color.
///
@mixin disabled-checked-stroke-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled-checked_ {
    @include stroke-color_($color, $query: $query);
  }
}

///
/// Sets the ink color of a disabled radio button.
/// @param {Color} $color - The desired ink color
///
@mixin disabled-ink-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled_ {
    @include ink-color_($color, $query: $query);
  }
}

@mixin focus-indicator-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-radio__background::before {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(background-color, $color);
    }
  }
}

///
/// Sets radio touch target size which can be more than the ripple size. Param `$ripple-size` is required for custom
/// ripple size.
///
/// @param {Number} $size Size of touch target (Native input) in `px`.
/// @param {Number} $ripple-size Size of ripple in `px`. Required only for custom ripple size.
///
@mixin touch-target(
  $size: variables.$ripple-size,
  $ripple-size: variables.$ripple-size,
  $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $offset: ($ripple-size - $size) / 2;

  .mdc-radio__native-control {
    @include feature-targeting-mixins.targets($feat-structure) {
      top: $offset;
      right: $offset;
      left: $offset;
      width: $size;
      height: $size;
    }
  }
}

///
/// Sets density scale for radio.
///
/// @param {Number | String} $density-scale - Density scale value for component. Supported density scale values
///     `-3`, `-2`, `-1`, `0`.
///
@mixin density($density-scale, $query: feature-targeting-functions.all()) {
  $size: density-functions.prop-value(
    $density-config: variables.$density-config,
    $density-scale: $density-scale,
    $property-name: size,
  );

  @include ripple-size($size, $query: $query);
  // Sets touch target size same as ripple size.
  @include touch-target($size: $size, $ripple-size: $size, $query: $query);

  @if $density-scale != 0 {
    @include touch-target-reset_($query: $query);
  }
}

///
/// Sets radio ripple size.
///
/// @param {Number} $size - Ripple size in `px`.
///
@mixin ripple-size($size, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $padding: ($size - variables.$icon-size) / 2;

  @include feature-targeting-mixins.targets($feat-structure) {
    padding: $padding;
  }

  .mdc-radio__background::before {
    @include feature-targeting-mixins.targets($feat-structure) {
      top: -$padding;
      left: -$padding;
      width: $size;
      height: $size;
    }
  }
}

///
/// Resets touch target-related styles. This is called from the density mixin to
/// automatically remove the increased touch target, since dense components
/// don't have the same default a11y requirements.
/// @access private
///
@mixin touch-target-reset_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include feature-targeting-mixins.targets($feat-structure) {
    margin: 0;
  }
}

///
/// Helps select the radio background only when its native control is in the
/// enabled state.
/// @access private
///
@mixin if-enabled_ {
  .mdc-radio__native-control:enabled + {
    @content;
  }
}

///
/// Helps select the radio background only when its native control is in the
/// enabled & unchecked state.
/// @access private
///
@mixin if-enabled-unchecked_ {
  .mdc-radio__native-control:enabled:not(:checked) + {
    @content;
  }
}

///
/// Helps select the radio background only when its native control is in the
/// enabled & checked state.
/// @access private
///
@mixin if-enabled-checked_ {
  .mdc-radio__native-control:enabled:checked + {
    @content;
  }
}

///
/// Helps select the radio background only when its native control is in the
/// disabled state.
/// @access private
///
@mixin if-disabled_ {
  [aria-disabled="true"] .mdc-radio__native-control,
  .mdc-radio__native-control:disabled {
    + {
      @content;
    }
  }
}

///
/// Helps select the radio background only when its native control is in the
/// disabled & unchecked state.
/// @access private
///
@mixin if-disabled-unchecked_ {
  [aria-disabled="true"] .mdc-radio__native-control,
  .mdc-radio__native-control:disabled {
    &:not(:checked) + {
      @content;
    }
  }
}

///
/// Helps select the radio background only when its native control is in the
/// disabled & checked state.
/// @access private
///
@mixin if-disabled-checked_ {
  [aria-disabled="true"] .mdc-radio__native-control,
  .mdc-radio__native-control:disabled {
    &:checked + {
      @content;
    }
  }
}

///
/// Sets the ink color for radio. This is wrapped in a mixin
/// that qualifies state such as `mdc-radio-if-enabled_`
/// @access private
///
@mixin ink-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-radio__background .mdc-radio__inner-circle {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(border-color, $color);
    }
  }
}

///
/// Sets the stroke color for radio. This is wrapped in a mixin
/// that qualifies state such as `mdc-radio-if-enabled_`
/// @access private
///
@mixin stroke-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-radio__background .mdc-radio__outer-circle {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(border-color, $color);
    }
  }
}
