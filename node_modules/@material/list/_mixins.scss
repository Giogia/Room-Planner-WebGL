// Copyright 2016 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

@use "sass:map";
@use "@material/density/functions" as density-functions;
@use "@material/rtl/mixins" as rtl-mixins;
@use "@material/theme/mixins" as theme-mixins;
@use "@material/shape/functions" as shape-functions;
@use "@material/shape/mixins" as shape-mixins;
@use "@material/ripple/mixins" as ripple-mixins;
@use "@material/theme/functions" as theme-functions;
@use "@material/typography/mixins" as typography-mixins;
@use "@material/typography/variables" as typography-variables;
@use "@material/feature-targeting/functions" as feature-targeting-functions;
@use "@material/feature-targeting/mixins" as feature-targeting-mixins;
@use "./variables";
@use "@material/ripple/functions" as ripple-functions;
@use "@material/theme/variables" as theme-variables;

//
// Public
//

@mixin core-styles($query: feature-targeting-functions.all()) {
  @include without-ripple($query);
  @include ripple($query);
}

// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other
// list styles. It is recommended that most users use `mdc-list-core-styles` instead.
@mixin without-ripple($query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-typography: feature-targeting-functions.create-target($query, typography);

  $item-primary-text-baseline-height: 32px;
  $item-secondary-text-baseline-height: 20px;
  $dense-item-primary-text-baseline-height: 24px;
  $divider-color: if(
    theme-functions.tone(theme-variables.$background) == "dark",
    variables.$divider-color-on-dark-bg,
    variables.$divider-color-on-light-bg
  );

  .mdc-list {
    @include base_($query);
  }

  @include single-line-density(variables.$single-line-density-scale, $query: $query);
  @include item-secondary-text-ink-color(text-secondary-on-background, $query);
  @include item-graphic-fill-color(transparent, $query);
  @include item-graphic-ink-color(text-icon-on-background, $query);
  @include item-meta-ink-color(text-hint-on-background, $query);
  @include group-subheader-ink-color(text-primary-on-background, $query);
  @include item-disabled-text-opacity(variables.$text-disabled-opacity, $query);
  @include item-disabled-text-color(variables.$text-disabled-color, $query);

  .mdc-list--dense {
    @include feature-targeting-mixins.targets($feat-structure) {
      padding-top: 4px;
      padding-bottom: 4px;
      font-size: .812rem;
    }
  }

  .mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include item-base_;
    }
  }

  // "Selected" is ephemeral and likely to change soon. E.g., selecting one or more photos to share in Google Photos.
  // "Activated" is more permanent. E.g., the currently highlighted navigation destination in a drawer.
  .mdc-list-item--selected,
  .mdc-list-item--activated {
    @include item-primary-text-ink-color(primary, $query);
    @include item-graphic-ink-color(primary, $query);
  }

  .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include graphic-size_(24px);

      flex-shrink: 0;
      align-items: center;
      justify-content: center;
      fill: currentColor;
    }
  }

  // Extra specificity is to override .material-icons display style if used in
  // conjunction with mdc-list-item__graphic
  // stylelint-disable plugin/selector-bem-pattern
  .mdc-list .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline-flex;
    }
  }
  // stylelint-enable plugin/selector-bem-pattern

  .mdc-list-item__meta {
    // stylelint-disable selector-class-pattern
    &:not(.material-icons) {
      @include typography-mixins.typography(caption, $query);
    }
    // stylelint-enable selector-class-pattern

    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-property(margin, auto, 0, ".mdc-list-item");
    }
  }

  .mdc-list-item__text {
    @include typography-mixins.overflow-ellipsis($query);
  }

  // Disable interaction on label elements that may automatically
  // toggle corresponding checkbox / radio input.
  .mdc-list-item__text[for] {
    @include feature-targeting-mixins.targets($feat-structure) {
      pointer-events: none;
    }
  }

  .mdc-list-item__primary-text {
    @include typography-mixins.overflow-ellipsis($query);
    @include typography-mixins.baseline-top($item-primary-text-baseline-height, $query);
    @include typography-mixins.baseline-bottom($item-secondary-text-baseline-height, $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      display: block;
    }

    // stylelint-disable plugin/selector-bem-pattern
    .mdc-list--dense & {
      @include typography-mixins.baseline-top($dense-item-primary-text-baseline-height, $query);
      @include typography-mixins.baseline-bottom($item-secondary-text-baseline-height, $query);
    }
    // stylelint-enable plugin/selector-bem-pattern
  }

  .mdc-list-item__secondary-text {
    @include typography-mixins.typography(body2, $query);
    @include typography-mixins.overflow-ellipsis($query);
    @include typography-mixins.baseline-top($item-secondary-text-baseline-height, $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      display: block;
    }

    // stylelint-disable plugin/selector-bem-pattern
    .mdc-list--dense & {
      @include typography-mixins.baseline-top($item-secondary-text-baseline-height, $query);

      @include feature-targeting-mixins.targets($feat-structure) {
        font-size: inherit;
      }
    }
    // stylelint-enable plugin/selector-bem-pattern
  }

  // stylelint-disable plugin/selector-bem-pattern
  .mdc-list--dense .mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      height: 40px;
    }
  }

  .mdc-list--dense .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include graphic-size_(20px);
    }
  }

  .mdc-list--avatar-list .mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      height: 56px;
    }
  }

  .mdc-list--avatar-list .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include graphic-size_(40px);

      border-radius: 50%;
    }
  }

  .mdc-list--two-line .mdc-list-item__text {
    @include feature-targeting-mixins.targets($feat-structure) {
      align-self: flex-start;
    }
  }

  .mdc-list--two-line .mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      height: 72px;
    }
  }

  .mdc-list--two-line.mdc-list--dense .mdc-list-item,
  .mdc-list--avatar-list.mdc-list--dense .mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      height: 60px;
    }
  }

  .mdc-list--avatar-list.mdc-list--dense .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include graphic-size_(36px);
    }
  }

  // Only change mouse cursor for interactive list items which are not disabled.
  :not(.mdc-list--non-interactive) > :not(.mdc-list-item--disabled).mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      cursor: pointer;
    }
  }

  // Override anchor tag styles for the use-case of a list being used for navigation
  // stylelint-disable selector-max-type,selector-no-qualifying-type
  a.mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      color: inherit;
      text-decoration: none;
    }
  }
  // stylelint-enable selector-max-type,selector-no-qualifying-type

  .mdc-list-divider {
    @include feature-targeting-mixins.targets($feat-structure) {
      height: 0;
      margin: 0;
      border: none;
      border-bottom-width: 1px;
      border-bottom-style: solid;
    }
  }

  // Note: ideally we'd be able to hoist this to the top-level `$feat-color`, but doing so
  // will cause the `border` declaration on `.mdc-list-divider` above to override it.
  @include divider-color($divider-color, $query);

  .mdc-list-divider--padded {
    @include feature-targeting-mixins.targets($feat-structure) {
      // Leave gaps on each side to match the padding on list items
      margin: 0 variables.$side-padding;
    }
  }

  .mdc-list-divider--inset {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-box(margin, left, variables.$text-offset, ".mdc-list-group");

      width: calc(100% - #{variables.$text-offset});
    }
  }

  .mdc-list-divider--inset.mdc-list-divider--padded {
    @include feature-targeting-mixins.targets($feat-structure) {
      width: calc(100% - #{variables.$text-offset} - #{variables.$side-padding});
    }
  }

  .mdc-list-group {
    @include feature-targeting-mixins.targets($feat-structure) {
      // Cancel top/bottom padding on individual lists within group
      .mdc-list {
        padding: 0;
      }
    }
  }

  .mdc-list-group__subheader {
    $mdc-list-subheader-virtual-height: 3rem;
    $mdc-list-subheader-leading: map.get(map.get(typography-variables.$styles, body1), line-height);
    $mdc-list-subheader-margin: calc((#{$mdc-list-subheader-virtual-height} - #{$mdc-list-subheader-leading}) / 2);

    @include typography-mixins.typography(subtitle1, $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      margin: $mdc-list-subheader-margin variables.$side-padding;
    }
  }
}

// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other
// list styles. It is recommended that most users use `mdc-list-core-styles` instead.
@mixin ripple($query: feature-targeting-functions.all()) {
  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE

  // List items should support states by default, but it should be possible to opt out.
  // Direct child combinator is necessary for non-interactive modifier on parent to not
  // match this selector.
  :not(.mdc-list--non-interactive) > :not(.mdc-list-item--disabled).mdc-list-item {
    @include item-interactive-ripple_($query);
  }

  // Set styles only for focus state on disabled list item.
  :not(.mdc-list--non-interactive) > .mdc-list-item--disabled {
    @include ripple-mixins.surface($query: $query);
    @include ripple-mixins.radius-bounded($query: $query);
    @include ripple-mixins.states-base-color(theme-variables.prop-value(on-surface), $query: $query);
    @include ripple-mixins.states-focus-opacity(ripple-functions.states-opacity(primary, focus), $query: $query);
  }
}

@mixin item-primary-text-ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  @include feature-targeting-mixins.targets($feat-color) {
    @include theme-mixins.prop(color, $color);
  }
}

@mixin item-secondary-text-ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-list-item__secondary-text {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}

@mixin item-graphic-fill-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(background-color, $color);
    }
  }
}

@mixin item-graphic-ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}

@mixin item-meta-ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-list-item__meta {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}

///
/// Sets shape radius (rounded) to single line list variant.
///
/// @param {Number | List<Number>} $radius Radius size in `px` or percentage. It can be 4 value corner or single radius.
///     Set to `50%` for rounded shape.
/// @param {Boolean} $rtl-reflexive Set to true to flip border radius in RTL context. Defaults to `false`.
/// @param {Number} $density-scale Density scale of single line list. Set this only when custom density is applied.
///     Defaults to `$mdc-list-single-line-density-scale`.
///
/// @access public
///
@mixin single-line-shape-radius(
  $radius,
  $rtl-reflexive: false,
  $density-scale: variables.$single-line-density-scale,
  $query: feature-targeting-functions.all()) {

  $height: density-functions.prop-value(
    $density-config: variables.$single-line-density-config,
    $density-scale: $density-scale,
    $property-name: height,
  );

  $resolved-radius: shape-functions.resolve-percentage-radius($height, $radius);

  .mdc-list-item {
    @include shape-mixins.radius($resolved-radius, $rtl-reflexive, $query: $query);
  }
}

@mixin divider-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-list-divider {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(border-bottom-color, $color);
    }
  }
}

@mixin group-subheader-ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-list-group__subheader {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}

@mixin item-disabled-text-opacity($opacity, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-list-item--disabled .mdc-list-item__text {
    @include feature-targeting-mixins.targets($feat-color) {
      opacity: $opacity;
    }
  }
}

@mixin item-disabled-text-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-list-item--disabled {
    .mdc-list-item__text,
    .mdc-list-item__primary-text,
    .mdc-list-item__secondary-text {
      @include feature-targeting-mixins.targets($feat-color) {
        @include theme-mixins.prop(color, $color);
      }
    }
  }
}

///
/// Sets density scale to single line list variant.
///
/// @param {Number} $density-scale Density scale for list. Supported density scales are `-4`, `-3`, `-2`, `-1` and  `0`.
///
/// @access public
///
@mixin single-line-density($density-scale, $query: feature-targeting-functions.all()) {
  $height: density-functions.prop-value(
    $density-config: variables.$single-line-density-config,
    $density-scale: $density-scale,
    $property-name: height,
  );

  .mdc-list-item {
    @include single-line-height($height, $query: $query);
  }
}

///
/// Sets height to single line list variant.
///
/// @param {Number} $height Height value in `px`.
///
/// @access public
///
@mixin single-line-height($height, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include feature-targeting-mixins.targets($feat-structure) {
    height: $height;
  }
}

//
// Private
//

@mixin base_($query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-typography: feature-targeting-functions.create-target($query, typography);

  @include typography-mixins.typography(subtitle1, $query);

  @include feature-targeting-mixins.targets($feat-typography) {
    // According to the mocks and stickersheet, the line-height is
    // adjusted to 24px for text content, same as for body1.
    /* @alternate */
    line-height: map.get(map.get(typography-variables.$styles, body1), line-height);
  }

  @include feature-targeting-mixins.targets($feat-structure) {
    margin: 0;
    padding: 8px 0;
    list-style-type: none;

    &:focus {
      outline: none;
    }
  }

  @include item-primary-text-ink-color(text-primary-on-background, $query);
}

@mixin item-base_ {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: flex-start;
  padding: 0 variables.$side-padding;
  overflow: hidden;

  &:focus {
    outline: none;
  }
}

// Ripple styles for an interactive list item (one that is enabled and inside an interactive list).
@mixin item-interactive-ripple_($query: feature-targeting-functions.all()) {
  @include ripple-mixins.surface($query);
  @include ripple-mixins.radius-bounded($query: $query);
  @include ripple-mixins.states(theme-variables.prop-value(on-surface), false, $query);
  @include ripple-mixins.states-activated(primary, false, $query);
  @include ripple-mixins.states-selected(primary, false, $query);
}

// Sets the width and height of the graphic element, as well as calculates the margins for
// the graphic element such that the text is always offset by 72px, which is defined within
// the spec.
@mixin graphic-size_($size) {
  $text-offset: 72px;
  $side-padding: variables.$side-padding;
  $margin-value: $text-offset - $side-padding - $size;

  @include rtl-mixins.reflexive-box(margin, right, $margin-value, ".mdc-list-item");

  width: $size;
  height: $size;
}
