{"version":3,"sources":["webpack:///./packages/mdc-theme/mdc-theme.scss"],"names":[],"mappings":";;;;;;;AA+BE;EAGM;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;CATP;;AAgBK;EA0CF;EACA;EACA;CAtDH;;AAUK;EA0CF;EACA;EACA;CAhDH;;AAUK;EAoCF;EACA;EACA;CA1CH;;AAIK;EAoCF;EACA;EACA;CApCH;;AARK;EA0CF;EACA;EACA;CA9BH;;AAdK;EA0CF;EACA;EACA;CAxBH;;AApBK;EA0CF;EACA;EACA;CAlBH;;AA1BK;EA0CF;EACA;EACA;CAZH;;AAhCK;EA0CF;EACA;EACA;CANH;;AAtCK;EA0CF;EACA;EACA;CAAH;;AA5CK;EA0CF;EACA;EACA;CAMH;;AAlDK;EA0CF;EACA;EACA;CAYH;;AAxDK;EA0CF;EACA;EACA;CAkBH;;AA9DK;EA0CF;EACA;EACA;CAwBH;;AApEK;EA0CF;EACA;EACA;CA8BH;;AA1EK;EA0CF;EACA;EACA;CAoCH;;AAhFK;EA0CF;EACA;EACA;CA0CH;;AAtFK;EA0CF;EACA;EACA;CAgDH;;AA5FK;EA0CF;EACA;EACA;CAsDH;;AAlGK;EA0CF;EACA;EACA;CA4DH;;AAxGK;EA0CF;EACA;EACA;CAkEH;;AA9GK;EA0CF;EACA;EACA;CAwEH;;AApHK;EA0CF;EACA;EACA;CA8EH;;AA1HK;EA0CF;EACA;EACA;CAoFH;;AAhHG;EA0BA;EACA;EACA;CA0FH;;AAtHG;EA0BA;EACA;EACA","file":"mdc.theme.css","sourcesContent":["//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:map\";\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\";\n@use \"./variables\";\n@use \"./functions\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  :root {\n    @include mixins.targets($feat-color) {\n      @each $style in map.keys(variables.$property-values) {\n        --mdc-theme-#{$style}: #{map.get(variables.$property-values, $style)};\n      }\n    }\n  }\n\n  @each $style in map.keys(variables.$property-values) {\n    @if $style != \"background\" and $style != \"surface\" {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(color, $style, true);\n        }\n      }\n    } @else {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(background-color, $style);\n        }\n      }\n    }\n  }\n\n  // CSS rules for using primary and secondary (plus light/dark variants) as background colors.\n  @each $style in (\"primary\", \"secondary\") {\n    .mdc-theme--#{$style}-bg {\n      @include mixins.targets($feat-color) {\n        @include prop(background-color, $style, true);\n      }\n    }\n  }\n}\n\n// Applies the correct theme color style to the specified property.\n// $property is typically color or background-color, but can be any CSS property that accepts color values.\n// $style should be one of the map keys in $mdc-theme-property-values (_variables.scss), or a color value.\n@mixin prop($property, $style, $important: false) {\n  $important-rule: if($important, \"!important\", \"\");\n\n  @if functions.is-var-with-fallback_($style) {\n    #{$property}: functions.get-var-fallback_($style) #{$important-rule};\n    /* @alternate */\n    #{$property}: functions.var_($style) #{$important-rule};\n  } @else if variables.is-valid-theme-prop-value_($style) {\n    #{$property}: $style #{$important-rule};\n  } @else {\n    @if not map.has-key(variables.$property-values, $style) {\n      @error \"Invalid style: '#{$style}'. Choose one of: #{map.keys(variables.$property-values)}\";\n    }\n    $value: map.get(variables.$property-values, $style);\n\n    #{$property}: $value #{$important-rule};\n    /* @alternate */\n    #{$property}: var(--mdc-theme-#{$style}, $value) #{$important-rule};\n  }\n}\n"],"sourceRoot":""}